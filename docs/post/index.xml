<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on SecBlog</title>
    <link>https://sec.alexflor.es/post/</link>
    <description>Recent content in Posts on SecBlog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 30 Dec 2018 17:06:30 -0500</lastBuildDate>
    
	<atom:link href="https://sec.alexflor.es/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mind Your OOPSEC</title>
      <link>https://sec.alexflor.es/post/vm_gateway/</link>
      <pubDate>Sun, 30 Dec 2018 17:06:30 -0500</pubDate>
      
      <guid>https://sec.alexflor.es/post/vm_gateway/</guid>
      <description>OPSEC is hard and those OOPS moments can often cost you a campaign when Red teaming. In this post I&amp;rsquo;ll go over how I set up my VMs so I never have to remember to turn on a VPN, stress about having some &amp;lsquo;killswitch&amp;rsquo; fail, or being on the losing end of some network-race-condition nonsense when waking my laptop.
Automation isn&amp;rsquo;t always about convenience for the user. Sometimes it&amp;rsquo;s also about determinism.</description>
    </item>
    
    <item>
      <title>Analyzing Data Exfiltration over ICMP</title>
      <link>https://sec.alexflor.es/post/icmp_pcaps/</link>
      <pubDate>Fri, 11 May 2018 20:06:55 -0400</pubDate>
      
      <guid>https://sec.alexflor.es/post/icmp_pcaps/</guid>
      <description>I&amp;rsquo;m a big fan of learning through competition. Capture The Flag games have tremendous utility for training within the Security sector and even outside of it. Intentionally vulnerable web applications, like OWASP&amp;rsquo;s JuiceShop, are excellent tools for assisting in developing Secure Software Development Life-cycle programs within an organization.
So let&amp;rsquo;s take an exercise I recently came across in a CTF event. The skills required to solve the challenge are actually quite useful in real-world defensive scenarios.</description>
    </item>
    
    <item>
      <title>Password Spraying with DoxyCannon</title>
      <link>https://sec.alexflor.es/post/password_spraying_with_doxycannon/</link>
      <pubDate>Mon, 16 Apr 2018 22:43:36 -0400</pubDate>
      
      <guid>https://sec.alexflor.es/post/password_spraying_with_doxycannon/</guid>
      <description>Password sprays are here to stay. It&amp;rsquo;s probably a good idea to configure some clever WAF rules, implement captcha systems, and set up additional alerting. But once implemented, how do you test and tune your protective measures?
Enter DoxyCannon
DoxyCannon&amp;rsquo;s name borrows from ProxyCannon, a script that instantiates cloud infrastructure through which one can proxy requests. Unlike ProxyCannon, DoxyCannon gives you the same functionality without needing to rely on cloud providers.</description>
    </item>
    
    <item>
      <title>BashyNumb.sh</title>
      <link>https://sec.alexflor.es/post/bashynumb/</link>
      <pubDate>Tue, 22 Aug 2017 22:47:45 -0400</pubDate>
      
      <guid>https://sec.alexflor.es/post/bashynumb/</guid>
      <description>I&amp;rsquo;ve been running into more and more Linux boxes that don&amp;rsquo;t have python 2 installed. It&amp;rsquo;s been a little frustrating since I like to use a slightly modified version of the famous linuxprivchecker.py that almost all OSCP students know and love. I&amp;rsquo;m lazy and hate manual enumeration; makes my fingers go numb. I decided to spend an evening translating it to python 3, but quickly realized, &amp;ldquo;This python is just invoking shell commands, why am I doing this?</description>
    </item>
    
    <item>
      <title>Creating a VPN Access Point</title>
      <link>https://sec.alexflor.es/post/vpn-access-point/</link>
      <pubDate>Fri, 18 Aug 2017 20:07:36 -0400</pubDate>
      
      <guid>https://sec.alexflor.es/post/vpn-access-point/</guid>
      <description>By now, there shouldn&amp;rsquo;t be any doubt that not only are you being watched online, but your browsing habits, particularly your political ones, are of interest to the current administration. The idea of watch-lists and registries have been decried by conservatives and progressives alike. This should strike a chord with conservatives, who&amp;rsquo;ve protested gun registrations and national ID cards, as it demonstrates the governmental over-reach that conservatives often denounce. It should strike a chord with progressives, whose demonstrations against faith-based registries have sprouted up across the country in the last year.</description>
    </item>
    
    <item>
      <title>Chrome Extension Steals Cloudflare Api Tokens</title>
      <link>https://sec.alexflor.es/post/chrome-extension-steals-cloudflare-api-tokens/</link>
      <pubDate>Thu, 03 Aug 2017 20:59:56 -0400</pubDate>
      
      <guid>https://sec.alexflor.es/post/chrome-extension-steals-cloudflare-api-tokens/</guid>
      <description>Upon receiving news that the popular Chrome Extension, Web Developer, had been compromised, I quickly began to wonder about the what and how. Several stories exist about how the extension came to be compromised and they touched a bit on what it did. This post is meant to expand upon, what I believe to be, the more nefarious behavior of the extension. Since the extension calls out to an attacker-controlled URL, the payload hosted at that URL could be changed to anything at any time.</description>
    </item>
    
    <item>
      <title>Creating BashBunny Payloads</title>
      <link>https://sec.alexflor.es/post/bashbunny/</link>
      <pubDate>Sat, 01 Apr 2017 22:08:35 -0400</pubDate>
      
      <guid>https://sec.alexflor.es/post/bashbunny/</guid>
      <description>What is it? The BashBunny is an attack platform that allows attackers to create payloads in Bash. The device can be scripted to enumerate as a HID (keyboard), mass storage, serial, and Ethernet. This enables a multitude of attacks including thing like exfiltrating documents over a network interface or stealing account hashes from locked computers.
Creating a Payload We want to create a payload that allows for easy exfiltration from macOS.</description>
    </item>
    
    <item>
      <title>Finding Your Way Out From Behind Firewalls with Strict Outbound Rules</title>
      <link>https://sec.alexflor.es/post/egress-ports/</link>
      <pubDate>Tue, 07 Feb 2017 19:44:18 -0500</pubDate>
      
      <guid>https://sec.alexflor.es/post/egress-ports/</guid>
      <description>You&amp;rsquo;ve achieved code execution on a machine, but for some reason your reverse shell isn&amp;rsquo;t pinging you back. Or that wget/tftp command isn&amp;rsquo;t downloading your recon/post-exploitation tools. There&amp;rsquo;s a chance you&amp;rsquo;re dealing with an egress problem. Typical ports that need outboud access are blocked. You try the main ones you can think of (21, 22, 53, 80, 8080, 443), but none of them seem to be connecting. Do you start at 1 and manually test?</description>
    </item>
    
    <item>
      <title>Configuring SSH for Pivoting</title>
      <link>https://sec.alexflor.es/post/ssh_pivoting/</link>
      <pubDate>Thu, 02 Feb 2017 16:32:04 -0500</pubDate>
      
      <guid>https://sec.alexflor.es/post/ssh_pivoting/</guid>
      <description>You&amp;rsquo;re on a pentesting engagement and you&amp;rsquo;ve discovered a dual homed machine that allows you access to a subnet you can&amp;rsquo;t access directly from your attack machine. Assuming you&amp;rsquo;ve compromised at least one machine on the initial network, you can use it as a proxy to other machines on the &amp;ldquo;hidden&amp;rdquo; subnet.
The ssh client has an often-overlooked configuration file that resides in your ~/.ssh folder. You can configure things in here that are specific to certain hosts or you can set default configurations for every host.</description>
    </item>
    
    <item>
      <title>B2R: Wallaby Walkthrough</title>
      <link>https://sec.alexflor.es/post/wallaby/</link>
      <pubDate>Fri, 30 Dec 2016 19:16:02 -0400</pubDate>
      
      <guid>https://sec.alexflor.es/post/wallaby/</guid>
      <description>Executive Summary This machine had an unlisted but open webapp path that allowed for remote command execution. After establishing a reverse shell as the limited user www-data, privilege checks showed the user was allowed to modify firewall rules. There was also an IRC server that contained a bot that allowed command execution through the use of the .run command. The command would only obey the user waldo so modification of the firewall allows an attacker to kick and assume the waldo identity.</description>
    </item>
    
    <item>
      <title>B2R: Stapler</title>
      <link>https://sec.alexflor.es/post/stapler/</link>
      <pubDate>Sat, 24 Dec 2016 23:45:38 -0500</pubDate>
      
      <guid>https://sec.alexflor.es/post/stapler/</guid>
      <description>Adding the IP address of the VM to the hosts file allows one to cut down on some typing.
Executive Summary This machine had several services running, some of which revealed employee names and accounts that could later be leveraged to compromise the system. A Wordpress plug-in vulnerability was found and used to extract database credentials, which then led to a non-privileged shell. Once scanned, it was discovered that a script ran every 20 minutes as the root user and that the script was writable to our non-privileged user.</description>
    </item>
    
    <item>
      <title>B2R: SickOSv1.2</title>
      <link>https://sec.alexflor.es/post/sickos_1.2/</link>
      <pubDate>Tue, 20 Dec 2016 23:45:50 -0500</pubDate>
      
      <guid>https://sec.alexflor.es/post/sickos_1.2/</guid>
      <description>Executive Summary This machine had an unprotected folder which allowed uploading of malicious PHP code which could then be executed remotely. An attacker could then create an unprivileged shell on the victim machine and begin to explore the system for additional vulnerabilities which could lead to a full compromise. During the exploration, an outdated version of chkrootkit was found. By exploiting a known vulnerability in the way chkrootkit parses arguments, an attacker could create a malicious file that would later be run by chkrootkit as a fully privileged user.</description>
    </item>
    
    <item>
      <title>B2R: IMF Walkthrough</title>
      <link>https://sec.alexflor.es/post/imf_walkthrough/</link>
      <pubDate>Tue, 01 Nov 2016 19:16:02 -0400</pubDate>
      
      <guid>https://sec.alexflor.es/post/imf_walkthrough/</guid>
      <description>After mapping the network and finding our IP address at 192.168.1.162, we can add it to our /etc/hosts temporarily to make things a little easier for us.
echo &amp;quot;192.168.1.162 imf&amp;quot; &amp;gt;&amp;gt; /etc/hosts  Lets see what kind of machine we&amp;rsquo;re dealing with.
Ok, so web only. Great. nikto didn&amp;rsquo;t reveal any low-hanging fruit so let&amp;rsquo;s dive into the source.
Check that out! Our first flag was hidden in http://imf/contact.php. This looks like base64.</description>
    </item>
    
    <item>
      <title>B2R: Tr0ll Walkthrough</title>
      <link>https://sec.alexflor.es/post/b2r_troll_walkthrough/</link>
      <pubDate>Thu, 20 Oct 2016 20:57:00 -0400</pubDate>
      
      <guid>https://sec.alexflor.es/post/b2r_troll_walkthrough/</guid>
      <description>A couple of weeks ago, work sent me to a security class for an upcoming product. While there, I learned about vulnhub, a repository of intentionally vulnerable virtual machines for anyone to compromise. Since coming back, vulnhub has become my new obsession. Here&amp;rsquo;s a walkthrough of my attempt.
Note: I struggled a bit more that this writeup lets on. The struggle is ommited for clarity and brevity.
__
After finding the VM with an nmap scan, we see a couple of open ports.</description>
    </item>
    
  </channel>
</rss>